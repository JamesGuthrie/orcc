///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs

allocateFifoType(type, size, count, lock) ::= <<
FifoAPI * fifo_$count$ = FifoFactory<$type$>::allocateFifo($size$, $lock$);
>>

allocateFifoKind(edge, source, sourcePort, target, targetPort) ::= <<
$allocateFifoType(type=sourcePort.type, size=edge.size, count=network.connectionMap.(edge), lock="0")$
>>

tryAllocateFifo(edge, src, tgt) ::= <<
$if (src.instance)$
$if (tgt.instance)$
$allocateFifoKind(edge=edge, source=src.instance, sourcePort=edge.source,target=tgt.instance, targetPort=edge.target)$
$endif$
$endif$
>>

allocateFifo(edge) ::= <<
$tryAllocateFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge))$
>>

allocateFifos(network) ::= <<
$network.connections: allocateFifo()$
>>


///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs
assignLockedFifo(target, targetPort, count, dir) ::= <<
$target.id$.connect($dir$, $target.actor.name$_$targetPort.name$, lockedFifo_$count$);
>>

doAssignFifo(source, sourcePort, target, targetPort, count) ::= <<
$source.id$.connect(ACTOR_PORT_OUT, $source.actor.name$_$sourcePort.name$, fifo_$count$);
$target.id$.connect(ACTOR_PORT_IN, $target.actor.name$_$targetPort.name$, fifo_$count$);
>>

tryAssignFifo(edge, src, tgt) ::= <<
$doAssignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$
	
>>

assignFifo(edge) ::= <<
$tryAssignFifo(edge=edge, src=net.sourceMap.(edge), tgt=network.targetMap.(edge))$
>>

assignFifos(edges) ::= <<
$edges: assignFifo()$
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()
printInitialize(instance) ::= <<
$if (instance.actor)$
$if (!instance.actor.initializes.empty)$
$instance.id$.init();

$endif$
$endif$
>>

printInitializes(instances) ::= <<
$instances: printInitialize()$
>>

printScheduler(instance) ::= <<
$if (!instance.wrapper)$
res += $instance.id$.scheduler();
$endif$
>>

printSchedulers(instances) ::= <<
$instances: printScheduler(); separator="\n"$
>>


declareExternalFifos(multicoreConnection) ::= <<
$connectionMap: {extern FifoAPI * lockedFifo_$it$;}; separator="\n"$

>>


putParameter(parameter) ::= <<
$instance.parameters.(parameter)$
>>

initializeInstance(instance) ::= <<
$instance.id$($instance.actor.parameters.list: putParameter(); separator=", "$)
>>

initializeInstances(instances) ::= <<
$instances: initializeInstance(); separator=",\n"$
>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network, options) ::= <<

$printMain(net=network)$

$!$printNetwork(net=network)$!$

>>

printMain(net) ::= <<

#include "FifoFactory.h"

#include "$net.name$.h"

extern "C" {
#include "orcc_util.h"
}

int main(int argc, char *argv[]) {
	init_orcc(argc, argv, NULL);
$if (net.networks)$
	$net.networks : {network_$it.name$ $it.name$;};separator="\n"$
	$net.networks : {$it.name$.start();};separator="\n"$
	$net.networks : {$it.name$.stop();};separator="\n"$
	return 0;
$else$
	network_$net.name$ $net.name$;
	$net.name$.start();
	$net.name$.stop();
$endif$

	return 0;
}
 
>>

printNetwork(net) ::= <<

$if (net.networks)$
$net.networks : printNetwork()$

$else$
/**
 * Generated from "$net.name$"
 */

////////////////////////////////////////////////////////////////////////////////
// FIFO allocation
namespace
{
   $allocateFifos(net)$
}



////////////////////////////////////////////////////////////////////////////////
// FIFO pointer assignments
network_$net.name$::network_$net.name$()
:
$initializeInstances(net.instances)$
{
	$assignFifos(net.connections)$
}

network_$net.name$::~network_$net.name$(){}

void network_$net.name$::start()
{
	$net.instances: {$it.id$.initializeActor();}; separator="\n"$	
	$net.instances: {$it.id$.startActorExecution();}; separator="\n"$	
	Threadaka::init();
	Threadaka::start();
}

void network_$net.name$::stop()
{
	Threadaka::stop();
	$net.instances: {$it.id$.stop();}; separator="\n"$
}

////////////////////////////////////////////////////////////////////////////////
// Actor scheduler

void network_$net.name$::schedule() 
{
	$printInitializes(net.instances)$
	while (1) 
	{
		int res = 0;
		$printSchedulers(net.instances)$
		if(res == 0)
			Sleep(0);
	}
}

void network_$net.name$::process(void * args)
{
	schedule();
}
$endif$

>>

