/////////////////////////////
// Root procedure
/////////////////////////////

network(debugFifos, fifoSize, network, options) ::= <<

  #include <stdlib.h>
  #include "actors-config.h"
  
  $initNetwork(network)$
  
  $printMain()$
  
>>

/////////////////////////////
// Main
/////////////////////////////

printMain() ::= <<
int main(int argc, char *argv[]) {
  int numberOfInstances;
  AbstractActorInstance **instances;
  initNetwork(&instances, &numberOfInstances);
  executeNetwork(argc, argv, instances, numberOfInstances);
}
>>

/////////////////////////////
// Network initialization
/////////////////////////////

initNetwork(network) ::= <<
static void initNetwork(AbstractActorInstance ***pInstances, int *pNumberOfInstances) {

  int numberOfInstances = $length(network.instances)$;
  AbstractActorInstance **actorInstances = (AbstractActorInstance **) malloc(numberOfInstances * sizeof(AbstractActorInstance *));

  *pInstances=actorInstances;

  *pNumberOfInstances=numberOfInstances;

  $network.instances : {instance | $declareActorInstance(actorInstance=instance)$}; separator="\n\n"$
  
  $network.instances : {instance | $initializeActorInstance(actorInstance=instance,index=i0)$}; separator="\n\n"$
  
  $network.connections : {connection | $connectPorts(source=connection.source, idSource=network.sourceMap.(connection).instance.id, target=connection.target, idTarget=network.targetMap.(connection).instance.id)$}; separator="\n"$
}
>>

/////////////////////////////
// Declaration
/////////////////////////////

declareActorInstance(actorInstance) ::= <<
extern ActorClass ActorClass_$actorInstance.id$;
AbstractActorInstance *p$actorInstance.id$;
$actorInstance.actor.inputs.list : {port|$declarePort(dir="In", port=port, id=actorInstance.id)$}; separator="\n"$
$actorInstance.actor.outputs.list : {port|$declarePort(dir="Out", port=port, id=actorInstance.id)$}; separator="\n"$
>>

declarePort(dir,port,id) ::= <<
$dir$putPort *p$id$_$port$;
>>

/////////////////////////////
// Initialization
/////////////////////////////

initializeActorInstance(actorInstance,index) ::= <<
p$actorInstance.id$ = createActorInstance(&ActorClass_$actorInstance.id$);
$actorInstance.actor.inputs.list : {port | $initializePort(dir="In",port=port,id=actorInstance.id,n="0")$}; separator="\n"$
$actorInstance.actor.outputs.list : {port | $initializePort(dir="Out",port=port,id=actorInstance.id,n=fifoSize)$}; separator="\n"$
actorInstances[$index$] = p$actorInstance.id$;
>>

initializePort(dir,port,id,n) ::= <<
p$id$_$port$ = create$dir$putPort(p$id$, "$port$", $n$);
>>

initializeParameter(parameter,id) ::= <<
setParameter(p$id$, "$parameter$", "$parameter.constantValue$");
>>

/////////////////////////////
// Connection
/////////////////////////////

connectPorts(source,idSource,target,idTarget) ::= <<
connectPorts($idSource$_$source$, $idTarget$_$target$);
>>


///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

Constant(constant) ::= <<
$(constant.class.simpleName)(constant)$
>>

BoolExpr(constant) ::= <<
$if (constant.value)$1$else$0$endif$
>>

IntExpr(number) ::= <<
$number$$if (number.long)$L$endif$
>>

// the values of a list: {val1, val2, ..., valn}
ListExpr(constant) ::= <<
{$constant.value: Constant(); wrap, separator=", "$}
>>

StringExpr(constant) ::= <<
"$constant$"
>>
