printActor(id, actor) ::= <<
$if (!actor.system)$
$actor.name$.cpp
$endif$

>>

printInstance(instance) ::= <<
$if (instance.actor)$
$printActor(id=instance.id, actor=instance.actor)$
$endif$

>>

printSubnetwork(net) ::= <<
$net.name$.cpp
$net.instances: printInstance();separator="\n"$

>>

addLibraries(net) ::= <<
$net.instances:
{$if(it.wrapper)$
add_library(LibAdaptorConfig STATIC \${LIBCAL2CPP_ROOT_PATH}/src/LibAdaptorConfig.cpp)
add_library(LibWrapper STATIC \${LIBCAL2CPP_ROOT_PATH}/src/wrapperaka.cpp)
$endif$}
$
>>

addDependencies(net) ::= <<
$net.instances:
{$if(it.wrapper)$
add_dependencies(top LibWrapper LibAdaptorConfig)
$endif$}
$
>>
targetLinkWrapper(net) ::= <<
$net.instances :
{$if(it.wrapper)$
LibAdaptorFactory
LibWrapper
LibAdaptorConfig
$endif$}
$
>>

Cpp_CMakeLists(networkList) ::= <<
# Generated from $network.name$

cmake_minimum_required (VERSION 2.8)
project (top)

if(MSVC)
set(CMAKE_CXX_FLAGS_DEBUG /MTd)
set(CMAKE_CXX_FLAGS_RELEASE /MT)
endif(MSVC)


# Common include directories
find_path(LIBCAL2CPP_ROOT_PATH include/actoraka.h)

include_directories(\${CMAKE_SOURCE_DIR} \${LIBCAL2CPP_ROOT_PATH}/include)

# Common link directories
link_directories(
\${LIBCAL2CPP_ROOT_PATH}/lib
)

$networkList : addLibraries()$


add_executable (top
main.cpp
$networkList : printSubnetwork()$
)

$networkList : addDependencies()$


target_link_libraries(top
LibOrcc
LibCALaka
LibThread
$networkList : targetLinkWrapper()$
)

>>
