///////////////////////////////////////////////////////////////////////////////
// include Actors
includeActor(actor) ::= <<
#include "$actor.name$.h"
>>

includeActors(actors) ::= <<
$actors: includeActor(); separator="\n"$
>>


includeSerDes(instance) ::= <<
$if (instance.serdes)$#include "WrapperAka.h"$endif$
>>

includeSerDeses(instances) ::= <<
$instances: includeSerDes()$
>>


///////////////////////////////////////////////////////////////////////////////
// initialize Instances
argumentList(parameter) ::= <<
$instance.parameters.(parameter)$
>>

initializeInstance(instance) ::= <<
$instance.id$($instance.actor.parameters.list: argumentList(); separator=", "$)
>>

initializeInstances(instances) ::= <<
$instances: initializeInstance(); wrap, separator=", "$
>>


///////////////////////////////////////////////////////////////////////////////
// declare FIFOs


doDeclareFifo(edge, src, tgt, kind) ::= <<
$if (src.instance && tgt.instance)$
FifoAPI * $network.name$_fifo_$network.connectionMap.(edge)$ = FifoFactory<$edge.source.type$>::allocateFifo($edge.size$, $kind$);
$if (network.networks && network.inputs.list.empty && network.outputs.list.empty)$
#define $src.instance.id$_$edge.source$ $network.name$_fifo_$network.connectionMap.(edge)$
#define $tgt.instance.id$_$edge.target$ $network.name$_fifo_$network.connectionMap.(edge)$
$endif$
$endif$
>>

declareFifo(edge) ::= <<
$if(network.networks)$
$doDeclareFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge), kind="2")$
$else$
$if (network.sourceMap.(edge).instance.serdes || network.targetMap.(edge).instance.serdes)$
$doDeclareFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge), kind="1")$
$else$
$doDeclareFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge), kind="0")$
$endif$
$endif$
>>

declareFifos(network) ::= <<
$network.connections: declareFifo()$
$if (network.networks)$
$network.networks: declareFifos()$
$endif$

>>

///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

doAssignTargetPort(source, sourcePort, target) ::= <<
$source.id$.connect(ACTOR_PORT_OUT, $source.actor.name$_$sourcePort.name$, $network.name$_$target.name$);

>>

doAssignSourcePort(source, target, targetPort) ::= <<
$target.id$.connect(ACTOR_PORT_IN, $target.actor.name$_$targetPort.name$, $network.name$_$source.name$);

>>

doAssignFifo(source, sourcePort, target, targetPort, count) ::= <<
$if (source.actor)$$
source.id$.connect(ACTOR_PORT_OUT, $source.actor.name$_$sourcePort.name$, $network.name$_fifo_$count$);$
else
$$source.id$.connect(ACTOR_PORT_OUT, $network.name$_$sourcePort.name$, $network.name$_fifo_$count$);$
endif$
$if (target.actor)$
$target.id$.connect(ACTOR_PORT_IN, $target.actor.name$_$targetPort.name$, $network.name$_fifo_$count$);$
else
$$target.id$.connect(ACTOR_PORT_IN, $network.name$_$targetPort.name$, $network.name$_fifo_$count$);$
endif$
>>

tryAssignFifo(edge, src, tgt) ::= <<
$if (src.instance)$
$if (tgt.instance)$
$doAssignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$
$else$
$doAssignTargetPort(source=src.instance, sourcePort=edge.source, target=tgt.port)$
$endif$
$else$
$doAssignSourcePort(source=src.port, target=tgt.instance, targetPort=edge.target)$
$endif$
>>

assignFifo(edge) ::= <<
$tryAssignFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge))$
>>

assignFifos(edges) ::= <<
$edges: assignFifo()$
>>

///////////////////////////////////////////////////////////////////////////////
// declare Instances

declareInstance(instance) ::= <<
$if (instance.network)$
$declareInstances(instance.network.instances)$
$else$
$if(instance.serdes)$
WrapperAka $instance.id$;
$else$
actor_$instance.actor.name$ $instance.id$;
$endif$
$endif$
>>

declareInstances(instances) ::= <<
$instances: declareInstance(); separator="\n"$
>>



///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()
printInitialize(instance) ::= <<
$if (instance.actor)$
$if (!instance.actor.initializes.empty)$
$instance.id$.initialize();
$endif$
$endif$
>>

printInitializes(instances) ::= <<
$instances: printInitialize()$
>>

printScheduler(instance) ::= <<
$if (!instance.serdes)$res += $instance.id$.scheduler();$endif$
>>

printSchedulers(instances) ::= <<
$instances: printScheduler(); separator="\n"$
>>



declareNetwork(network) ::= <<
class network_$network.name$ : public Threadaka
{
public:
	network_$network.name$():
	$initializeInstances(network.instances)$
	{
		$assignFifos(network.connections)$
	}
	
	~network_$network.name$(){}

	void start()
	{
		$network.instances: {$it.id$.startActorExecution();};separator="\n"$
		Threadaka::init();
		Threadaka::start();
	}
	void stop()
	{
		Threadaka::stop();
	}
	
	void process(void * args)
	{
		$printInitializes(network.instances)$
		while (1) 
		{
			int res = 0;
			$printSchedulers(network.instances)$
			if(res == 0)
				Sleep(0);
		}
	}
	
private:	
	$declareInstances(network.instances)$
};

>>

declareNetworks(networks) ::= <<
$networks : declareNetwork()$
>>

network(debugFifos, fifoSize, network, options) ::= <<
// Generated from "$network.name$"

#include "FifoFactory.h"
#include "Threadaka.h"

$includeActors(network.actors)$

$includeSerDeses(network.instances)$

#define SIZE 10000

$declareFifos(network)$

$if (network.networks)$
$declareNetworks(network.networks)$
$else$
$declareNetwork(network)$
$endif$
>>

