declareBroadcast(instance) ::= <<
$if (instance.broadcast)$
private Broadcast_$instance.broadcast.type$ actor_$instance.id$;
$endif$
>>

createBroadcast(instance) ::= <<
$if (instance.broadcast)$
actor_$instance.id$ = new Broadcast_$instance.broadcast.type$($length(instance.broadcast.outputList)$);
$endif$
>>

doAssignFifo(source, sourcePort, target, targetPort, count) ::= <<
actor_$source.id$.setFifo("$sourcePort.name$", fifo_$count$);
actor_$target.id$.setFifo("$targetPort.name$", fifo_$count$);
>>

allocateFifoType(type, size, count) ::= <<
private Fifo_$type$ fifo_$count$ = new Fifo_$type$($size$);
>>

printInitialize(instance) ::= <<
$if (instance.actor && !instance.actor.initializes.empty)$
actor_$instance.id$.initialize();
$endif$
>>

declareActor(instance) ::= <<
$if (instance.actor)$
private IActor actor_$instance.id$;
$endif$
>>

parameter(param) ::= <<
/* $param$ */ $instance.parameters.(param)$
>>

parameters(parameters) ::= <<
$parameters: parameter(); wrap, separator=", "$
>>

constructActor(instance) ::= <<
$if (instance.actor)$
actor_$instance.id$ = new Actor_$instance.actor.name$($parameters(instance.actor.parameters.list)$);
$endif$
>>

scheduleActor(instance) ::= <<
$if (instance.actor || instance.broadcast)$
nbOfFiredActions = actor_$instance.id$.schedule();
if (nbOfFiredActions < 0)
	stop = true;
else
	i += nbOfFiredActions;
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network) ::= <<
/**
 * Generated from "$network.name$"
 */
package net.sf.orcc.generated;

import net.sf.orcc.runtime.*;
import net.sf.orcc.runtime.actors.*;

public class Network_$network.name$ implements IScheduler {

	public static final int SIZE = $fifoSize$;

	// FIFO declarations
	$allocateFifos(network.connections)$
	// Actors
	$network.instances: declareActor()$
	// Broadcasts
	$network.instances: declareBroadcast()$

	@Override
	public void initialize() {
		$network.instances: constructActor()$
		$network.instances: createBroadcast()$

		$assignFifos(network.connections)$
	}

	@Override
	public void schedule() {
		$printInitializes(network.instances)$
		int i = 1;
		boolean stop = false;
		int nbOfFiredActions = 0;
		while ((i > 0) && (!stop)) {
			i = 0;
			$network.instances: scheduleActor()$
		}
	}
	 
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		CLIParameters.getInstance().setArguments(args);
		IScheduler scheduler = new Network_$network.name$();
		scheduler.initialize();
		scheduler.schedule();
		Actor_Display.closeDisplay();
	}

}

>>

