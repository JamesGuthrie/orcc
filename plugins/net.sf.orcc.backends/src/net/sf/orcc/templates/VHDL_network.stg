///////////////////////////////////////////////////////////////////////////////
// print IOs of the TOP Network
///////////////////////////////////////////////////////////////////////////////

printNetworkPorts(network) ::= <<
$network.inputs.list: printNetPortsInput(); separator="\n"$
$network.outputs.list: printNetPortsOutput(); separator="\n"$
>>

printNetPortsInput(port) ::= <<
$if(port.type.bool)
$$port.name$_data  : in  std_logic;$\n$$
else
$$port.name$_data  : in  std_logic_vector($port.type.size$ - 1 downto 0);$\n$$
endif$
$port.name$_send  : in  std_logic;
$port.name$_ack   : out std_logic;
>>

printNetPortsOutput(port) ::= <<
$if(port.type.bool)
$$port.name$_data   : out std_logic;$\n$$
else
$$port.name$_data   : out std_logic_vector($port.type.size$ - 1 downto 0);$\n$$
endif$
$port.name$_send   : out std_logic;
$port.name$_ack    : in  std_logic;
>>

//////////////////////////////////////////////////////////////////////////////
// Print signals
//////////////////////////////////////////////////////////////////////////////


tryPrintSignals(outgoingMap) ::= <<
$outgoingMap.keys: {instance | $checkInstanceType(instance)$}$
>>

checkInstanceType(instance) ::= <<
$if (instance.actor)
$                                            -- Actor : $instance.id$
$printSignals(inputs=instance.actor.inputs.list)$$
elseif (instance.broadcast)
$                                            -- Broadcast : $instance.id$
$printSignals(inputs=instance.broadcast.inputs.list)$$
elseif (instance.network)
$                                            -- Network : $instance.id$
$printSignals(inputs=instance.network.inputs.list)$$
endif$
>>

printSignals(inputs) ::= <<
$if(!inputs.empty)
$$network.incomingMap.(instance):printInSignals()$$
endif$
>>

printInSignals(connection) ::= <<
$printInSignal(connection=connection, map=network.predecessorsMap.(instance))$
>>

printInSignal(connection, map) ::= <<
$if(map.(connection.target))
$$if(connection.target.type.bool)
$signal $instance.id$_$connection.target$_data   : std_logic;$
else
$signal $instance.id$_$connection.target$_data   : std_logic_vector($connection.target.type.size$ - 1 downto 0);$
endif$

signal $instance.id$_$connection.target$_send   : std_logic;
signal $instance.id$_$connection.target$_ack    : std_logic;
$
endif$
>>


///////////////////////////////////////////////////////////////////////////////
// Print FIFOs instantiation
///////////////////////////////////////////////////////////////////////////////

assignFifos(edges) ::= << 
$edges: assignFifo()$ 
>> 

assignFifo(edge) ::= << 
$tryAssignFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge))$ 
>> 

tryAssignFifo(edge, src, tgt) ::= <<
$if (src.instance && tgt.instance)
$$doAssignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$$
endif$
>>

doAssignFifo(source, sourcePort, target, targetPort, count) ::= <<
$if(edge.size)
$fifo_$count$ : entity work.fifo_top 
generic map (
depth => $edge.size$,
$if(targetPort.type.bool)
$width => 1)$
else
$width => $targetPort.type.size$)$
endif$

port map (
  wr_data    => $source.id$_$sourcePort.name$_send, 
$if(targetPort.type.bool)
$  data_in(0) => $source.id$_$sourcePort.name$_data_out,$\n$$
else
$  data_in    => $source.id$_$sourcePort.name$_data_out,$\n$$
endif$
  wr_clk     => clock, 
  wr_ack      => $source.id$_$sourcePort.name$_ack, 
$if(targetPort.type.bool)
$  data_out(0)=> $target.id$_$targetPort.name$_data_in,$\n$$
else
$  data_out   => $target.id$_$targetPort.name$_data_in,$\n$$
endif
$  rd_clk     => clock, 
  send        => $target.id$_$targetPort.name$_send, 
  rd_ack      => $target.id$_$targetPort.name$_ack,  
  reset_n    => reset_n); $
endif$
>>


///////////////////////////////////////////////////////////////////////////////
// print actors and networks instantiation
///////////////////////////////////////////////////////////////////////////////

PrintNetworksAndActors(outgoingMap) ::= <<
$outgoingMap.keys: {instance | $checkNetworkOrActors(instance=instance)$}; separator="\n\n"$
>>

checkNetworkOrActors(instance) ::= <<
$if (instance.actor)
$$printInstances(inputs=instance.actor.inputs.list,
                    outputs=instance.actor.outputs.list)$$
elseif (instance.broadcast)
$$printInstances(inputs=instance.broadcast.inputs.list,
                   outputs=instance.broadcast.outputs.list)$$
endif$
>>


printInstances(inputs, outputs) ::= <<
$instance.id$ : entity work.$instance.id$
  port map (
$if(!inputs.empty)
$
$network.incomingMap.(instance):printInputs(); separator="\n"$
$
endif$$
if(!outputs.empty)
$$outgoingMap.(instance) : printOutputs(); separator="\n"$
$
endif$
    clock     => clock, 
    reset_n   => reset_n);
>>


printInputs(connection) ::= <<
    $printPortsIn(connection=connection, map=network.predecessorsMap.(instance), vmap=network.sourceMap.(connection))$  
>>

printPortsIn(connection, map, vmap) ::= <<
$if(map.(connection.target))
$$connection.target$_data   => $instance.id$_$connection.target$_data,
$connection.target$_send   => $instance.id$_$connection.target$_send,
$connection.target$_ack    => $instance.id$_$connection.target$_ack,$
else
$$connection.target$_data   => $vmap.port$_data,
$connection.target$_send   => $vmap.port$_send,
$connection.target$_ack    => $vmap.port$_ack,$
endif$
>>


printOutputs(connection) ::= <<
    $printPortsOut(connection=connection, map=network.successorsMap.(instance), vmap=network.targetMap.(connection))$  
>>

printPortsOut(connection, map, vmap) ::= <<
$if(map.(connection.source))
$$connection.source$_data   => $map.(connection.source).id$_$connection.target$_data,
$connection.source$_send   => $map.(connection.source).id$_$connection.target$_send,
$connection.source$_ack    => $map.(connection.source).id$_$connection.target$_ack,$
else
$$connection.source$_data   => $vmap.port$_data,
$connection.source$_send   => $vmap.port$_send,
$connection.source$_ack    => $vmap.port$_ack,$
endif$
>>


///////////////////////////////////////////////////////////////////////////////
// print broadcasts instantiation
///////////////////////////////////////////////////////////////////////////////





printActorPorts(instance) ::= <<
$instance.actor.inputs.list: printPortsInput(); separator="\n"$
$instance.actor.outputs.list: printPortsOutput(); separator="\n"$
>>

printNetworksPorts(instance) ::= <<
$instance.network.inputs.list: printPortsInput(); separator="\n"$
$instance.network.outputs.list: printPortsOutput(); separator="\n"$
>>

printPortsInput(port) ::= <<
$port.name$_data   => $instance.id$_$port.name$_data_in,
$port.name$_send   => $instance.id$_$port.name$_send,
$port.name$_ack    => $instance.id$_$port.name$_ack,
>>

printPortsOutput(port) ::= <<
$port.name$_data   => $instance.id$_$port.name$_data_out,
$port.name$_send   => $instance.id$_$port.name$_send,
$port.name$_ack    => $instance.id$_$port.name$_ack,
>> 

printBroadcastPorts(instance) ::= <<
-- Print Broadcast: $instance.id$
$instance.broadcast.outputList: printBroadcastOutput(); separator="\n"$
>>

printBroadcastOutput(num) ::= <<
$instance.id$_output_$num$_data_out <= $instance.id$_data_out;
$instance.id$_output_$num$_send     <= $instance.id$_send;
$instance.id$_output_$num$_ack      <= $instance.id$_ack;
>> 


///////////////////////////////////////////////////////////////////////////////
// print the network
///////////////////////////////////////////////////////////////////////////////

network(debugFifos, fifoSize, network, options) ::= <<
-------------------------------------------------------------------------------
-- Title      : $network.name$
-- Project    : 
-------------------------------------------------------------------------------
-- File       : $network.name$.vhd
-- Author     : Orcc - VHDL
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


------------------------------------------------------------------------------
entity $network.name$ is
  generic (
  SIZE : integer := $fifoSize$);
  port (
    $printNetworkPorts(network)$
    clock    : in  std_logic;
    reset_n  : in  std_logic);  
end $network.name$;


------------------------------------------------------------------------------
architecture rtl_$network.name$ of $network.name$ is

  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------
  $tryPrintSignals(network.outgoingMap); separator="\n"$
  ---------------------------------------------------------------------------

begin

  ---------------------------------------------------------------------------
  -- Actors and Networks instantiation 
  ---------------------------------------------------------------------------
  $PrintNetworksAndActors(network.outgoingMap)$

  ---------------------------------------------------------------------------
  -- Broadcast and FIFO instantiation 
  --------------------------------------------------------------------------- 
  $assignFifos(network.connections)$
  ---------------------------------------------------------------------------

end architecture rtl_$network.name$;

>>
