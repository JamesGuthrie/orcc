inputs(name, inputs) ::= <<
$inputs: {$name$_$it.name$,}; separator="\n"$
>>

outputs(name, outputs) ::= <<
$outputs: {$name$_$it.name$,}; separator="\n"$
>>

connection(u, v, connection) ::= <<
m_oMapFifoLocations[$u.instance.id$_$connection.source$] = $v.instance.id$_$connection.target$;\\
>>

connections(connections) ::= <<
$connections: { edge | $connection(u=network.sourceMap.(edge), v=network.targetMap.(edge), connection=edge)$}; separator="\n"$
>>

Cpp_Header(network) ::= <<
#ifndef __HEADER_H__
#define __HEADER_H__

enum 
{
   Reserved = 0,
   $network.instances : {inst | $inputs(name=inst.network.name, inputs=inst.network.inputs.list)$}; separator="\n"$
   $network.instances : {inst | $outputs(name=inst.network.name, outputs=inst.network.outputs.list)$}; separator="\n"$
   NbPorts
};

#define INIT_FIFOS_LOCATIONS()\\
{\\
   $connections(network.connections)$
};
#endif

>>

AdaptorConfig(network) ::= <<
#ifndef __ADAPTOR_CONFIG_AKA_H__
#define __ADAPTOR_CONFIG_AKA_H__

typedef struct
{
   char *pcIpAddress;
   int port;
   bool bServer;
} AdaptorCfg;

#define ADP_INIT_CFG()\\
{\\
   m_eType = ADP_ETHERNET;\
   m_oCfg.pcIpAddress = "127.0.0.1";\\
   m_oCfg.port = 1024;\
   m_oCfg.bServer=true;\\
};

#endif

>>

