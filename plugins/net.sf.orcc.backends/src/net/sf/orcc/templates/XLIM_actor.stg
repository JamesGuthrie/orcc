BinOp ::= [
	"PLUS":"$add",
	"BITAND":"bitand",
	"BITOR":"bitor",
	"BITXOR":"bitxor",
	"DIV":"$div",
	"DIV_INT":"$div",
	"EQ":"$eq",
	"EXP":"exp",
	"GE":"$ge",
	"GT":"$gt",
	"LE":"$le",
	"LOGIC_AND":"$and",
	"LOGIC_OR":"$or",
	"LT":"$lt",
	"MINUS":"$sub",
	"MOD":"$mod",
	"NE":"$ne",
	"PLUS":"$add",
	"SHIFT_LEFT":"lshift",
	"SHIFT_RIGHT":"rshift",
	"TIMES":"$mul"
]

UnaryOp ::= [
	"BITNOT":"bitnot",
	"LOGIC_NOT":"$not",
	"MINUS":"$negate",
	"NUM_ELTS":"$size"
]


///////////////////////////////////////////////////////////////////////////////
// Ports
///////////////////////////////////////////////////////////////////////////////

actorPort(port, dir) ::= <<
$if (port.type.bool)
$<actor-port dir="$dir$" name="$port.name$" size="1" typeName="$port.type$"/>$
else
$<actor-port dir="$dir$" name="$port.name$" size="$port.type.size$" typeName="$port.type$"/>$
endif$
>>

actorPorts() ::= <<
<!-- Ports -->
$instance.actor.inputs.list: {port|$actorPort(port=port, dir="in")$}; separator="\n"$
$instance.actor.outputs.list: {port|$actorPort(port=port, dir="out")$}; separator="\n"$
>>

internalPorts() ::= <<
>>

///////////////////////////////////////////////////////////////////////////////
// State Variables
///////////////////////////////////////////////////////////////////////////////

initValue(type, value) ::= <<
<initValue size="$if (type.bool)$1$else$$type.size$$endif$" typeName="$type$" value="$if (value)$$value$$else$0$endif$"/>
>>

stateVar(var) ::= <<
<stateVar name="var_$var.name$" sourceName="$var.name$">
$if (var.type.list)$
	<initValue typeName="List">
		$var.constantValue: {value | $initValue(type=var.type.elementType, value=value)$}; separator="\n"$
	</initValue>
$else$
	$initValue(type=var.type, value=var.constantValue)$
$endif$
</stateVar>
>>

stateVars() ::= <<
<!-- State variables -->
$instance.actor.stateVars.list: stateVar(); separator="\n"$
>>



///////////////////////////////////////////////////////////////////////////////
// Operation
///////////////////////////////////////////////////////////////////////////////


port(dir, type, source) ::= <<
$if (!type)
$<port dir="$dir$" source="$source$"/>$
else
$<port dir="$dir$" size="$if (type.bool)$1$else$$type.size$$endif$" source="$source$" typeName="$type$"/>$
endif$
>>

operation(op) ::= <<
	$(op.class.simpleName)(op)$
>>

Read(op) ::= <<
<operation kind="pinRead" portName="$op.port.name$" removable="no">
	$port(dir="out", type=op.port.type, source=op.target)$
</operation>
>>

Write(op) ::= <<
<operation kind="pinWrite" portName="$op.port.name$" removable="no">
	$port(dir="in", type=op.port.type, source=op.target)$
</operation>
>>

Load(op) ::= <<
$if (op.source.variable.type.list)$
$! TODO !$
$else$
<operation kind="noop">
	$port(dir="in", source=op.source)$
	$port(dir="out", type=op.target.type, source=op.target)$
</operation>
$endif$
>>

Store(op) ::= <<
$if (op.target.global)$
$! TODO !$
$else$
<operation kind="noop">
	$port(dir="in", source=op.value.var)$
	$port(dir="out", type=op.target.type, source=op.target)$
</operation>
$endif$
>>

Assign(op) ::= <<
$if (op.value.binaryExpr)$
<operation kind="$BinOp.(op.value.op)$">
	$port(dir="in", source=op.value.e1)$
	$port(dir="in", source=op.value.e2)$
	$port(dir="out", type=op.target.type, source=op.target)$
</operation>
$else$
<operation kind="$UnaryOp.(op.value.op)$">
	$port(dir="in", source=op.value.expr)$
	$port(dir="out", type=op.target.type, source=op.target)$
</operation>
$endif$
>>

PhiAssignment() ::= <<$! TODO !$>>

Return(op) ::= <<$! TODO, what should we do? !$>>

Call(op) ::= <<$! TODO !$>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

node(node) ::= <<
$(node.class.simpleName)(node)$
>>

BlockNode(blkNode) ::= <<
$blkNode.instructions: operation(); separator="\n"$
>>

IfNode(ifNode) ::= <<
>>

WhileNode(whileNode) ::= <<
>>

///////////////////////////////////////////////////////////////////////////////
// Modules
///////////////////////////////////////////////////////////////////////////////


module(action) ::= <<
<module autostart="false" kind="action" name="$action.name$">
$action.body.nodes: node(); separator="\n"$
</module> 
>>

modules() ::= <<
$instance.actor.actions : module()$
>>

///////////////////////////////////////////////////////////////////////////////
// Design
///////////////////////////////////////////////////////////////////////////////

design() ::= <<
<design name="$instance.id$">
	$actorPorts()$
	$internalPorts()$
	$stateVars()$
	$modules()$
</design>
>>

instance(instance) ::= <<
<?xml version="1.0" encoding="UTF-8"?>
$design()$
>>
