/*
 * generated by Xtext
 */
package net.sf.orcc.cal.ui.outline;

import java.util.List;

import net.sf.orcc.cal.cal.AstAction;
import net.sf.orcc.cal.cal.AstActor;
import net.sf.orcc.cal.cal.AstPriority;
import net.sf.orcc.cal.cal.AstSchedule;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.editor.outline.CreateNode;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;

/**
 * customization of the default outline structure
 * 
 */
public class CalTransformer extends AbstractDeclarativeSemanticModelTransformer {

	@CreateNode
	public ContentOutlineNode createNode(AstActor actor,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(actor, parentNode);

		createNodes(node, "Parameters", actor.getParameters());
		createNodes(node, "Input ports", actor.getInputs());
		createNodes(node, "Output ports", actor.getOutputs());
		createNodes(node, "State variables", actor.getStateVariables());
		createNodes(node, "Functions", actor.getFunctions());
		createNodes(node, "Procedures", actor.getProcedures());
		createNodes(node, "Actions", actor.getActions());

		AstSchedule schedule = actor.getSchedule();
		if (schedule != null) {
			createNodes(node, "FSM", schedule.getTransitions());
		}

		List<AstPriority> priorities = actor.getPriorities();
		if (!priorities.isEmpty()) {
			createNodes(node, "Priorities", priorities.get(0).getInequalities());
		}

		return node;
	}

	private void createNodes(ContentOutlineNode parent, String name,
			EList<?> objects) {
		if (!objects.isEmpty()) {
			ContentOutlineNode node = new ContentOutlineNode(name);
			parent.addChildren(node);
			for (Object obj : objects) {
				createNode((EObject) obj, node);
			}
		}
	}

	public List<EObject> getChildren(AstAction action) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(AstActor actor) {
		return NO_CHILDREN;
	}

}
