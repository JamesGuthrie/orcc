group VHDL_network;

///////////////////////////////////////////////////////////////////////////////
// print signals()

printSig(instance) ::= <<
$if (instance.actor)$
$instance.actor.inputs.list: printSigInput(it)$
$instance.actor.outputs.list: printSigOutput(it)$
$endif$
>>

printSigInput(it) ::= <<
$if(it.type.bool)$
signal $instance.actor$_$it$_data_in   : std_logic;$\n$
$else$
signal $instance.actor$_$it$_data_in   : std_logic_vector($it.type$ -1 downto 0);$\n$
$endif$
signal $instance.actor$_$it$_read      : std_logic;
signal $instance.actor$_$it$_empty     : std_logic;

>>

printSigOutput(it) ::= <<
$if(it.type.bool)$
signal $instance.actor$_$it$_data_out   : std_logic;$\n$
$else$
signal $instance.actor$_$it$_data_out   : std_logic_vector($it.type$ -1 downto 0);$\n$
$endif$
signal $instance.actor$_$it$_full       : std_logic;
signal $instance.actor$_$it$_write      : std_logic;

>> 

printSignals(instances) ::= <<
$instances: printSig()$

>>


///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

assignFifo(source, sourcePort, target, targetPort, count) ::= <<
fifo_$count$ : entity work.fifo_generic 
generic map (
depth => $edge.size$,
width => $targetPort.type$ );
port map (
  write_data => $source.id$_$sourcePort.name$_write, 
  data_in    => $source.id$_$sourcePort.name$_data_out, 
  full       => $source.id$_$sourcePort.name$_full, 
  read_data  => $target.id$_$targetPort.name$_read, 
  data_out   => $target.id$_$targetPort.name$_data_in, 
  empty      => $target.id$_$targetPort.name$_empty, 
  clock_in   => clock, 
  clock_out  => clock, 
  reset_n    => reset_n); 


>>

tryAssignFifo(edge, src, tgt) ::= <<
$if (src.instance)$
$if (tgt.instance)$
$assignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$
$endif$
$endif$
>>

assignFifos(edges) ::= <<
$edges: tryAssignFifo(
  edge=it, src=network.sourceMap.(it), tgt=network.targetMap.(it)) $
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to scheduler()

printActorPorts(instance) ::= <<
$if (instance.actor)$
$instance.actor.inputs.list: printPortsInput(it); separator="\n"$
$instance.actor.outputs.list: printPortsOutput(it); separator="\n"$
$endif$
>>

printPortsInput(it) ::= <<
$instance.actor$_$it$_data   => $instance.actor$_$it$_data_in,
$instance.actor$_$it$_read   => $instance.actor$_$it$_read,
$instance.actor$_$it$_empty  => $instance.actor$_$it$_empty,
>>

printPortsOutput(it) ::= <<
$instance.actor$_$it$_data   => $instance.actor$_$it$_data_out,
$instance.actor$_$it$_full   => $instance.actor$_$it$_full,
$instance.actor$_$it$_write  => $instance.actor$_$it$_write,
>> 

printScheduler(instance) ::= <<
$if (instance.actor)$


$it.id$ : entity work.$it.id$
  port map (
    $printActorPorts(instance)$
    clock            => clock, 
    reset_n          => reset_n);
$endif$
  
>>

printSchedulers(instances) ::= <<
$instances: printScheduler()$

>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network) ::= <<
------------------------------------------------------------------------------
-- Generated from $network.name$ actor
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity $network.name$ is
  port (
  -- Inputs
  clock   : in std_logic;
  reset_n : in std_logic);  
end $network.name$;


architecture rtl_$network.name$ of $network.name$ is

  ---------------------------------------------------------------------------
  -- Signal & constant declaration
  $printSignals(network.instances); separator="\n"$
  ---------------------------------------------------------------------------

begin

  ---------------------------------------------------------------------------
  -- Actors instantiation 
  $printSchedulers(network.instances); separator="\n"$

  ---------------------------------------------------------------------------
  -- FIFOs instantiation 
  $assignFifos(network.connections)$ 
  ---------------------------------------------------------------------------

end architecture rtl_$network.name$;
>>

