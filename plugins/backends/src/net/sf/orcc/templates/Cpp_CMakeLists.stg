group Cpp_CMakeLists;


printIncludeDirForWrapper(instance) ::= <<
$if (instance.wrapper)$
# Wrapper-dedicated include directories
include_directories(\${LIBPATH}/LibWrapper/include)
include_directories(\${LIBPATH}/LibThread/include)
include_directories(\${LIBPATH}/LibAdaptor/include)

link_directories(\${LIBPATH}/LibWrapper/lib)
link_directories(\${LIBPATH}/LibThread/lib)
link_directories(\${LIBPATH}/LibAdaptor/lib)
$endif$
>>

printLibForWrapper(instance) ::= <<
$if (instance.wrapper)$
LibWrapper
LibThread
LibAdaptor
$endif$
>>

printActor(id, actor) ::= <<
$if (!actor.system)$
Actor_$id$.cpp

$endif$
>>

printInstance(instance) ::= <<
$if (instance.actor)$
$printActor(id=instance.id, actor=instance.actor)$
$endif$
>>

Cpp_CMakeLists(network) ::= <<
# Generated from $network.name$

cmake_minimum_required (VERSION 2.8)
project ($network.name$)

IF(NOT EXISTS "@LIBPATH@")
MESSAGE(FATAL_ERROR "The path to the library is does not exist!")
ENDIF(NOT EXISTS "@LIBPATH@")


# Common include directories
include_directories(\${LIBPATH}/LibOrcc/include)
include_directories(\${LIBPATH}/LibCALaka/include)

link_directories(\${LIBPATH}/LibOrcc/lib)
link_directories(\${LIBPATH}/LibCALaka/lib)

$network.instances: printIncludeDirForWrapper(it)$

add_executable ($network.name$
Network_$network.name$.cpp
$network.instances: printInstance(it)$)

target_link_libraries($network.name$ 
LibOrcc 
LibCALaka
$network.instances: printLibForWrapper(it)$
)

>>
