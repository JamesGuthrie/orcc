group Cpp_actorImpl;

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if $value$ is empty
listSize(value) ::= <<
$value : {[$it$]} $
>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

variableDeclaration(variable) ::= <<
$if(variable.port)$
$variable.type$ $variable$$listSize(variable.type.dimensions)$
$else$
$variable.type$ $variable$$listSize(variable.type.dimensions)$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////
stateVar(variable) ::= <<
$if(variable.constantValue)$
$variableDeclaration(variable)$ = $variable.constantValue$;$\n$
$else$
$variableDeclaration(variable)$;$\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

Assign(assign) ::= <<
$assign.target$ = $assign.value$;

>>

Call(call) ::= <<
$if(call.target)$
$call.target$ = 
$endif$
$call.procedure$($call.parameters; separator=", "$);

>>

Decrement(decrement) ::= <<
$decrement.target$--;

>>

HasTokens(hasTokens) ::= <<
$hasTokens.target$ = m_poTabIn[$instance.actor.name$_$hasTokens.port$]->hasTokens($hasTokens.numTokens$);

>>

Increment(increment) ::= <<
$increment.target$++;

>>

Load(load) ::= <<
$load.target$ = $load.source$$load.indexes : {[$it$]}$;

>>

Peek(peek) ::= <<
$if(peek.unit)$
m_poTabIn[$instance.actor.name$_$peek.port$]->peek($peek.target$);$\n$
$else$
m_poTabIn[$instance.actor.name$_$peek.port$]->peek($peek.target$, $peek.numTokens$);$\n$
$endif$

>>

Read(read) ::= <<
$if(read.unit)$
m_poTabIn[$instance.actor.name$_$read.port$]->get($read.target$);$\n$
$else$
m_poTabIn[$instance.actor.name$_$read.port$]->get($read.target$, $read.numTokens$);$\n$
$endif$

>>

ReadEnd(readEnd) ::= <<
setReadEnd($instance.actor.name$_$readEnd.port$);

>>

Return(return) ::= <<
$if(return.value)$
return $return.value$;

$endif$
>>

SelfAssignment(selfAssign) ::= <<
$selfAssign.target$ $selfAssign.op.text$= $selfAssign.value$;

>>

Store(store) ::= <<
$store.target$$store.indexes : {[$it$]}$ = $store.value$;

>>

Write(write) ::= <<
$if(write.unit)$
m_poTabOut[$instance.actor.name$_$write.port$]->put($write.target$);$\n$
$else$
m_poTabOut[$instance.actor.name$_$write.port$]->put($write.target$, $write.numTokens$);$\n$
$endif$

>>

WriteEnd(writeEnd) ::= <<
setWriteEnd($instance.actor.name$_$writeEnd.port$);

>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

instructions(instructions) ::= <<
$instructions: {$(it.class.simpleName)(it)$}$
>>

nodes(nodes) ::= <<
$nodes: {$(it.class.simpleName)(it)$}$
>>

// if node
BlockNode(blockNode) ::= <<
$instructions(blockNode.instructions)$
>>

// if node
IfNode(ifNode) ::= <<
if($ifNode.value$)
{
	$nodes(ifNode.thenNodes)$}$if(ifNode.elseNodes)$

else
{
	$nodes(ifNode.elseNodes)$}$endif$
$BlockNode(ifNode.joinNode)$
>>

// while node
WhileNode(whileNode) ::= <<
while ($whileNode.value$)
{
	$nodes(whileNode.nodes)$}
$BlockNode(whileNode.joinNode)$
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<

$procedure.returnType$ actor_$instance.actor.name$::$procedure$($procedure.parameters.list: {$variableDeclaration(it)$}; wrap, anchor, separator=", "$)
{
$if(procedure.locals.list)$
	$procedure.locals.list: {$variableDeclaration(it)$;$\n$}$

$endif$
	$procedure.nodes: {$(it.class.simpleName)(it)$}$}

>>

///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

action(action) ::= <<
$procedure(action.body)$$procedure(action.scheduler)$
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
$pattern.keys:{port|m_poTabOut[$instance.actor.name$_$port$]->hasRooms($pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$action.body$();
res = true;
i++;
>>

actionTest(action) ::= <<
if(isSchedulable_$action$())
{
	$if(action.outputPattern)$
	if($outputPattern(pattern=action.outputPattern)$)
	{
		$actionCall(action)$
	}
	$else$
	$actionCall(action)$
	$endif$
}>>

schedulingTest(actions) ::= <<
$actions: actionTest(action=it); separator="\nelse "$
>>

scheduler(actions) ::= <<
int actor_$instance.actor.name$::scheduler()
{
	bool res = true;
	int i = 0;
  
	while (res) 
	{
		res = false;
		$if(actions)$
		$schedulingTest(actions)$
		$endif$
	}
	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action.body$();
_FSM_state = state_$nextState.targetState$;
res = true;
>>

actionTestState(nextState) ::= <<
if(isSchedulable_$nextState.action$())
{
	$if(nextState.action.outputPattern)$
	if($outputPattern(nextState.action.outputPattern)$)
	{
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(nextStates) ::= <<
$nextStates: actionTestState(nextState=it); separator=" else "$
>>

stateScheduler(transition) ::= <<
bool actor_$instance.actor.name$::$transition.sourceState$_state_scheduler()
{
	bool res = false;
	$schedulingTestState(nextStates=transition.nextStateInfo)$
	return res;
}

>>

switch(transitions) ::= <<
switch (_FSM_state)
{
$transitions: {case state_$it.sourceState$:
	res = $it.sourceState$_state_scheduler();
	break;
}$
default:
	std::cout << "unknown state: " << _FSM_state << std::endl;
	break;
}
>>

schedulerFSM(actions, fsm) ::= <<
$if(actions)$
bool actor_$instance.actor.name$::outside_FSM_scheduler()
{
	bool res = false;
	int i = 0;
	$schedulingTest(actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(transition=it); separator="\n"$
int actor_$instance.actor.name$::scheduler()
{
	bool res = true;
	int i = 0;
	
	while (res)
	{
		res = false;
		$if(actions)$
		if(outside_FSM_scheduler())
		{
			res = true;
			i++;
		}
		else
		{
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}
	return i;
}

>>

constructor(parameters) ::= <<
actor_$instance.actor.name$::actor_$instance.actor.name$($parameters.keys: {int $it$}; separator=", "$)
:
$parameters.keys: {$it$($it$),}; separator="\n"$
$if(instance.actor.actionScheduler.fsm)$
_FSM_state(state_$instance.actor.actionScheduler.fsm.initialState$),

$endif$
ActorGen($instance.actor.name$_IPORT_SIZE, $instance.actor.name$_OPORT_SIZE)
{
}


>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

instance(instance) ::= <<

#include "Actor_$instance.actor.name$.h"

////////////////////////////////////////////////////////////////////////////////
// State variables of the actor
namespace
{
	$instance.actor.stateVars.list: stateVar(it)$}


$constructor(instance.parameters)$


void actor_$instance.actor.name$::initializeActor()
{
#ifdef __TRACE_TOKENS__
	std::string strTrace("");
	strTrace = __FILE__;
	unsigned uDesc = g_oTracer.createFileDescriptor(strTrace);

	for(unsigned uIdx = 0; uIdx < $instance.actor.name$_IPORT_SIZE; uIdx++)
	{
	  strTrace = "m_poTabIn[" + toString(uIdx) + "] = " + toString((unsigned)m_poTabIn[uIdx]);
	  g_oTracer.addPort(uDesc, strTrace);
	}
#endif
}


////////////////////////////////////////////////////////////////////////////////
// Functions/procedures
$instance.actor.procs.list: procedure(it)$
////////////////////////////////////////////////////////////////////////////////
// Actions
$instance.actor.actions: action(it)$
$if(instance.actor.initializes)$
////////////////////////////////////////////////////////////////////////////////
// Initializes
$instance.actor.initializes: action(it)$
void actor_$instance.actor.name$::initialize()
{
	bool res = true;
	int i = 0;

	$if(instance.actor.initializes)$
	$schedulingTest(instance.actor.initializes)$
	$endif$
}

$endif$
////////////////////////////////////////////////////////////////////////////////
// Action scheduler
$if(instance.actor.actionScheduler.fsm)$
$schedulerFSM(actions=instance.actor.actionScheduler.actions, fsm=instance.actor.actionScheduler.fsm)$
$else$
$scheduler(actions=instance.actor.actionScheduler.actions)$
$endif$

>>
