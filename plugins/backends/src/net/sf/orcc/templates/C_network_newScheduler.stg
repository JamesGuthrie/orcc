///////////////////////////////////////////////////////////////////////////////
// Declare actors

declareActor(instance) ::= "$instance.id$"
declareActors(instances) ::= <<
struct actor_s $instances: declareActor(); wrap, separator=", "$;

>>

declareActorArray(instance) ::= "&$instance.id$"

declareActorsArray(instances) ::= <<
struct actor_s *actors[] = {$instances: declareActorArray(); wrap, separator=", "$};
>>

///////////////////////////////////////////////////////////////////////////////
// Declare predecessors

goDeclarePredecessor(instance) ::= "&$instance.id$"

goDeclarePredecessors(instance, predecessors) ::= <<
$if(!predecessors.empty)
$struct actor_s *$instance.id$_predecessors[] = {$
predecessors: goDeclarePredecessor(); wrap, separator=", "$};
$endif$
>>

declarePredecessors(instances) ::= <<
$instances: {$goDeclarePredecessors(instance=it, predecessors=network.predecessorsMap.(it))$}$
>>

///////////////////////////////////////////////////////////////////////////////
// Declare successors

goDeclareSuccessor(instance) ::= "&$instance.id$"

goDeclareSuccessors(instance, successors) ::= <<
$if(!successors.empty)
$struct actor_s *$instance.id$_successors[] = {$
successors: goDeclareSuccessor(); wrap, separator=", "$};
$endif$
>>

declareSuccessors(instances) ::= <<
$instances: {$goDeclareSuccessors(instance=it, successors=network.successorsMap.(it))$}$
>>

///////////////////////////////////////////////////////////////////////////////
// Declare connections

declareConnection(source, sourcePort, target, targetPort, count) ::= <<

struct conn_s conn_$count$ = {&fifo_$count$, &$source.id$, &$target.id$};
>>

tryDeclareConnection(edge, src, tgt) ::= <<
$if (src.instance && tgt.instance)
$$declareConnection(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$$
endif$
>>

declareConnections(edges) ::= <<
$edges: {$tryDeclareConnection(
  edge=it, src=network.sourceMap.(it), tgt=network.targetMap.(it))$}$
>>

///////////////////////////////////////////////////////////////////////////////
// Declare inputs and outputs

goDeclareInputsOutputs(instance, incoming, outgoing) ::= <<
$if(!incoming.empty)
$struct conn_s *$instance.id$_inputs[] = {$incoming: {&conn_$network.connectionMap.(it)$}; wrap, separator=", "$};
$endif$$
if(!outgoing.empty)
$struct conn_s *$instance.id$_outputs[] = {$outgoing: {&conn_$network.connectionMap.(it)$}; wrap, separator=", "$};
$endif$
>>

declareInputsOutputs(instances) ::= <<
$instances:
  {$goDeclareInputsOutputs(instance=it,
    incoming=network.incomingMap.(it),
    outgoing=network.outgoingMap.(it))$}$
>>

///////////////////////////////////////////////////////////////////////////////
// Define actors

fillActorStruct(instance) ::= <<

struct actor_s $instance.id$ = {"$instance.id$", $instance.id$_scheduler, $
length(network.incomingMap.(instance))$, $
length(network.outgoingMap.(instance))$, $
length(network.predecessorsMap.(instance))$, $
length(network.successorsMap.(instance))$, $
if(network.incomingMap.(instance).empty)$NULL$else$$instance.id$_inputs$endif$, $
if(network.outgoingMap.(instance).empty)$NULL$else$$instance.id$_outputs$endif$, $
if(network.predecessorsMap.(instance).empty)$NULL$else$$instance.id$_predecessors$endif$, $
if(network.successorsMap.(instance).empty)$NULL$else$$instance.id$_successors$endif$};
>>

fillActorsStructs(instances) ::= <<
$instances: fillActorStruct()$
>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network) ::= <<
// Generated from "$network.name$"

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>

#define BRAINDEAD_FIFO 1
#include "fifo.h"
#include "scheduler.h"
#include "orcc_util.h"

#define SIZE $fifoSize$

////////////////////////////////////////////////////////////////////////////////
// FIFO allocation
$allocateFifos(network.connections)$
////////////////////////////////////////////////////////////////////////////////
// FIFO pointer assignments
$assignFifos(network.connections)$
////////////////////////////////////////////////////////////////////////////////
$declareBroadcasts(network.broadcasts)$
////////////////////////////////////////////////////////////////////////////////
// Action schedulers
$declareInitializes(network.instances)$
$declareSchedulers(network.instances)$

////////////////////////////////////////////////////////////////////////////////
// Declaration of a struct actor for each actor

$declareActors(network.instances)$
////////////////////////////////////////////////////////////////////////////////
// Declaration of the predecessors of each actor

$declarePredecessors(network.instances)$
////////////////////////////////////////////////////////////////////////////////
// Declaration of the successors of each actor

$declareSuccessors(network.instances)$
////////////////////////////////////////////////////////////////////////////////
// Declaration of conn_s structures

$declareConnections(network.connections)$
////////////////////////////////////////////////////////////////////////////////
// Declaration of the inputs and outputs of each actor

$declareInputsOutputs(network.instances)$
////////////////////////////////////////////////////////////////////////////////
// Declaration of the actors array

$fillActorsStructs(network.instances)$
$declareActorsArray(network.instances)$
////////////////////////////////////////////////////////////////////////////////
// Actor scheduler

// Uncomment to print firings
// #define PRINT_FIRINGS

static void scheduler() {
	struct scheduler_s my_scheduler;
	struct actor_s *my_actor;
	struct schedinfo_s si;
	int iterations = 0;

	// initializes the actors that need it
	$printInitializes(network.instances)$
	// initialize scheduler
	sched_init(&my_scheduler, sizeof(actors) / sizeof(actors[0]), actors);

	sched_add_schedulable(&my_scheduler, &source);
	my_actor = sched_get_next_schedulable(&my_scheduler);
	while (my_actor != NULL) {
		while (my_actor != NULL) {
			iterations++;
			si.num_firings = 0;
			my_actor->sched_func(&si);
#ifdef PRINT_FIRINGS
			printf("%5i\t%s\n", si.num_firings, my_actor->name);
#endif
			if (si.reason == full) {
				sched_add_successors(&my_scheduler, my_actor);
			} else if (si.reason == starved) {
				sched_add_predecessors(&my_scheduler, my_actor);
			}

			my_actor = sched_get_next_schedulable(&my_scheduler);
		}

#ifdef PRINT_FIRINGS
		printf("\n");
#endif
	}
}

////////////////////////////////////////////////////////////////////////////////
int main(int argc, char *argv[]) {
	init_orcc(argc, argv);

	scheduler();

	printf("End of simulation! Press a key to continue\n");
	pause();

	return 0;
}

>>

