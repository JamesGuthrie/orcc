includeInstance(instance) ::= <<
$if(instance.wrapper)$
#include "wrapperaka.h"
$elseif(instance.broadcast)$
$else$
#include "Actor_$instance.actor.name$.h"
$endif$
>>

includeInstances(instances) ::= <<
$instances: includeInstance(); separator="\n"$
>>


includeBroadcast(broadcasts) ::= <<
$if(broadcasts)$
#include "actor_broadcast.h"

$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// declare FIFOs

declareBroadcastEnum(bcast) ::= <<
enum 
{
   $bcast.id$_input
};

enum 
{
   $bcast.outputList: {$bcast.id$_output_$it$}; separator=",\n"$
};
>>


declareBroadcastEnums(broadcasts) ::= <<
$broadcasts: declareBroadcastEnum()$
>>

///////////////////////////////////////////////////////////////////////////////
// declare FIFOs

declareFifo(count) ::= <<
static FifoAPI * fifo_$count$;

>>

declareFifos(edges) ::= <<
$edges: {edge | declareFifo(network.connectionMap.(edge))}$
>>


declareInstance(instance) ::= <<
$if(instance.wrapper)$
WrapperAka $instance.id$;
$elseif(instance.broadcast)$
$else$
actor_$instance.actor.name$ $instance.id$;
$endif$
>>

declareInstances(instances) ::= <<
$instances: declareInstance(); separator="\n"$
>>

declareBroadcast(bcast) ::= <<
actor_broadcast<$bcast.type$, $bcast.numOutput$> $bcast.id$;
>>

declareBroadcasts(broadcasts) ::= <<
$broadcasts: declareBroadcast(); separator="\n"$
>>




network(debugFifos, fifoSize, network, connectionMap, multicoreConnection) ::= <<
// Generated from "$network.name$"

#include "FifoFactory.h"
#include "Threadaka.h"

$includeInstances(network.instances)$

$includeBroadcast(network.broadcasts)$

$declareBroadcastEnums(network.broadcasts)$

class network_$network.name$ : public Threadaka
{

public:
	network_$network.name$();
	~network_$network.name$();

	void start();
	void stop();

	void schedule();

	void process(void * args);
	
private:	
	$declareInstances(network.instances)$
	$declareBroadcasts(network.broadcasts)$
};

>>

