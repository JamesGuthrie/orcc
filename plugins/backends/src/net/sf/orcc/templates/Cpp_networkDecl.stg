group Cpp_network;

includeInstance(instance) ::= <<
$if(instance.wrapper)$
#include "wrapperaka.h"
$else$
#include "Actor_$instance.id$.h"
$endif$
>>

includeInstances(instances) ::= <<
$instances: includeInstance(it); separator="\n"$
>>


///////////////////////////////////////////////////////////////////////////////
// declare FIFOs

declareFifo(count) ::= <<
static FifoAPI * fifo_$count$;

>>

declareFifos(edges) ::= <<
$edges: declareFifo(network.connectionMap.(it))$
>>

declareInstance(instance) ::= <<
$if(instance.wrapper)$
WrapperAka $instance.id$;
$else$
actor_$instance.id$ $instance.id$;
$endif$
>>

declareInstances(instances) ::= <<
$instances: declareInstance(it); separator="\n"$
>>




network(debugFifos, fifoSize, network) ::= <<
// Generated from "$network.name$"

$includeInstances(network.instances)$

#include "FifoFactory.h"

class network_$network.name$ {

public:
	static const unsigned int SIZE = $fifoSize$;

	network_$network.name$();
	~network_$network.name$();

	void start(std::string &strErr);
	void stop(std::string &strErr);

	void schedule();
	
	// FIFO declarations
private:
	
	$declareInstances(network.instances)$
};

>>

