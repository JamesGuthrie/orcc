
///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(portName) ::= <<
private IntFifo fifo_$portName$;

>>

setFifo(portName) ::= <<
if ("$portName$".equals(portName)) {
	fifo_$portName$ = fifo;
} else 
>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [][]...[]
// does not output anything if $value$ is empty
// differs from inherited listSize because this one does not print any size
// information.
listDim(value) ::= <<
$value : {[]} $
>>

// a variable definition
// called by "function parameter", or "state variable with value"
variableDeclaration(variable) ::= <<
$variable.type$$listDim(variable.type.dimensions)$ $variable.name$
>>

// a variable definition with initialization
// called by "local variable", or "state variable with no value"
variableDeclarationInit(variable) ::= <<
$if(variable.port)$
$variable.type$[] $variable$ = new $variable.type$$listSize(variable.type.dimensions)$$
else
$$variable.type$$listDim(variable.type.dimensions)$ $variable$$
if(variable.type.dimensions)
$ = new $variable.type$$listSize(variable.type.dimensions)$$
endif
$$
endif$>>

parameter(parameter) ::= <<
private $variableDeclarationInit(parameter)$;

>>

parameters(parameters) ::= <<
$parameters: parameter()$
>>

declareParameters(parameters) ::= <<
$parameters: variableDeclaration(); wrap, separator=", "$
>>

setParameter(parameter) ::= <<
this.$parameter$ = $parameter$;

>>

setParameters(parameters) ::= <<
$parameters: setParameter()$
>>

Boolean(constant) ::= <<
$constant$
>>

// a state variable
stateVar(variable) ::= <<
$if(variable.constantValue)$
private $variableDeclaration(variable)$ = $Constant(variable.constantValue)$;
$else$
private $variableDeclarationInit(variable)$;
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

PrintParameter(parameter) ::= <<$parameter$>>

Call(call) ::= <<

$if(call.print)$System.out.print($call.parameters: PrintParameter(); separator=" + "$);$
else
$$if(call.target)$$call.target$ = $endif$$call.procedure$($call.parameters; separator=", "$);$
endif$
>>

// hasTokens instruction
HasTokens(hasTokens) ::= <<
$hasTokens.target$ = fifo_$hasTokens.port$.hasTokens($hasTokens.numTokens$);
>>

// peek instruction
Peek(peek) ::= <<
fifo_$peek.port$.peek($peek.target$);
>>

// read instruction
Read(read) ::= <<
fifo_$read.port$.get($read.target$);
>>

// write instruction
Write(write) ::= <<
fifo_$write.port$.put($write.target$);
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<

private $procedure.returnType$ $procedure$($procedure.parameters.list: {$variableDeclaration(it)$}; wrap, anchor, separator=", "$) {
$if(procedure.locals.list)$
	$procedure.locals.list: {$variableDeclarationInit(it)$;$\n$}$
$endif$
	$procedure.nodes: {$(it.class.simpleName)(it)$}$}

>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
$pattern.keys:{port|fifo_$port$.hasRoom($pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$action$();
res = true;
i++;
>>

actionTest(action) ::= <<
if (isSchedulable_$action$()) {
	$if(action.outputPattern)$
	if ($outputPattern(action.outputPattern)$) {
		$actionCall(action)$
	}
	$else$
	$actionCall(action)$
	$endif$
}>>

schedulingTest(actions) ::= <<
$actions: actionTest(); separator=" else "$
>>

scheduler(actions) ::= <<
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		$if(actions)$
		$schedulingTest(actions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action$();
_FSM_state = States.s_$nextState.targetState$;
res = true;
>>

actionTestState(nextState) ::= <<
if (isSchedulable_$nextState.action$()) {
	$if(nextState.action.outputPattern)$
	if ($outputPattern(nextState.action.outputPattern)$) {
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(nextStates) ::= <<
$nextStates: actionTestState(); separator=" else "$
>>

stateScheduler(transition) ::= <<
private boolean stateScheduler_$transition.sourceState$() {
	boolean res = false;
	$schedulingTestState(transition.nextStateInfo)$
	return res;
}

>>

transition(transition) ::= <<
case s_$transition.sourceState$:
	res = stateScheduler_$transition.sourceState$();
	if (res) {
		i++;
	}
	break;
>>

switch(transitions) ::= <<
switch (_FSM_state) {
$transitions: transition()$
default:
	System.out.println("unknown state: %s\n" + _FSM_state);
	break;
}
>>

schedulerFSM(actions, fsm) ::= <<
private enum States {
	$fsm.states : {s_$it$}; separator=",\n"$
};

private States _FSM_state = States.s_$fsm.initialState$;

$if(actions)$
private boolean outside_FSM_scheduler() {
	boolean res = false;
	int i = 0;
	$schedulingTest(actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(); separator="\n"$
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		$if(actions)$
		if (outside_FSM_scheduler()) {
			res = true;
			i++;
		} else {
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(actor) ::= <<
/**
 * Generated from "$actor.name$"
 */
package net.sf.orcc.generated;

import net.sf.orcc.oj.IntFifo;
import net.sf.orcc.oj.actors.IActor;

public class Actor_$actor.name$ implements IActor {


	// Input FIFOs
	$actor.inputs.list: fifo()$
	// Output FIFOs
	$actor.outputs.list: fifo()$
	// Parameters of the actor
	$parameters(actor.parameters.list)$
	// State variables of the actor
	$actor.stateVars.list: stateVar()$
	
	public Actor_$actor.name$($declareParameters(actor.parameters.list)$) {
		$setParameters(actor.parameters.list)$
	}
	
	// Functions/procedures
	$actor.procs.list: procedure()$
	// Actions
	$actor.actions: action()$
$if(actor.initializes)$
	// Initializes
	$actor.initializes: action()$
$endif$
	@Override
	public void initialize() {
$if(actor.initializes)$
		boolean res = false;
		int i = 0;
		if (res){
		}

		$schedulingTest(actor.initializes)$
$endif$
	}

	@Override
	public void setFifo(String portName, IntFifo fifo) {
		$actor.inputs.list: setFifo()$$actor.outputs.list: setFifo()${
			String msg = "unknown port \"" + portName + "\"";
			throw new IllegalArgumentException(msg);
		}
	}

	// Action scheduler
$if(actor.actionScheduler.fsm)$
	$schedulerFSM(actions=actor.actionScheduler.actions, fsm=actor.actionScheduler.fsm)$
$else$
	$scheduler(actor.actionScheduler.actions)$
$endif$

}

>>
