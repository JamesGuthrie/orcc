BroadcastWrite(n) ::= <<
tok_output_$n$ = getWritePtr($bcast.id$_output_$n$, 1);
*tok_output_$n$ = *tok_input;
>>

BroadcastWriteEnd(n) ::= <<
setWriteEnd($bcast.id$_output_$n$, 1);
>>

declareBroadcast(bcast) ::= <<
void $bcast.id$_scheduler(struct schedinfo_s *si) {
	int i = 0;
	$bcast.type$ *tok_input;
	$bcast.outputList: { n | $bcast.type$ *tok_output_$n$;
}$
	while (hasTokens($bcast.id$_input, 1)) {
		if ($bcast.outputList:{hasRoom($bcast.id$_output_$i0$, 1)}; separator=" && "$) {
			tok_input = getReadPtr($bcast.id$_input, 1);
			$bcast.outputList: BroadcastWrite(); separator="\n"$
			setReadEnd($bcast.id$_input, 1);
			$bcast.outputList: BroadcastWriteEnd()$
			i++;
		} else {
			si->reason = full;
			si->num_firings = i;
			return;
		}
	}

	si->reason = starved;
	si->num_firings = i;
}

>>

declareBroadcasts(broadcasts) ::= <<
$broadcasts: declareBroadcast()$
>>

///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs

allocateFifoType(type, size, count) ::= <<
DECLARE_FIFO($type$, $size$, $count$)
>>

doAllocateFifo(edge, source, sourcePort, target, targetPort) ::= <<
$if (source.broadcast)$
$allocateFifoType(
  type=targetPort.type, size=edge.size, count=network.connectionMap.(edge))$$else$
$allocateFifoType(
  type=sourcePort.type, size=edge.size, count=network.connectionMap.(edge))$$endif$
>>

tryAllocateFifo(edge, src, tgt) ::= <<
$if (src.instance && tgt.instance)$
$doAllocateFifo(
  edge=edge,
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target)$$endif$
>>

allocateFifo(edge) ::= <<
$tryAllocateFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge))$
>>

allocateFifos(edges) ::= <<
$edges: allocateFifo()$
>>

///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

doAssignFifo(source, sourcePort, target, targetPort, count) ::= <<
struct fifo_s *$source.id$_$sourcePort.name$ = &fifo_$count$;
struct fifo_s *$target.id$_$targetPort.name$ = &fifo_$count$;
>>

tryAssignFifo(edge, src, tgt) ::= <<
$if (src.instance && tgt.instance)$
$doAssignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$$endif$
>>

assignFifo(edge) ::= <<
$tryAssignFifo(edge=edge, src=network.sourceMap.(edge), tgt=network.targetMap.(edge))$
>>

assignFifos(edges) ::= <<
$edges: assignFifo()$
>>

///////////////////////////////////////////////////////////////////////////////
// declares initialize and scheduler functions

initialize(instance) ::= <<
$if (instance.actor && !instance.actor.initializes.empty)$
extern void $instance.id$_initialize();
$endif$
>>

declareInitializes(instances) ::= <<
$instances: initialize()$
>>

declareSchedulers(instances) ::= <<
$instances: {extern void $it.id$_scheduler(struct schedinfo_s *si);}; separator="\n"$
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()

printInitialize(instance) ::= <<
$if (instance.actor && !instance.actor.initializes.empty)$
$instance.id$_initialize();
$endif$
>>

printInitializes(instances) ::= <<
$instances: printInitialize()$
>>

printSchedulerInstance(instance) ::= <<
si.num_firings = 0;
$instance.id$_scheduler(&si);
#ifdef PRINT_FIRINGS
printf("$instance.id$_scheduler: %i\n", si->num_firings);
#endif
>>

printSchedulers(instances) ::= <<
$instances: printSchedulerInstance(); separator="\n"$

#ifdef PRINT_FIRINGS
printf("\n");
#endif
>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network) ::= <<
// Generated from "$network.name$"

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#ifdef __APPLE__
#include "SDL.h"
#endif

#include "fifo.h"
#include "orcc_util.h"

#define SIZE $fifoSize$
// #define PRINT_FIRINGS

////////////////////////////////////////////////////////////////////////////////
// FIFO allocation
$allocateFifos(network.connections)$
////////////////////////////////////////////////////////////////////////////////
// FIFO pointer assignments
$assignFifos(network.connections)$

////////////////////////////////////////////////////////////////////////////////
$declareBroadcasts(network.broadcasts)$

////////////////////////////////////////////////////////////////////////////////
// Action schedulers
$declareInitializes(network.instances)$
$declareSchedulers(network.instances)$

////////////////////////////////////////////////////////////////////////////////
// Actor scheduler

static void scheduler() {
	struct schedinfo_s si;

	$printInitializes(network.instances)$
	while (1) {
		$printSchedulers(network.instances)$
	}
}

////////////////////////////////////////////////////////////////////////////////
int main(int argc, char *argv[]) {
	init_orcc(argc, argv);

	scheduler();

	printf("End of simulation! Press a key to continue\n");
	pause();

	return 0;
}

>>

