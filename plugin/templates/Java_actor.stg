group Java_actor : C_actor;

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(actorName, portName) ::= <<
private IntFifo $actorName$_$portName$;

>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [][]...[]
// does not output anything if $value$ is empty
listDim(value) ::= <<
$value : {[]} $
>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

// a variable definition
vardef(name, type, size, isPort) ::= <<
$if(isPort)$
$type$[] $name$ = new $type$$listSize(size)$
$else$
$type$$listDim(size)$ $name$
$endif$>>

// a state variable
stateVar(vardef, value) ::= <<
$if(value)$
private $vardef$ = $value$;$\n\n$
$else$
private $vardef$;$\n\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

// hasTokens node
hasTokensNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = $actorName$_$fifoName$.hasTokens($numTokens$);

>>

// peek node
peekNode(var, actorName, fifoName, numTokens) ::= <<
$actorName$_$fifoName$.peek($var$);

>>

// read node
readNode(var, actorName, fifoName, numTokens) ::= <<
$actorName$_$fifoName$.get($var$);

>>

// write node
writeNode(var, actorName, fifoName, numTokens) ::= <<
$actorName$_$fifoName$.put($var$);

>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

proc(name, type, parameters, locals, nodes) ::= <<

private $type$ $name$($parameters; wrap, anchor, separator=", "$) {
$if(locals)$
	$locals: {$it$;$\n$}$

$endif$
	$nodes$}

>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(actorName, pattern) ::= <<
$pattern.keys:{port|$actorName$_$port$.hasRoom($pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$action.tag$();
res = true;
i++;
>>

actionTest(actorName, action) ::= <<
if (isSchedulable_$action.tag$()) {
	$if(action.outputPattern)$
	if ($outputPattern(actorName=actorName, pattern=action.outputPattern)$) {
		$actionCall(action)$
	}
	$else$
	$actionCall(action)$
	$endif$
}>>

schedulingTest(actorName, actions) ::= <<
$actions: actionTest(actorName=actorName, action=it); separator=" else "$
>>

scheduler(actorName, actions) ::= <<
public int $actorName$_scheduler() {
	boolean res = true;
	int i = 0;
  
	while (res) {
		res = false;
		$if(actions)$
		$schedulingTest(actorName=actorName, actions=actions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action.tag$();
_FSM_state = States.s_$nextState.targetState$;
res = true;
>>

actionTestState(actorName, nextState) ::= <<
if (isSchedulable_$nextState.action.tag$()) {
	$if(nextState.action.outputPattern)$
	if ($outputPattern(actorName=actorName, pattern=nextState.action.outputPattern)$) {
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(actorName, nextStates) ::= <<
$nextStates: actionTestState(actorName=actorName, nextState=it); separator=" else "$
>>

stateScheduler(actorName, transition) ::= <<
private boolean $transition.sourceState$_state_scheduler() {
	boolean res = false;
	$schedulingTestState(actorName=actorName, nextStates=transition.nextStateInfo)$
	return res;
}

>>

switch(transitions) ::= <<
switch (_FSM_state) {
$transitions: {case s_$it.sourceState$:
	res = $it.sourceState$_state_scheduler();
	break;
}$
default:
	System.out.println("unknown state: %s\n" + _FSM_state);
	break;
}
>>

schedulerFSM(actorName, actions, fsm) ::= <<
private enum States {
	$fsm.states : {s_$it$}; separator=",\n"$
};

private States _FSM_state = States.s_$fsm.initialState$;

$if(actions)$
private boolean outside_FSM_scheduler() {
	boolean res = false;
	int i = 0;
	$schedulingTest(actorName=actorName, actions=actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(actorName=actorName, transition=it); separator="\n"$
public int $actorName$_scheduler() {
	boolean res = true;
	int i = 0;
	
	while (res) {
		res = false;
		$if(actions)$
		if (outside_FSM_scheduler()) {
			res = true;
			i++;
		} else {
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(name, inputs, outputs, stateVars, procs,
      actions, initializes, scheduler, initialize) ::= <<
/**
 * Generated from "$name$"
 */

public class Actor_$name$ implements IActor {

	////////////////////////////////////////////////////////////////////////////////
	// Input FIFOs
	$inputs: fifo(actorName=name, portName=it)$
	////////////////////////////////////////////////////////////////////////////////
	// Output FIFOs
	$outputs: fifo(actorName=name, portName=it)$
	////////////////////////////////////////////////////////////////////////////////
	// State variables of the actor
	$stateVars$
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	$procs$
	////////////////////////////////////////////////////////////////////////////////
	// Actions
	$actions$
$if(initializes)$
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	$initializes$
	public void $name$_initialize() {
		boolean res = true;
		int i = 0;

		$if(initialize)$
		$schedulingTest(actorName=name, actions=initialize)$
		$endif$
	}

$endif$
	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
$if(scheduler.fsm)$
	$schedulerFSM(actorName=name, actions=scheduler.actions, fsm=scheduler.fsm)$
$else$
	$scheduler(actorName=name, actions=scheduler.actions)$
$endif$

}

>>
