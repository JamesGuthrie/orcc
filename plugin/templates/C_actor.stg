group main;

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(actorName, portName) ::= <<
extern struct fifo_s *$actorName$_$portName$;

>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if $value$ is empty
listSize(value) ::= <<
$value : {[$it$]} $
>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

// a variable definition
vardef(name, type, size, isPort) ::= <<
$if(isPort)$
$type$ *$name$
$else$
$type$ $name$$listSize(size)$
$endif$>>

// a state variable
stateVar(vardef, value) ::= <<
$if(value)$
static $vardef$ = $value$;$\n$
$else$
static $vardef$;$\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

// assignment node
assignVarNode(var, expr) ::= <<
$var$ = $expr$;

>>

// call node
callNode(res, name, parameters) ::= <<
$if(res)$
$res$ = 
$endif$
$name$($parameters; separator=", "$);

>>

// decrement node
decrementNode(var) ::= <<
$var$--;

>>

// hasTokens node
hasTokensNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = hasTokens($actorName$_$fifoName$, $numTokens$);

>>

// if node
ifNode(expr, thenNodes, elseNodes) ::= <<
if ($expr$) {
	$thenNodes$}$if(elseNodes)$ else {
	$elseNodes$}$endif$$\n$
>>

// increment node
incrementNode(var) ::= <<
$var$++;

>>

// load node
loadNode(target, source, indexes) ::= <<
$target$ = $source$$indexes : {[$it$]}$;

>>

// peek node
peekNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = getPeekPtr($actorName$_$fifoName$, $numTokens$);

>>

// read node
readNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = getReadPtr($actorName$_$fifoName$, $numTokens$);

>>

// return node
returnNode(expr) ::= <<
return $expr$;

>>

// self-assignment node
selfAssignmentNode(var, op, expr) ::= <<
$var$ $op$= $expr$;

>>

// store node
storeNode(target, indexes, expr) ::= <<
$target$$indexes : {[$it$]}$ = $expr$;

>>

// while node
whileNode(expr, nodes) ::= <<
while ($expr$) {
	$nodes$}

>>

// write node
writeNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = getWritePtr($actorName$_$fifoName$, $numTokens$);

>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

proc(name, type, parameters, locals, nodes) ::= <<

static $type$ $name$($parameters; wrap, anchor, separator=", "$) {
$if(locals)$
	$locals: {$it$;$\n$}$

$endif$
	$nodes$}

>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(actorName, pattern) ::= <<
$pattern.keys:{port|hasRoom($actorName$_$port$, $pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$action.tag$();
res = 1;
i++;
>>

actionTest(actorName, action) ::= <<
if (isSchedulable_$action.tag$()) {
	$if(action.outputPattern)$
	if ($outputPattern(actorName=actorName, pattern=action.outputPattern)$) {
		$actionCall(action)$
	}
	$else$
	$actionCall(action)$
	$endif$
}>>

schedulingTest(actorName, actions) ::= <<
$actions: actionTest(actorName=actorName, action=it); separator=" else "$
>>

scheduler(actorName, actions) ::= <<
int $actorName$_scheduler() {
	int res = 1;
	int i = 0;
  
	while (res) {
		res = 0;
		$if(actions)$
		$schedulingTest(actorName=actorName, actions=actions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action.tag$();
_FSM_state = s_$nextState.targetState$;
res = 1;
>>

actionTestState(actorName, nextState) ::= <<
if (isSchedulable_$nextState.action.tag$()) {
	$if(nextState.action.outputPattern)$
	if ($outputPattern(actorName=actorName, pattern=nextState.action.outputPattern)$) {
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(actorName, nextStates) ::= <<
$nextStates: actionTestState(actorName=actorName, nextState=it); separator=" else "$
>>

stateScheduler(actorName, transition) ::= <<
static int $transition.sourceState$_state_scheduler() {
	int res = 0;
	$schedulingTestState(actorName=actorName, nextStates=transition.nextStateInfo)$
	return res;
}

>>

switch(transitions) ::= <<
switch (_FSM_state) {
$transitions: {case s_$it.sourceState$:
	res = $it.sourceState$_state_scheduler();
	break;
}$
default:
	printf("unknown state: %s\n", stateNames[_FSM_state]);
	break;
}
>>

schedulerFSM(actorName, actions, fsm) ::= <<
enum states {
	s_$first(fsm.states)$ = 0,
	$rest(fsm.states) : {s_$it$}; separator=",\n"$
};

static char *stateNames[] = {
	$fsm.states : {"s_$it$"}; separator=",\n"$
};

static enum states _FSM_state = s_$fsm.initialState$;

$if(actions)$
static int outside_FSM_scheduler() {
	int res = 0;
	int i = 0;
	$schedulingTest(actorName=actorName, actions=actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(actorName=actorName, transition=it); separator="\n"$
int $actorName$_scheduler() {
	int res = 1;
	int i = 0;
	
	while (res) {
		res = 0;
		$if(actions)$
		if (outside_FSM_scheduler()) {
			res = 1;
			i++;
		} else {
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(name, inputs, outputs, stateVars, procs,
      actions, initializes, scheduler) ::= <<
// Generated from "$name$"

#include <stdio.h>
#include <stdlib.h>

#include "fifo.h"

////////////////////////////////////////////////////////////////////////////////
// Input FIFOs
$inputs: fifo(actorName=name, portName=it)$
////////////////////////////////////////////////////////////////////////////////
// Output FIFOs
$outputs: fifo(actorName=name, portName=it)$
////////////////////////////////////////////////////////////////////////////////
// State variables of the actor
$stateVars$
////////////////////////////////////////////////////////////////////////////////
// Functions/procedures
$procs$
////////////////////////////////////////////////////////////////////////////////
// Actions
$actions$
$if(initializes)$
////////////////////////////////////////////////////////////////////////////////
// Initializes
$initializes$
$endif$
////////////////////////////////////////////////////////////////////////////////
// Action scheduler
$if(scheduler.fsm)$
$schedulerFSM(actorName=name, actions=scheduler.actions, fsm=scheduler.fsm)$
$else$
$scheduler(actorName=name, actions=scheduler.actions)$
$endif$
>>
