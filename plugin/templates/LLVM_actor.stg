group main;

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(actorName, portName) ::= <<
@$actorName$_$portName$ = common global %struct.lff_t* null

>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

typedef(typeValue, sizeValue) ::= <<
$if(sizeValue)$ [$sizeValue$ x $typeValue$]
$else$ $typeValue$

$endif$

>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

// phi definition
phiNode(value, label) ::= <<
[$value$, %$label$]
>>


// a variable definition
vardef(name, type, size, isPort, isGlobal) ::= <<
$if(isGlobal)$
$name$ = internal global $typedef(typeValue=type, sizeValue=size)$
$else$
$if(isPort)$
$name$ = alloca $typedef(typeValue=type, sizeValue=size)$
$endif$
$endif$>>

// a state variable
stateVar(vardef, value) ::= <<
$if(value)$
$vardef$ $value$$\n$
$else$
$vardef$ 0$\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

// assignment node
assignVarNode(var, expr) ::= <<
	$var$ = $expr$

>>

// call node
callNode(res, name, parameters) ::= <<
$if(res)$
$res$ = 
$endif$
$name$($parameters; separator=", "$);

>>

// decrement node
decrementNode(var) ::= <<
$var$--;

>>

// hasTokens node
hasTokensNode(var, actorName, fifoName, numTokens) ::= <<
	%$actorName$_$fifoName$ = load %struct.lff_t** @$actorName$_$fifoName$
	$var$ = call i1 @lff_hasTokens(%struct.lff_t* %$actorName$_$fifoName$, i32 $numTokens$)

>>

// selectnode
selectNode(var, type, expr, trueVar, falseVar) ::= <<
	$var$ = select $expr$, $trueVar$, $falseVar$

>>

// bitcastnode
BitcastNode(var, type, expr) ::= <<
	$var$ = bitcast $expr$ to $type$

>>

// truncnode
TruncNode(var, type, expr) ::= <<
	$var$ = trunc $expr$ to $type$

>>

// zextnode
ZextNode(var, type, expr) ::= <<
	$var$ = zext $expr$ to $type$

>>

// brnode
brNode(expr, thenLabelNode, thenNodes, elseLabelNode, elseNodes, endLabelNode) ::= <<
	br $expr$, label %$thenLabelNode$, label %$elseLabelNode$

$if(thenNodes)$
$thenLabelNode$:
$thenNodes$	br label %$endLabelNode$

$endif$

$if(elseNodes)$
$elseLabelNode$:	
$elseNodes$	br label %$endLabelNode$

$endif$

$endLabelNode$:

>>

// increment node
incrementNode(var) ::= <<
$var$++;

>>

// label node
labelNode(name) ::= <<
$name$:

>>

// join node
joinNode(target, type, phiNode) ::= <<
	$target$ = phi $type$ $phiNode: {$it$}; separator=", "$

>>

// brlabel node
brlabelNode(name) ::= <<
	br label %$name$

>>

// load node
loadNode(target, source, indexes) ::= <<
	$target$ = load $source$ $indexes : {[$it$]}$

>>

// peek node
peekNode(typevar, var, actorName, fifoName, numTokens) ::= <<
	call void @lff_peek(%struct.lff_t* %$actorName$_$fifoName$, $typevar$ $var$)
	
>>

// read node
readNode(var, actorName, fifoName, numTokens) ::= <<
	call void @lff_read(%struct.lff_t* %$actorName$_$fifoName$, i8* $var$)

>>

// loadfifo node
loadFifo(actorName, fifoName, index) ::= <<
	%$actorName$_$fifoName$_$index$ = load %struct.lff_t** @$actorName$_$fifoName$

>>

// return node
returnNode(expr) ::= <<
	ret $expr$

>>

// self-assignment node
selfAssignmentNode(var, op, expr) ::= <<
$var$ $op$= $expr$;

>>

// store node
storeNode(var, expr) ::= <<
	store $expr$, $var$

>>

// while node
whileNode(expr, nodes) ::= <<
while ($expr$) {
	$nodes$}

>>

// write node
writeNode(var, actorName, fifoName, numTokens) ::= <<
	call void @lff_write(%struct.lff_t* %$actorName$_$fifoName$, $var$)

>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

proc(name, type, parameters, locals, nodes) ::= <<

define internal $type$ @$name$($parameters; wrap, anchor, separator=", "$) {
entry:
$if(locals)$
	$locals: {$it$}$

$endif$
$nodes$
}
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

loadPattern(actorName, pattern) ::= <<
$pattern.keys:{port|%$actorName$_$port$ = load %struct.lff_t** @$actorName$_$port$}$
>>

outputPattern(actorName, pattern) ::= <<
$pattern.keys:{port|call i1 @lff_hasRoom(%struct.lff_t* %$actorName$_$port$, i32 $pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
	call void @$action.tag$()
	br label %bb
	
>>

actionTest(actorName, action) ::= <<
	%$action.tag$ = call i1 @isSchedulable_$action.tag$()
	br i1 %$action.tag$, label %fire_$action.tag$, label %skip_$action.tag$

fire_$action.tag$:
	$if(action.outputPattern)$
	$loadPattern(actorName=actorName, pattern=action.outputPattern)$
	%room_$action.tag$ = $outputPattern(actorName=actorName, pattern=action.outputPattern)$
	br i1 %room_$action.tag$, label %hasRoom_$action.tag$, label %hasNoRoom_$action.tag$

hasRoom_$action.tag$:
$actionCall(action)$
hasNoRoom_$action.tag$:
	br label %return

$else$
$actionCall(action)$
$endif$

skip_$action.tag$:

>>

schedulingTest(actorName, actions) ::= <<
$actions: actionTest(actorName=actorName, action=it)$
>>

scheduler(actorName, actions) ::= <<
define i32 @$actorName$_scheduler() {
entry:
	%i = alloca i32
	store i32 0, i32* %i
	br label %bb
	
bb:  
$if(actions)$
$schedulingTest(actorName=actorName, actions=actions)$
$endif$
	br label %return

return:
	%i_ret = load i32* %i
	ret i32 %i_ret
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action.tag$();
_FSM_state = s_$nextState.targetState$;
res = 1;
>>

actionTestState(actorName, nextState) ::= <<
if (isSchedulable_$nextState.action.tag$()) {
	$if(nextState.action.outputPattern)$
	if ($outputPattern(actorName=actorName, pattern=nextState.action.outputPattern)$) {
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(actorName, nextStates) ::= <<
$nextStates: actionTestState(actorName=actorName, nextState=it); separator=" else "$
>>

stateScheduler(actorName, transition) ::= <<
static int $transition.sourceState$_state_scheduler() {
	int res = 0;
	$schedulingTestState(actorName=actorName, nextStates=transition.nextStateInfo)$
	return res;
}

>>

switch(transitions) ::= <<
switch (_FSM_state) {
$transitions: {case s_$it.sourceState$:
	res = $it.sourceState$_state_scheduler();
	break;
}$
default:
	printf("unknown state: %s\n", stateNames[_FSM_state]);
	break;
}
>>

schedulerFSM(actorName, actions, fsm) ::= <<
enum states {
	s_$first(fsm.states)$ = 0,
	$rest(fsm.states) : {s_$it$}; separator=",\n"$
};

static char *stateNames[] = {
	$fsm.states : {"s_$it$"}; separator=",\n"$
};

static enum states _FSM_state = s_$fsm.initialState$;

$if(actions)$
static int outside_FSM_scheduler() {
	int res = 0;
	int i = 0;
	$schedulingTest(actorName=actorName, actions=actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(actorName=actorName, transition=it); separator="\n"$
int $actorName$_scheduler() {
	int res = 1;
	int i = 0;
	
	while (res) {
		res = 0;
		$if(actions)$
		if (outside_FSM_scheduler()) {
			res = 1;
			i++;
		} else {
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(name, inputs, outputs, stateVars, procs,
      actions, initializes, scheduler, initialize) ::= <<
; Generated from "$name$"

%struct.lff_t = type { i32, i8*, i32, i32, i32 }

;function declaration
declare void @lff_read(%struct.lff_t* %lff, i8* %data)
declare i1 @lff_hasTokens(%struct.lff_t* %lff, i32 %nbTokens)
declare i1 @lff_hasRoom(%struct.lff_t* %lff, i32 %room)
declare void @lff_peek(%struct.lff_t* %lff, i8* %data)
declare void @lff_write(%struct.lff_t* %lff, i8* %data)


;Input FIFOs
$inputs: fifo(actorName=name, portName=it)$

;Output FIFOs
$outputs: fifo(actorName=name, portName=it)$


;State variables of the actor
$stateVars$


; // Functions/procedures
$procs$

; Actions
$actions$
$if(initializes)$
////////////////////////////////////////////////////////////////////////////////
// Initializes
$initializes$
void $name$_initialize() {
	int res = 1;
	int i = 0;

	$if(initialize)$
	$schedulingTest(actorName=name, actions=initialize)$
	$endif$
}

$endif$

;////////////////////////////////////////////////////////////////////////////////
;// Action scheduler
$if(scheduler.fsm)$
$schedulerFSM(actorName=name, actions=scheduler.actions, fsm=scheduler.fsm)$
$else$
$scheduler(actorName=name, actions=scheduler.actions)$
$endif$
>>
