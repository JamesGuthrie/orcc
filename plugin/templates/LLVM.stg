group main; 

broadcast(bcast) ::= <<
int $bcast.id$_scheduler() {
	$bcast.type$ tok_input[1];

	while (lff_hasTokens($bcast.id$_input, 1)
		$bcast.num:{ && lff_hasRoom($bcast.id$_output_$i0$, 1)}$) {
		lff_read($bcast.id$_input, tok_input);
		$bcast.num: { n | lff_write($bcast.id$_output_$n$, tok_input);
}$	}
  
	return 0;
}


>>

struct_fifo(fifo) ::= <<
static void* array_$fifo.count$[$fifo.size$ * sizeof($fifo.type$)];
static struct lock_free_fifo fifo_$fifo.count$ = { $fifo.size$, (char *)array_$fifo.count$, sizeof($fifo.type$), 0, 0 };

>>

ptr_fifo(fifo) ::= <<
lff_t *$fifo.source$_$fifo.src_port$ = &fifo_$fifo.count$;
lff_t *$fifo.target$_$fifo.tgt_port$ = &fifo_$fifo.count$;

>>

struct_actor(inst) ::= <<
lff_t*  $inst.id$_In[$inst.nbInput$] = {$inst.input:{name|$inst.id$_$name$}$};
lff_t*  $inst.id$_Out[$inst.nbOutput$] = {$inst.output:{name|$inst.id$_$name$}$};

>>

action_scheduler(inst) ::= <<
int (*$inst.id$_scheduler)();
>>

network(debugFifos, name, size, broadcasts, initializes, instances, connections) ::= <<
// Generated from "$name$"

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>

#include "lock_free_fifo.h"
#include "OrccLLVM.h"
#include "orcc_util.h"

#define SIZE $size$
extern "C"{

////////////////////////////////////////////////////////////////////////////////
// FIFO allocation
$connections:struct_fifo()$
////////////////////////////////////////////////////////////////////////////////
// FIFO pointer assignments
$connections:ptr_fifo()$

////////////////////////////////////////////////////////////////////////////////
// Actor structure
$instances: struct_actor()$

////////////////////////////////////////////////////////////////////////////////
$broadcasts:broadcast()$////////////////////////////////////////////////////////////////////////////////
// Action schedulers
extern int source_scheduler();
$initializes: { init | int (*$init$_initialize)(); 
}$
$instances: { inst | int (*$inst.id$_scheduler)();
}$
extern int display_scheduler();

////////////////////////////////////////////////////////////////////////////////
// Init
void init() {
		$instances: { inst | $inst.id$_scheduler = (int(*)())initModule("$inst.id$", $inst.id$_In, $inst.id$_Out);
}$
}

////////////////////////////////////////////////////////////////////////////////
// Actor scheduler

static void scheduler() {
	$initializes: { init | $init$_initialize();
}$	while (1) {
		$instances: { inst | $inst.id$_scheduler();
}$
		$broadcasts: { bcast | $bcast.id$_scheduler();
}$	}
}

////////////////////////////////////////////////////////////////////////////////
int __cdecl main(int argc, char *argv[], char *env[]) {
	init_orcc(argc, argv, env);

	scheduler();

	printf("End of simulation! Press a key to continue\n");
	pause();

	return 0;
}
}
>>

