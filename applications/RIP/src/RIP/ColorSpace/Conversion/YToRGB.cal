/* Copyright (c) 2010-2011, École Polytechnique Fédérale de Lausanne (EPFL)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package RIP.ColorSpace.Conversion ; import RIP.CoreFunctions.Math.clip.* ; /*
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *
 * Create Date:   2011/03/02
 * Design Name:   RGB2Y
 * Project Name:  libImage
 * Tool versions: Orcc
 * Description:   
 *   
 * Dependencies:
 * 
 * Revision:
 * 
 * Additional Comments:
 * 
 */
actor YToRGB
() uint(size=10) Y ==> uint(size=8) R, uint(size=8) G, uint(size=8) B :

	int(size=32) x_max = 232;

	int(size=32) x_min = 16;

	int(size=32) y_min = 64;

	conversion: action Y:[ y ] ==> R:[ red ], G:[ green ], B:[ blue ]
	var
		int(size=32) red , int(size=32) green , int(size=32) blue
	do
		red := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
		green := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
		blue := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
	end

end 
		