/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
//Modified by Damien de Saint Jorre IETR/INSA of Rennes

actor Mgnt_DPB ( int MB_WIDTH )
	uint(size=7)  PicWidthInMb, 
	uint(size=13) CurrMbAddr, 
	uint(size=13) PicSizeInMb, 
	uint          POC, 
	int( size=32) POCtoDisplay,
	uint(size=32) POCtoRead,
	int(size=32)  DelList,
	int(size=9)   WD,
	uint(size=21) RA,
	uint(size=11) RA_Width,
	uint(size=11) RA_Height,
	bool          IsIDR
		==> 
	int(size=16) RD, 
	int(size=9)  Display
		:


/*
*
* CONSTANTS
*
*/
	int (size=32) SENT_DONE       = -2;

	uint(size=32) NB_PIC          = 33;
	uint(size=32) SZ_NBPIC        = 6; /* >= log2(NB_PIC) */

	int (size=32) MB_WIDTH_CHROMA = 8;
	int (size=32) MB_WIDTH_LUMA   = 16;
	//FIXME! number of MB per line of picture
	int (size=32) PICWIDTH        = 1280/16; //number of MB per lines
	int (size=32) PICHEIGHT       = 720/16; //number of MB per columns


	List(type :List( type:int(size=16), size=PICWIDTH*PICHEIGHT*256 ), size=NB_PIC) pic;
	List(type:uint,size=NB_PIC)            ListPOC       := [ 0    :for int s in 0 .. NB_PIC-1];
	List(type:bool        ,size=NB_PIC)    PictureReady  := [false :for int s in 0 .. NB_PIC-1];
	List(type:bool        ,size=NB_PIC)    PicDisplayed  := [true  :for int s in 0 .. NB_PIC-1];
	List(type:bool        ,size=NB_PIC)    IsAReference  := [false :for int s in 0 .. NB_PIC-1];

	int (size=32) pic_curr_idx     := 0;
	uint(size=7)  PicWidthInMacroB := 0;
	uint(size=7)  PicHeightInMacroB := 0;
	uint(size=13) PicSizeInMacroB  := 0;

	/*Write information*/
	bool          write_done       := true;
	uint(size=16) currmbaddr       := 0;
	uint(size=21) wa_offset        := 0;
	uint(size=11) wa_W             := 0;
	uint(size=11) wa_H             := 0;
	uint(size=11) wa_x             := 0;
	uint(size=11) wa_y             := 0;

	/*Read Information*/
	bool                read_done  := true;
	uint(size=21)       ra_offset  := 0;
	uint(size=11)       ra_W       := 0;
	uint(size=11)       ra_H       := 0;
	uint(size=11)       ra_x       := 0;
	uint(size=11)       ra_y       := 0;
	uint(size=SZ_NBPIC) Ref_idx    := 0;

	/*Display Information*/
	int(size=14)          nbMBdisplayForXaxis := 0;
	int(size=14)          nbMBdisplayForYaxis := 0;
	int(size=32)          NextPOCtoDisplay    := -1;
	int(size=SZ_NBPIC+1)  IdxNextPOCtoDisplay := -1;

	/*Delete information*/
	bool          ValIsIDR := false;


	initialize ==>
	do
		pic := [ [-1 : for int i in 0 .. PICWIDTH*PICHEIGHT*255]: for int j in 0 .. NB_PIC-1 ];
	end


	get_writeAddr: action
			PicWidthInMb :[PICwidthInMb],
			PicSizeInMb  :[PICSizeInMb],
			CurrMbAddr   :[CurrMacroBAddr]
				==>
		guard
			write_done = true
		var
			uint(size=16) XinMb,
			uint(size=16) YinMb
		do
			PicWidthInMacroB := PICwidthInMb;
			PicSizeInMacroB  := PICSizeInMb;
			currmbaddr       := CurrMacroBAddr;
			XinMb      := CurrMacroBAddr mod PicWidthInMacroB;
			YinMb      := CurrMacroBAddr  /  PicWidthInMacroB;
			wa_offset  := YinMb * MB_WIDTH * (MB_WIDTH * PicWidthInMacroB) + XinMb * MB_WIDTH;
			wa_W       := MB_WIDTH;
			wa_H       := MB_WIDTH;
			wa_x       := 0;
			wa_y       := 0;
			write_done := false;
		end


	//Write_data: 
	write_data : action
			WD :[wd]
				==>
		guard 
			write_done = false
		do
			pic[pic_curr_idx][wa_offset + wa_x + wa_y * PicWidthInMacroB * MB_WIDTH] := wd;
			wa_x := wa_x +1;
			if(wa_x = wa_W) then
				wa_y := wa_y +1;
				if(wa_y != wa_H) then
					wa_x := 0;
				else
					write_done :=true;
				end
			end
		end


	get_readAddr: action
			RA        :[ra],
			RA_Width  :[RAWidth],
			RA_Height :[RAHeight],
			POCtoRead :[poc2read]
				==>
		guard
			read_done  = true,
			poc2read  != ListPOC[pic_curr_idx]
		var
			bool found := false
		do
			ra_offset := ra;
			ra_W      := RAWidth;
			ra_H      := RAHeight;
			ra_x      := 0;
			ra_y      := 0;
			read_done := false;
			Ref_idx   := 0;
			foreach int i in 0 .. NB_PIC-1
			do
				if( (poc2read=ListPOC[i]) and (IsAReference[i] = true)) then
					Ref_idx := i;
					found := true;
				end
			end
			if(not found)then
				println("POC not found :"+poc2read);
					foreach int i in 0 .. NB_PIC-1
					do
						println("Idx n"+i+"; PocVal:"+ListPOC[i]+ " is a ref:"+IsAReference[i]);
					end
				while(true)
				do
				end
			end
		end


	// Read data
	read_data: action
				==>
			RD :[rd]
		guard 
			read_done = false
		var 
			uint(size=16) rd
		do
			rd   := pic[Ref_idx][ra_offset + ra_x + ra_y * PicWidthInMacroB * MB_WIDTH];
			ra_x := ra_x +1;
			if(ra_x = ra_W) then
				ra_y := ra_y +1;
				if(ra_y != ra_H) then
					ra_x := 0; 
				else 
					ra_x := 0;
					ra_y := 0; 
					read_done := true;
				end
			end
		end

	write_picture_done: action ==>
		guard 
			write_done = true,
			currmbaddr = PicSizeInMacroB - 1
		do
			PictureReady[pic_curr_idx] := true;
			wa_x        := 0;
			wa_y        := 0;
			currmbaddr  :=0;
			PicHeightInMacroB := PicSizeInMacroB / PicWidthInMacroB;
		end


	read_ref_parameters: action
			POC              :[Valpoc],
			IsIDR            :[IsIDRPic]
				==>
		var
			bool         idx_selected := false,
			int(size=32) i            := 0
		do
			pic_curr_idx := -1;
			while((not idx_selected) and (i < NB_PIC))
			do
				if((PicDisplayed[i] = true) and (IsAReference[i] = false)) then
					idx_selected    := true;
					pic_curr_idx    := i;
					if(not IsIDRPic) then
						ListPOC[i]      := Valpoc;
					else
						ListPOC[i]      := 0;
					end
					IsAReference[i] := true;
					PictureReady[i] := false;
					PicDisplayed[i] := false;
				end
				i := i + 1;
			end
			ValIsIDR := IsIDRPic;
			/*Fix Me!!! ==> exception*/
			if(pic_curr_idx = -1) then
				pic_curr_idx    := 0;
				ListPOC[0]      := Valpoc;
				IsAReference[0] := true;
				PictureReady[0] := false;
				PicDisplayed[0] := false;
			end
		end


	//write MB on the output display
	Display.chroma:action ==>
			Display:[ [buff[s] :for int s in 0 .. MB_WIDTH_CHROMA * MB_WIDTH_CHROMA-1] ] repeat MB_WIDTH_CHROMA * MB_WIDTH_CHROMA
		guard
			IdxNextPOCtoDisplay != -1,
			MB_WIDTH = MB_WIDTH_CHROMA
		var
			uint         CurrAddrInPix,
			uint         CurrAddrYaxis,
			List(type:int(size=16),size = MB_WIDTH_CHROMA * MB_WIDTH_CHROMA + 1) buff := [ 0 :for int t in 0 .. MB_WIDTH_CHROMA*MB_WIDTH_CHROMA ] 
		do
			CurrAddrInPix := nbMBdisplayForXaxis * MB_WIDTH_CHROMA + nbMBdisplayForYaxis * MB_WIDTH_CHROMA * MB_WIDTH_CHROMA * PicWidthInMacroB;
			CurrAddrYaxis := 0;
			foreach int y in 0 .. (MB_WIDTH_CHROMA-1)
			do
				foreach int x in 0 .. (MB_WIDTH_CHROMA-1)
				do
					buff[x + y * MB_WIDTH_CHROMA] := pic[IdxNextPOCtoDisplay][CurrAddrInPix + x + CurrAddrYaxis];
				end
				CurrAddrYaxis := CurrAddrYaxis + MB_WIDTH_CHROMA * PicWidthInMacroB;
			end
			nbMBdisplayForXaxis := nbMBdisplayForXaxis + 1;
			if(nbMBdisplayForXaxis = PicWidthInMacroB) then
				nbMBdisplayForXaxis := 0;
				nbMBdisplayForYaxis := nbMBdisplayForYaxis + 1;
			end
		end


	//write MB on the output display
	Display.luma:action ==>
			Display:[ [buff[s] :for int s in 0 .. MB_WIDTH_LUMA * MB_WIDTH_LUMA-1] ] repeat MB_WIDTH_LUMA * MB_WIDTH_LUMA
		guard
			IdxNextPOCtoDisplay != -1,
			MB_WIDTH != MB_WIDTH_CHROMA
		var
			uint         CurrAddrInPix,
			uint         CurrAddrYaxis,
			List(type:int(size=16),size = MB_WIDTH_LUMA * MB_WIDTH_LUMA + 1) buff := [ 0 :for int t in 0 .. MB_WIDTH_LUMA*MB_WIDTH_LUMA ] 
		do
			CurrAddrInPix := nbMBdisplayForXaxis * MB_WIDTH_LUMA + nbMBdisplayForYaxis * MB_WIDTH_LUMA * MB_WIDTH_LUMA * PicWidthInMacroB;
			CurrAddrYaxis := 0;
			foreach int y in 0 .. (MB_WIDTH_LUMA-1)
			do
				foreach int x in 0 .. (MB_WIDTH_LUMA-1)
				do
					buff[x + y * MB_WIDTH_LUMA] := pic[IdxNextPOCtoDisplay][CurrAddrInPix + x + CurrAddrYaxis];
				end
				CurrAddrYaxis := CurrAddrYaxis + MB_WIDTH_LUMA * PicWidthInMacroB;
			end
			nbMBdisplayForXaxis := nbMBdisplayForXaxis + 1;
			if(nbMBdisplayForXaxis = PicWidthInMacroB) then
				nbMBdisplayForXaxis := 0;
				nbMBdisplayForYaxis := nbMBdisplayForYaxis + 1;
			end
		end

	Display.done: action ==>
		guard
			nbMBdisplayForYaxis = PicHeightInMacroB
		do
			PicDisplayed[IdxNextPOCtoDisplay] := true;
			NextPOCtoDisplay := -1;
			IdxNextPOCtoDisplay := -1;
			nbMBdisplayForXaxis := 0;
			nbMBdisplayForYaxis := 0;
		end

	ReadDelList.Launch: action
			DelList:[DelVal]
				==>
		guard
			DelVal != SENT_DONE
		do
			foreach int i in 0 .. NB_PIC - 1
			do
				if(ListPOC[i]   = DelVal) then
					IsAReference[i] := false;
				end
			end
		end


	ReadDelList.Done: action
			DelList:[DelVal]
				==>
		do
			if(ValIsIDR)then
				foreach int i in 0 .. NB_PIC - 1
				do
					if(i != pic_curr_idx) then
						IsAReference[i] := false;
					else
						ListPOC[i]      := 0;
					end
				end
			end
		end


	getNextPOCtoDisplay.launch: action
			POCtoDisplay :[poc2disp]
				==>
		guard
			poc2disp         != -1
		do
			NextPOCtoDisplay := poc2disp;
		end

	getNextPOCtoDisplay.sync: action
			POCtoDisplay :[poc2disp]
				==>
		guard
			poc2disp         = -1
		end
	
	getidxdisplay.launch: action ==>
		do
			IdxNextPOCtoDisplay := -1;
			foreach int i in 0 .. NB_PIC - 1
			do
				if(ListPOC[i] = NextPOCtoDisplay)then
						if(PictureReady[i] = true) then
							if(PicDisplayed[i] = false) then
								IdxNextPOCtoDisplay := i;
							end
						end
				end
			end
		end
  
	schedule fsm  read_ref_parameters:

		read_ref_parameters (read_ref_parameters      )--> read_write;

		read_write          (write_data               )--> read_write;
		read_write          (read_data                )--> read_write;
		read_write          (get_writeAddr            )--> read_write;
		read_write          (get_readAddr             )--> read_write;
		read_write          (write_picture_done       )--> read_del_list;

		read_del_list       (ReadDelList.Launch      )--> read_del_list;
		read_del_list       (ReadDelList.Done        )--> getNextPOCtoDisplay;

		getNextPOCtoDisplay (getNextPOCtoDisplay.launch      )--> getidxdisplay;
		getNextPOCtoDisplay (getNextPOCtoDisplay.sync        )--> read_ref_parameters;

		getidxdisplay       (getidxdisplay.launch     )--> Display;

		Display             (Display.luma             )--> Display;
		Display             (Display.chroma           )--> Display;
		Display             (Display.done             )--> getNextPOCtoDisplay;
	end

  priority
    write_data                 > read_data                > write_picture_done  > get_writeAddr > get_readAddr ;
  	Display.done               > Display.chroma      > Display.luma;
  	ReadDelList.Launch         > ReadDelList.Done;
  	getNextPOCtoDisplay.launch > getNextPOCtoDisplay.sync;
  end
end
