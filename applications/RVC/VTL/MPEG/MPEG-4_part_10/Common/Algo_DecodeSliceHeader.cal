/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_DecodeSliceHeader()
	int (size=32) ValVLD,
	
	uint(size=32) log2_max_frame_num
		==>
	uint(size=3)  TypeOfVLD,
	uint(size=5)  NbBitsToRead,
	bool          SkipNal,

	uint(size=8)  GetPps
		:


/*   
*
* Constants
*
*/

	uint(size=3) READ_BITS = 0;
	uint(size=3) VLD_UE    = 1;
	uint(size=3) VLD_SE    = 2;


/*   
*
* State variables
*
*/

	uint(size=32) first_mb_in_slice;
	uint(size=4)  slice_type;
	bool          separate_colour_plane_flag := false;

/*   
*
* Actions
*
*/

	ReadSliceType.Asked: action
			==>
			//              first_ , slice_ , pic_par
			SkipNal      :[  false ,  false ,  false ],//Keep synchro
			TypeOfVLD    :[ VLD_UE , VLD_UE , VLD_UE ]
	end


	ReadSliceType.Done: action
			ValVLD :[ValueOfVLD] repeat 3
				==>
			GetPps :[ValueOfVLD[2]]
		do
			first_mb_in_slice := ValueOfVLD[0];
			slice_type        :=
				if( ValueOfVLD[1] < 5) then
					ValueOfVLD[1]
				else
					ValueOfVLD[1] - 5
				end;
			println("\t\tfirst_mb_in_slice:"+first_mb_in_slice);
			println("\t\tslice_type:       "+slice_type);
			println("\t\tpps_id:           "+ValueOfVLD[2]);
			//pps_id            := ValueOfVLD[2]; ==> don't need
			//Ask sps_id
			//Ask and get separate_colour_plane_flag ==> not implemented in decodeSpsHeader yet !!
		end

	SeparateColourPlane.IsEqualToTrue: action
				==>
			//           colour_plane_id
			SkipNal      :[   false   ],//Keep synchro
			TypeOfVLD    :[ READ_BITS ],
			NbBitsToRead :[     2     ]
		guard
			separate_colour_plane_flag = true
		end


	ReadFrameNum.Asked: action
			log2_max_frame_num :[SzMaxFrameNum]
				==>
			//                frame_num
			SkipNal      :[     false     ],//Keep synchro
			TypeOfVLD    :[   READ_BITS   ],
			NbBitsToRead :[ SzMaxFrameNum ]
		end


	ReadFrameNum.Done: action
			ValVLD :[ValueOfVLD]
				==>
		do
			println("\t\tFrame num:"+ValueOfVLD);
		end

	SendEndSliceHeader: action
				==>
			SkipNal :[true]
		end

	

	schedule fsm ReadSliceTypeAsked:
		ReadSliceTypeAsked (ReadSliceType.Asked )--> ReadSliceTypeDone;

		ReadSliceTypeDone  (ReadSliceType.Done  )--> CheckSeparateColourPlane;

		CheckSeparateColourPlane (SeparateColourPlane.IsEqualToTrue )--> undefined; //Not implemented yet
		CheckSeparateColourPlane (ReadFrameNum.Asked )-->ReadFrameNumDone;

		ReadFrameNumDone  (ReadFrameNum.Done )-->EndSliceHeader;

		EndSliceHeader           (SendEndSliceHeader )--> ReadSliceTypeAsked;
	end

	priority
		SeparateColourPlane > ReadFrameNum;
	end
end