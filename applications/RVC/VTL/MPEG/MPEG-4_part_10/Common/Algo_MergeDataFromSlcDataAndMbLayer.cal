/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference
 purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or 
modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software 
module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the 
MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the 
<standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use 
in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module 
or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure 
the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third 
parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_MergeDataFromSlcDataAndMbLayer()
	bool         SkipMbLayer,
	bool         TransfSz8x8Flag,
	uint(size=6) MbType,
	uint(size=4) RemIntraYxYPredMode
		==>
	uint(size=1) MbIntraFlag,
	uint(size=4) IntraPredMode
		:

	uint(size=6) BLOCK_TYPE_I_8x8_or_4x4    = 0;
	uint(size=6) BLOCK_TYPE_INTRA_16x16_MIN = 1;
	uint(size=6) BLOCK_TYPE_INTRA_16x16_MAX = 24;
	uint(size=6) BLOCK_TYPE_I_PCM           = 25;
	uint(size=6) MB_TYPE_INTRA_MAX          = 25;

	MbLayerSkipped: action
			SkipMbLayer :[skip]
				==>
			MbIntraFlag :[0]
		guard
			skip = true
		end

	MbLayer.IsIntra4x4: action
			SkipMbLayer         :[skip],
			MbType              :[mb_type],
			TransfSz8x8Flag     :[Is8x8],
			RemIntraYxYPredMode :[rem_intra_4x4_pred_mode] repeat 16
				==>
			MbIntraFlag   :[1],
			IntraPredMode :[intra_pred_mode] repeat 17
		guard
			skip    =  false,
			mb_type = BLOCK_TYPE_I_8x8_or_4x4,
			Is8x8   = false
		var
			List(type: uint(size=4), size=17) intra_pred_mode
		do
			intra_pred_mode[0] := 1;
			foreach int i in 0 .. 15
			do
				intra_pred_mode[i+1] := rem_intra_4x4_pred_mode[i];
			end
		end

	MbLayer.IsIntra8x8: action
			SkipMbLayer     :[skip],
			MbType          :[mb_type],
			TransfSz8x8Flag :[Is8x8],
			RemIntraYxYPredMode :[rem_intra_8x8_pred_mode] repeat 4
				==>
			MbIntraFlag   :[1],
			IntraPredMode :[intra_pred_mode] repeat 4
		guard
			skip    =  false,
			mb_type = BLOCK_TYPE_I_8x8_or_4x4,
			Is8x8   = true
		var
			List(type: uint(size=4), size=5) intra_pred_mode
		do
			intra_pred_mode[0] := 2;
			foreach int i in 0 .. 4
			do
				intra_pred_mode[i+1] := rem_intra_8x8_pred_mode[i];
			end
		end

	MbLayer.IsIntra16x16: action
			SkipMbLayer     :[skip],
			MbType          :[mb_type],
			TransfSz8x8Flag :[Is8x8]
				==>
			MbIntraFlag   :[1],
			IntraPredMode :[ 3 , (mb_type-1) mod 4]
		guard
			skip     =  false,
			mb_type >= BLOCK_TYPE_INTRA_16x16_MIN,
			mb_type <= BLOCK_TYPE_INTRA_16x16_MAX
		end

	MbLayer.IsIntraPCM: action
			SkipMbLayer     :[skip],
			MbType          :[mb_type],
			TransfSz8x8Flag :[Is8x8]
				==>
			MbIntraFlag   :[1],
			IntraPredMode :[4]
		guard
			skip    =  false,
			mb_type = BLOCK_TYPE_I_PCM
		end

	MbLayer.IsNotIntra: action
			SkipMbLayer     :[skip],
			MbType          :[mb_type],
			TransfSz8x8Flag :[Is8x8]
				==>
			MbIntraFlag:[0]
		guard
			skip    = false,
			mb_type > MB_TYPE_INTRA_MAX
		end

	priority
		MbLayerSkipped > MbLayer;
	end
end