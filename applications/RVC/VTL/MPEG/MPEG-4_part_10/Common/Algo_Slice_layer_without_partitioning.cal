/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_Slice_layer_without_partitioning()
	int (size=32) ValVLD,

	int (size=6)  HeaderTypeOfVLD,
	int (size=32) HeaderVLDParam,

	uint(size=5)  DecRefPicMarkingTypeOfVLD,
	int (size=32) DecRefPicMarkingNbBitsToRead,

	uint(size=5)  RefPicListTypeOfVLD,
	int (size=32) RefPicListNbBitsToRead,

	int (size=6)  DataTypeOfVLD,
	int (size=32) DataVLDParam,

	int (size=6)  MbLayerTypeOfVLD,
	int (size=32) MbLayerVLDParam,

	uint(size=5)  MbPredTypeOfVLD,
	int (size=32) MbPredNbBitsToRead,

	uint(size=5)  SubMbPredTypeOfVLD,
	int (size=32) SubMbPredNbBitsToRead,

	int (size=6)  ResTypeOfVLD,
	int (size=32) ResActorLaunched,

	uint(size=5)  ResBlkCavlcTypeOfVLD,
	int (size=32) ResBlkCavlcVLD_Param
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLD_Param,

	int (size=32) HeaderValVLD,

	int (size=32) DecRefPicMarkingValVLD,

	int (size=32) RefPicListValVLD,

	int (size=32) DataValVLD,

	int (size=32) MbLayerValVLD,

	int (size=32) MbPredValVLD,

	int (size=32) SubMbPredValVLD,

	int (size=32) ResBlkCavlcValVLD
		:


/*
*
* Constants
*
*/

	int (size=6) LAUNCH_ACTOR      = -1;
	uint(size=5) READ_BITS         =  0;
	uint(size=5) CAVLC_COEFF_TOKEN =  5;
	uint(size=5) CAVLC_TOTAL_ZEROS =  7;
	uint(size=5) CAVLC_RUN_BEFORE  =  8;
	uint(size=5) VLD_TE            = 9;
	uint(size=5) SKIP_NAL          = 10;

	uint(size=4) DEC_REF_PIC_MARKING  = 0;
	uint(size=4) REF_PIC_LIST         = 1;
	uint(size=4) MB_LAYER             = 2;
	uint(size=4) SUB_MB_PRED          = 3;
	uint(size=4) MB_PRED              = 4;
	uint(size=4) RESIDUAL             = 5;
	uint(size=4) RESIDUAL_BLOCK_CAVLC = 6;
	uint(size=4) RESIDUAL_BLOCK_CABAC = 7;


	SliceHeader.GetVLDVal: action
			ValVLD       :[VLDecoding]
				==>
			HeaderValVLD :[VLDecoding]
		end


	SliceHeader.AskVLD: action
			HeaderTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD       :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL,
			ValTypeOfVLD  != LAUNCH_ACTOR
		end


	SliceHeader.AskReadBits: action
			HeaderTypeOfVLD :[ValTypeOfVLD],
			HeaderVLDParam  :[NbBits]
				==>
			TypeOfVLD       :[READ_BITS],
			VLD_Param       :[NbBits]
		guard
			ValTypeOfVLD  = READ_BITS
		end

	SliceHeader.LaunchRefPicMark: action
			HeaderTypeOfVLD :[Function],
			HeaderVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = DEC_REF_PIC_MARKING
		end

	SliceHeader.LaunchRefPicList: action
			HeaderTypeOfVLD :[Function],
			HeaderVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = REF_PIC_LIST
		end

	SliceHeader.Done: action
			HeaderTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	RefPicMark.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			DecRefPicMarkingValVLD :[VLDecoding]
		end


	RefPicMark.AskVLD: action
			DecRefPicMarkingTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD       :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL
		end


	RefPicMark.AskReadBits: action
			DecRefPicMarkingTypeOfVLD    :[ValTypeOfVLD],
			DecRefPicMarkingNbBitsToRead :[NbBits]
				==>
			TypeOfVLD :[READ_BITS],
			VLD_Param :[NbBits]
		guard
			ValTypeOfVLD  = READ_BITS
		end

	RefPicMark.Done: action
			DecRefPicMarkingTypeOfVLD    :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	RefPicList.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			RefPicListValVLD :[VLDecoding]
		end


	RefPicList.AskVLD: action
			RefPicListTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD       :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL
		end


	RefPicList.AskReadBits: action
			RefPicListTypeOfVLD    :[ValTypeOfVLD],
			RefPicListNbBitsToRead :[NbBits]
				==>
			TypeOfVLD              :[READ_BITS],
			VLD_Param              :[NbBits]
		guard
			ValTypeOfVLD  = READ_BITS
		end

	RefPicList.Done: action
			RefPicListTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	SliceData.GetVLDVal: action
			ValVLD     :[VLDecoding]
				==>
			DataValVLD :[VLDecoding]
		end


	SliceData.AskVLD: action
			DataTypeOfVLD :[ValTypeOfVLD]
				==>
			TypeOfVLD     :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL,
			ValTypeOfVLD  != LAUNCH_ACTOR
		end


	SliceData.AskReadBits: action
			DataTypeOfVLD :[ValTypeOfVLD],
			DataVLDParam  :[NbBits]
				==>
			TypeOfVLD        :[READ_BITS],
			VLD_Param        :[NbBits]
		guard
			ValTypeOfVLD  = READ_BITS
		end

	SliceData.LaunchMbLayer: action
			DataTypeOfVLD :[Function],
			DataVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = MB_LAYER
		end

	SliceData.Done: action
			DataTypeOfVLD :[Function]
				==>
			TypeOfVLD     :[SKIP_NAL]
		guard
			Function = SKIP_NAL
		end


	MbLayer.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			MbLayerValVLD :[VLDecoding]
		end


	MbLayer.AskVLD: action
			MbLayerTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD          :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL,
			ValTypeOfVLD  != LAUNCH_ACTOR
		end


	MbLayer.AskReadBits: action
			MbLayerTypeOfVLD :[ValTypeOfVLD],
			MbLayerVLDParam  :[NbBits]
				==>
			TypeOfVLD           :[READ_BITS],
			VLD_Param           :[NbBits]
		guard
			ValTypeOfVLD   = READ_BITS
		end

	MbLayer.Done: action
			MbLayerTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end

	MbLayer.LaunchSubMbPred: action
			MbLayerTypeOfVLD :[Function],
			MbLayerVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = SUB_MB_PRED
		end

	MbLayer.LaunchMbPred: action
			MbLayerTypeOfVLD :[Function],
			MbLayerVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = MB_PRED
		end

	MbLayer.LaunchResidual: action
			MbLayerTypeOfVLD :[Function],
			MbLayerVLDParam  :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = RESIDUAL
		end


	MbPred.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			MbPredValVLD :[VLDecoding]
		end


	MbPred.AskVLD: action
			MbPredTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD         :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL,
			ValTypeOfVLD  != VLD_TE
		end


	MbPred.AskReadBitsOrTeV: action
			MbPredTypeOfVLD    :[ValTypeOfVLD],
			MbPredNbBitsToRead :[VldParam]
				==>
			TypeOfVLD          :[ValTypeOfVLD],
			VLD_Param          :[VldParam]
		guard
			ValTypeOfVLD  = READ_BITS or ValTypeOfVLD = VLD_TE
		end

	MbPred.Done: action
			MbPredTypeOfVLD   :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	SubMbPred.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			SubMbPredValVLD :[VLDecoding]
		end


	SubMbPred.AskVLD: action
			SubMbPredTypeOfVLD   :[ValTypeOfVLD]
				==>
			TypeOfVLD         :[ValTypeOfVLD]
		guard
			ValTypeOfVLD  != READ_BITS,
			ValTypeOfVLD  != SKIP_NAL,
			ValTypeOfVLD  != VLD_TE
		end


	SubMbPred.AskReadBitsOrTeV: action
			SubMbPredTypeOfVLD    :[ValTypeOfVLD],
			SubMbPredNbBitsToRead :[VldParam]
				==>
			TypeOfVLD             :[ValTypeOfVLD],
			VLD_Param             :[VldParam]
		guard
			ValTypeOfVLD  = READ_BITS or ValTypeOfVLD = VLD_TE
		end

	SubMbPred.Done: action
			SubMbPredTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end

	Residual.Done: action
			ResTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end

	Residual.LaunchResBlkCavlc: action
			ResTypeOfVLD     :[Function],
			ResActorLaunched :[Actor]
				==>
		guard
			Function = LAUNCH_ACTOR,
			Actor    = RESIDUAL_BLOCK_CAVLC
		end


	ResBlkCavlc.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			ResBlkCavlcValVLD :[VLDecoding]
		end


	ResBlkCavlc.AskVLD: action
			ResBlkCavlcTypeOfVLD :[ValTypeOfVLD]
				==>
			TypeOfVLD       :[ValTypeOfVLD]
		guard
			ValTypeOfVLD != READ_BITS,
			ValTypeOfVLD != CAVLC_COEFF_TOKEN,
			ValTypeOfVLD != CAVLC_TOTAL_ZEROS,
			ValTypeOfVLD != CAVLC_RUN_BEFORE,
			ValTypeOfVLD != SKIP_NAL
		end


	ResBlkCavlc.AskReadBitsOrCavlc: action
			ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
			ResBlkCavlcVLD_Param :[NbBits]
				==>
			TypeOfVLD            :[ValTypeOfVLD],
			VLD_Param            :[NbBits]
		guard
			(ValTypeOfVLD = READ_BITS) or (ValTypeOfVLD = CAVLC_COEFF_TOKEN) or (ValTypeOfVLD = CAVLC_RUN_BEFORE)
		end


	ResBlkCavlc.AskCavlcTotalZeros: action
			ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
			ResBlkCavlcVLD_Param :[maxNumCoeff , TotalCoeff]
				==>
			TypeOfVLD            :[CAVLC_TOTAL_ZEROS],
			VLD_Param            :[maxNumCoeff , TotalCoeff]
		guard
			ValTypeOfVLD = CAVLC_TOTAL_ZEROS
		end

	ResBlkCavlc.Done: action
			ResBlkCavlcTypeOfVLD :[Function]
				==>
		guard
			Function = SKIP_NAL
		end

	schedule fsm LaunchSliceHeader:
		LaunchSliceHeader (SliceHeader.AskVLD           )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.AskReadBits      )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.GetVLDVal        )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.LaunchRefPicMark )--> LaunchRefPicMark;
		LaunchSliceHeader (SliceHeader.LaunchRefPicList )--> LaunchRefPicList;
		LaunchSliceHeader (SliceHeader.Done             )--> LaunchSliceData;

			LaunchRefPicMark (RefPicMark.AskVLD       )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.AskReadBits  )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.GetVLDVal    )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.Done         )--> LaunchSliceHeader;
	
			LaunchRefPicList (RefPicList.AskVLD       )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.AskReadBits  )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.GetVLDVal    )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.Done         )--> LaunchSliceHeader;

		LaunchSliceData   (SliceData.AskVLD             )--> LaunchSliceData;
		LaunchSliceData   (SliceData.AskReadBits        )--> LaunchSliceData;
		LaunchSliceData   (SliceData.GetVLDVal          )--> LaunchSliceData;
		LaunchSliceData   (SliceData.LaunchMbLayer      )--> LaunchMbLayer;
		LaunchSliceData   (SliceData.Done               )--> LaunchSliceHeader;
	
			LaunchMbLayer    (MbLayer.AskVLD          )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.AskReadBits     )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.GetVLDVal       )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.Done            )--> LaunchSliceData;
			LaunchMbLayer    (MbLayer.LaunchSubMbPred )--> LaunchSubMbPred;
			LaunchMbLayer    (MbLayer.LaunchMbPred    )--> LaunchMbPred;
			LaunchMbLayer    (MbLayer.LaunchResidual  )--> LaunchResidual;
	
				LaunchMbPred   (MbPred.AskVLD       )--> LaunchMbPred;
				LaunchMbPred   (MbPred.AskReadBitsOrTeV  )--> LaunchMbPred;
				LaunchMbPred   (MbPred.GetVLDVal    )--> LaunchMbPred;
				LaunchMbPred   (MbPred.Done         )--> LaunchMbLayer;
	
				LaunchSubMbPred   (SubMbPred.AskVLD       )--> LaunchSubMbPred;
				LaunchSubMbPred   (SubMbPred.AskReadBitsOrTeV  )--> LaunchSubMbPred;
				LaunchSubMbPred   (SubMbPred.GetVLDVal    )--> LaunchSubMbPred;
				LaunchSubMbPred   (SubMbPred.Done         )--> LaunchMbLayer;

				LaunchResidual (Residual.Done              )--> LaunchMbLayer;
				LaunchResidual (Residual.LaunchResBlkCavlc )--> LaunchResBlkCavlc;

	
					LaunchResBlkCavlc (ResBlkCavlc.AskVLD             )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.AskReadBitsOrCavlc )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.AskCavlcTotalZeros )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.GetVLDVal          )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.Done               )--> LaunchResidual;
	end

	priority
		SliceHeader.GetVLDVal        > SliceHeader.AskVLD           > SliceHeader.AskReadBits > SliceHeader.LaunchRefPicMark;
		SliceHeader.LaunchRefPicMark > SliceHeader.LaunchRefPicList > SliceHeader.Done;
		RefPicMark.GetVLDVal         > RefPicMark.AskVLD            > RefPicMark.AskReadBits  > RefPicMark.Done;
		RefPicList.GetVLDVal         > RefPicList.AskVLD            > RefPicList.AskReadBits  > RefPicList.Done;
		SliceData.GetVLDVal          > SliceData.AskVLD             > SliceData.AskReadBits   > SliceData.LaunchMbLayer       > SliceData.Done;
		MbLayer.GetVLDVal            > MbLayer.AskVLD               > MbLayer.AskReadBits     > MbLayer.LaunchMbPred;
		MbLayer.LaunchMbPred         > MbLayer.LaunchSubMbPred      > MbLayer.LaunchResidual  > MbLayer.Done;
		MbPred.GetVLDVal             > MbPred.AskVLD                > MbPred.AskReadBitsOrTeV > MbPred.Done;
	end
end
