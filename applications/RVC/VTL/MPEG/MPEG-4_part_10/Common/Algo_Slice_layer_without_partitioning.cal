/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_Slice_layer_without_partitioning()
	int (size=32) ValVLD,

	uint(size=3)  HeaderTypeOfVLD,
	int (size=32) HeaderNbBitsToRead,
	bool          HeaderSkipNal,
	uint(size=4)  HeaderLaunchActor,

	uint(size=3)  DecRefPicMarkingTypeOfVLD,
	int (size=32) DecRefPicMarkingNbBitsToRead,
	bool          DecRefPicMarkingSkipNal,

	uint(size=3)  RefPicListTypeOfVLD,
	int (size=32) RefPicListNbBitsToRead,
	bool          RefPicListSkipNal,

	uint(size=3)  DataTypeOfVLD,
	int (size=32) DataNbBitsToRead,
	bool          DataSkipNal,
	uint(size=4)  DataLaunchActor,

	uint(size=3)  MbLayerTypeOfVLD,
	int (size=32) MbLayerNbBitsToRead,
	bool          MbLayerSkipNal,
	uint(size=4)  MbLayerLaunchActor,

	uint(size=3)  MbPredTypeOfVLD,
	int (size=32) MbPredNbBitsToRead,
	bool          MbPredSkipNal,

	bool          ResSkipNal,
	uint(size=4)  ResLaunchActor,

	uint(size=3)  ResBlkCavlcTypeOfVLD,
	int (size=32) ResBlkCavlcVLD_Param,
	bool          ResBlkCavlcSkipNal
		==>
	uint(size=3)  TypeOfVLD,
	int (size=32) VLD_Param,
	bool          SkipNal,

	int (size=32) HeaderValVLD,

	int (size=32) DecRefPicMarkingValVLD,

	int (size=32) RefPicListValVLD,

	int (size=32) DataValVLD,

	int (size=32) MbLayerValVLD,

	int (size=32) MbPredValVLD,

	int (size=32) ResBlkCavlcValVLD
		:


/*
*
* Constants
*
*/

	uint(size=3) READ_BITS            = 0;
	uint(size=3) CAVLC_COEFF_TOKEN    = 5;
	uint(size=3) CAVLC_TOTAL_ZEROS    = 7;
	uint(size=4) CAVLC_RUN_BEFORE      = 8;

	uint(size=4) SLICE_HEADER         = 0;
	uint(size=4) DEC_REF_PIC_MARKING  = 1;
	uint(size=4) REF_PIC_LIST         = 2;
	uint(size=4) SLICE_DATA           = 3;
	uint(size=4) MB_LAYER             = 4;
	uint(size=4) SUB_MB_PRED          = 5;
	uint(size=4) MB_PRED              = 6;
	uint(size=4) RESIDUAL             = 7;
	uint(size=4) RESIDUAL_BLOCK_CAVLC = 8;
	uint(size=4) RESIDUAL_BLOCK_CABAC = 9;


	SliceHeader.GetVLDVal: action
			ValVLD       :[VLDecoding]
				==>
			HeaderValVLD :[VLDecoding]
		end


	SliceHeader.AskVLD: action
			HeaderTypeOfVLD   :[ValTypeOfVLD],
			HeaderSkipNal     :[EndOfDecoding],
			HeaderLaunchActor :[ValLaunch]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false,
			ValLaunch      = SLICE_HEADER
		end


	SliceHeader.AskReadBits: action
			HeaderTypeOfVLD    :[ValTypeOfVLD],
			HeaderNbBitsToRead :[NbBits],
			HeaderSkipNal      :[EndOfDecoding],
			HeaderLaunchActor  :[ValLaunch]
				==>
			TypeOfVLD          :[READ_BITS],
			VLD_Param       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false,
			ValLaunch      = SLICE_HEADER
		end

	SliceHeader.LaunchRefPicMark: action
			HeaderSkipNal     :[EndOfDecoding],
			HeaderLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = DEC_REF_PIC_MARKING,
			EndOfDecoding = false
		end

	SliceHeader.LaunchRefPicList: action
			HeaderSkipNal     :[EndOfDecoding],
			HeaderLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = REF_PIC_LIST,
			EndOfDecoding = false
		end

	SliceHeader.Done: action
			HeaderSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end


	RefPicMark.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			DecRefPicMarkingValVLD :[VLDecoding]
		end


	RefPicMark.AskVLD: action
			DecRefPicMarkingTypeOfVLD   :[ValTypeOfVLD],
			DecRefPicMarkingSkipNal     :[EndOfDecoding]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false
		end


	RefPicMark.AskReadBits: action
			DecRefPicMarkingTypeOfVLD    :[ValTypeOfVLD],
			DecRefPicMarkingNbBitsToRead :[NbBits],
			DecRefPicMarkingSkipNal      :[EndOfDecoding]
				==>
			TypeOfVLD          :[READ_BITS],
			VLD_Param       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false
		end

	RefPicMark.Done: action
			DecRefPicMarkingSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end


	RefPicList.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			RefPicListValVLD :[VLDecoding]
		end


	RefPicList.AskVLD: action
			RefPicListTypeOfVLD   :[ValTypeOfVLD],
			RefPicListSkipNal     :[EndOfDecoding]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false
		end


	RefPicList.AskReadBits: action
			RefPicListTypeOfVLD    :[ValTypeOfVLD],
			RefPicListNbBitsToRead :[NbBits],
			RefPicListSkipNal      :[EndOfDecoding]
				==>
			TypeOfVLD          :[READ_BITS],
			VLD_Param       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false
		end

	RefPicList.Done: action
			RefPicListSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end


	SliceData.GetVLDVal: action
			ValVLD       :[VLDecoding]
				==>
			DataValVLD :[VLDecoding]
		end


	SliceData.AskVLD: action
			DataTypeOfVLD   :[ValTypeOfVLD],
			DataSkipNal     :[EndOfDecoding],
			DataLaunchActor :[ValLaunch]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false,
			ValLaunch      = SLICE_DATA
		end


	SliceData.AskReadBits: action
			DataTypeOfVLD    :[ValTypeOfVLD],
			DataNbBitsToRead :[NbBits],
			DataSkipNal      :[EndOfDecoding],
			DataLaunchActor :[ValLaunch]
				==>
			TypeOfVLD          :[READ_BITS],
			VLD_Param       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false,
			ValLaunch     = SLICE_DATA
		end

	SliceData.LaunchMbLayer: action
			DataSkipNal     :[EndOfDecoding],
			DataLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = MB_LAYER,
			EndOfDecoding = false
		end

	SliceData.Done: action
			DataSkipNal :[EndOfDecoding]
				==>
			SkipNal : [true]
		guard
			EndOfDecoding = true
		end


	MbLayer.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			MbLayerValVLD :[VLDecoding]
		end


	MbLayer.AskVLD: action
			MbLayerTypeOfVLD   :[ValTypeOfVLD],
			MbLayerSkipNal     :[EndOfDecoding],
			MbLayerLaunchActor :[ValLaunchActor]
				==>
			TypeOfVLD          :[ValTypeOfVLD],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false,
			ValLaunchActor = MB_LAYER
		end


	MbLayer.AskReadBits: action
			MbLayerTypeOfVLD    :[ValTypeOfVLD],
			MbLayerNbBitsToRead :[NbBits],
			MbLayerSkipNal      :[EndOfDecoding],
			MbLayerLaunchActor  :[ValLaunchActor]
				==>
			TypeOfVLD           :[READ_BITS],
			VLD_Param        :[NbBits],
			SkipNal             :[false]
		guard
			ValTypeOfVLD   = READ_BITS,
			EndOfDecoding  = false,
			ValLaunchActor = MB_LAYER
		end

	MbLayer.Done: action
			MbLayerSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end

	MbLayer.LaunchSubMbPred: action
			MbLayerSkipNal     :[EndOfDecoding],
			MbLayerLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = SUB_MB_PRED,
			EndOfDecoding = false
		end

	MbLayer.LaunchMbPred: action
			MbLayerSkipNal     :[EndOfDecoding],
			MbLayerLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = MB_PRED,
			EndOfDecoding = false
		end

	MbLayer.LaunchResidual: action
			MbLayerSkipNal     :[EndOfDecoding],
			MbLayerLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = RESIDUAL,
			EndOfDecoding = false
		end


	MbPred.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			MbPredValVLD :[VLDecoding]
		end


	MbPred.AskVLD: action
			MbPredTypeOfVLD   :[ValTypeOfVLD],
			MbPredSkipNal     :[EndOfDecoding]
				==>
			TypeOfVLD         :[ValTypeOfVLD],
			SkipNal           :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false
		end


	MbPred.AskReadBits: action
			MbPredTypeOfVLD    :[ValTypeOfVLD],
			MbPredNbBitsToRead :[NbBits],
			MbPredSkipNal      :[EndOfDecoding]
				==>
			TypeOfVLD          :[READ_BITS],
			VLD_Param       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false
		end

	MbPred.Done: action
			MbPredSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end

	Residual.Done: action
			ResSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end

	Residual.LaunchResBlkCavlc: action
			ResSkipNal     :[EndOfDecoding],
			ResLaunchActor :[ValLaunch]
				==>
		guard
			ValLaunch     = RESIDUAL_BLOCK_CAVLC,
			EndOfDecoding = false
		end


	ResBlkCavlc.GetVLDVal: action
			ValVLD                 :[VLDecoding]
				==>
			ResBlkCavlcValVLD :[VLDecoding]
		end


	ResBlkCavlc.AskVLD: action
			ResBlkCavlcTypeOfVLD   :[ValTypeOfVLD],
			ResBlkCavlcSkipNal     :[EndOfDecoding]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			(ValTypeOfVLD != READ_BITS) and (ValTypeOfVLD != CAVLC_COEFF_TOKEN) and (ValTypeOfVLD != CAVLC_TOTAL_ZEROS) and ( ValTypeOfVLD != CAVLC_RUN_BEFORE),
			EndOfDecoding  = false
		end


	ResBlkCavlc.AskReadBitsOrCavlc: action
			ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
			ResBlkCavlcVLD_Param :[NbBits],
			ResBlkCavlcSkipNal   :[EndOfDecoding]
				==>
			TypeOfVLD            :[ValTypeOfVLD],
			VLD_Param            :[NbBits],
			SkipNal              :[false]
		guard
			(ValTypeOfVLD = READ_BITS) or (ValTypeOfVLD = CAVLC_COEFF_TOKEN) or (ValTypeOfVLD = CAVLC_RUN_BEFORE),
			EndOfDecoding = false
		end


	ResBlkCavlc.AskCavlcTotalZeros: action
			ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
			ResBlkCavlcVLD_Param :[maxNumCoeff , TotalCoeff],
			ResBlkCavlcSkipNal   :[EndOfDecoding]
				==>
			TypeOfVLD            :[CAVLC_TOTAL_ZEROS],
			VLD_Param            :[maxNumCoeff , TotalCoeff],
			SkipNal              :[false]
		guard
			ValTypeOfVLD = CAVLC_TOTAL_ZEROS,
			EndOfDecoding = false
		end

	ResBlkCavlc.Done: action
			ResBlkCavlcSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end

	schedule fsm LaunchSliceHeader:
		LaunchSliceHeader (SliceHeader.AskVLD           )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.AskReadBits      )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.GetVLDVal        )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.LaunchRefPicMark )--> LaunchRefPicMark;
		LaunchSliceHeader (SliceHeader.LaunchRefPicList )--> LaunchRefPicList;
		LaunchSliceHeader (SliceHeader.Done             )--> LaunchSliceData;

			LaunchRefPicMark (RefPicMark.AskVLD       )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.AskReadBits  )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.GetVLDVal    )--> LaunchRefPicMark;
			LaunchRefPicMark (RefPicMark.Done         )--> LaunchSliceHeader;
	
			LaunchRefPicList (RefPicList.AskVLD       )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.AskReadBits  )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.GetVLDVal    )--> LaunchRefPicList;
			LaunchRefPicList (RefPicList.Done         )--> LaunchSliceHeader;

		LaunchSliceData   (SliceData.AskVLD             )--> LaunchSliceData;
		LaunchSliceData   (SliceData.AskReadBits        )--> LaunchSliceData;
		LaunchSliceData   (SliceData.GetVLDVal          )--> LaunchSliceData;
		LaunchSliceData   (SliceData.LaunchMbLayer      )--> LaunchMbLayer;
		LaunchSliceData   (SliceData.Done               )--> LaunchSliceHeader;
	
			LaunchMbLayer    (MbLayer.AskVLD          )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.AskReadBits     )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.GetVLDVal       )--> LaunchMbLayer;
			LaunchMbLayer    (MbLayer.Done            )--> LaunchSliceData;
			LaunchMbLayer    (MbLayer.LaunchSubMbPred )--> LaunchSubMbPred;
			LaunchMbLayer    (MbLayer.LaunchMbPred    )--> LaunchMbPred;
			LaunchMbLayer    (MbLayer.LaunchResidual  )--> LaunchResidual;
	
				LaunchMbPred   (MbPred.AskVLD       )--> LaunchMbPred;
				LaunchMbPred   (MbPred.AskReadBits  )--> LaunchMbPred;
				LaunchMbPred   (MbPred.GetVLDVal    )--> LaunchMbPred;
				LaunchMbPred   (MbPred.Done         )--> LaunchMbLayer;

				LaunchResidual (Residual.Done              )--> LaunchMbLayer;
				LaunchResidual (Residual.LaunchResBlkCavlc )--> LaunchResBlkCavlc;

	
					LaunchResBlkCavlc (ResBlkCavlc.AskVLD             )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.AskReadBitsOrCavlc )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.AskCavlcTotalZeros )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.GetVLDVal          )--> LaunchResBlkCavlc;
					LaunchResBlkCavlc (ResBlkCavlc.Done               )--> LaunchResidual;
	end

	priority
		SliceHeader.GetVLDVal        > SliceHeader.AskVLD           > SliceHeader.AskReadBits > SliceHeader.LaunchRefPicMark;
		SliceHeader.LaunchRefPicMark > SliceHeader.LaunchRefPicList > SliceHeader.Done;
		RefPicMark.GetVLDVal         > RefPicMark.AskVLD            > RefPicMark.AskReadBits  > RefPicMark.Done;
		RefPicList.GetVLDVal         > RefPicList.AskVLD            > RefPicList.AskReadBits  > RefPicList.Done;
		SliceData.GetVLDVal          > SliceData.AskVLD             > SliceData.AskReadBits   > SliceData.LaunchMbLayer       > SliceData.Done;
		MbLayer.GetVLDVal            > MbLayer.AskVLD               > MbLayer.AskReadBits     > MbLayer.LaunchMbPred;
		MbLayer.LaunchMbPred         > MbLayer.LaunchSubMbPred      > MbLayer.LaunchResidual  > MbLayer.Done;
		MbPred.GetVLDVal             > MbPred.AskVLD                > MbPred.AskReadBits      > MbPred.Done;
	end
end