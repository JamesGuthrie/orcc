/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_Slice_layer_without_partitioning()
	int (size=32) ValVLD,

	uint(size=3)  HeaderTypeOfVLD,
	uint(size=5)  HeaderNbBitsToRead,
	bool          HeaderSkipNal,

	uint(size=3)  DataTypeOfVLD,
	uint(size=5)  DataNbBitsToRead,
	bool          DataSkipNal
		==>
	uint(size=3)  TypeOfVLD,
	uint(size=5)  NbBitsToRead,
	bool          SkipNal,

	int (size=32) HeaderValVLD,

	int (size=32) DataValVLD
		:


/*
*
* Constants
*
*/

	uint(size=3) READ_BITS = 0;

	SliceHeader.GetVLDVal: action
			ValVLD       :[VLDecoding]
				==>
			HeaderValVLD :[VLDecoding]
		end


	SliceHeader.AskVLD: action
			HeaderTypeOfVLD :[ValTypeOfVLD],
			HeaderSkipNal   :[EndOfDecoding]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false
		end


	SliceHeader.AskReadBits: action
			HeaderTypeOfVLD    :[ValTypeOfVLD],
			HeaderNbBitsToRead :[NbBits],
			HeaderSkipNal      :[EndOfDecoding]
				==>
			TypeOfVLD          :[READ_BITS],
			NbBitsToRead       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false
		end


	SliceHeader.Done: action
			HeaderSkipNal :[EndOfDecoding]
				==>
		guard
			EndOfDecoding = true
		end


	SliceData.GetVLDVal: action
			ValVLD       :[VLDecoding]
				==>
			DataValVLD :[VLDecoding]
		end


	SliceData.AskVLD: action
			DataTypeOfVLD :[ValTypeOfVLD],
			DataSkipNal   :[EndOfDecoding]
				==>
			TypeOfVLD       :[ValTypeOfVLD],
			SkipNal         :[false]
		guard
			ValTypeOfVLD  != READ_BITS,
			EndOfDecoding  = false
		end


	SliceData.AskReadBits: action
			DataTypeOfVLD    :[ValTypeOfVLD],
			DataNbBitsToRead :[NbBits],
			DataSkipNal      :[EndOfDecoding]
				==>
			TypeOfVLD          :[READ_BITS],
			NbBitsToRead       :[NbBits],
			SkipNal            :[false]
		guard
			ValTypeOfVLD  = READ_BITS,
			EndOfDecoding = false
		end


	SliceData.Done: action
			DataSkipNal :[EndOfDecoding]
				==>
			SkipNal : [true]
		guard
			EndOfDecoding = true
		end


	schedule fsm LaunchSliceHeader:
		LaunchSliceHeader (SliceHeader.AskVLD      )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.AskReadBits )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.GetVLDVal   )--> LaunchSliceHeader;
		LaunchSliceHeader (SliceHeader.Done        )--> LaunchSliceData;

		LaunchSliceData   (SliceData.AskVLD        )--> LaunchSliceData;
		LaunchSliceData   (SliceData.AskReadBits   )--> LaunchSliceData;
		LaunchSliceData   (SliceData.GetVLDVal     )--> LaunchSliceData;
		LaunchSliceData   (SliceData.Done          )--> LaunchSliceHeader;
	end

	priority
		SliceHeader.GetVLDVal > SliceHeader.AskVLD > SliceHeader.AskReadBits > SliceHeader.Done;
		SliceData.GetVLDVal   > SliceData.AskVLD   > SliceData.AskReadBits   > SliceData.Done;
	end
end