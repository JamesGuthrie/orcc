/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
actor Algo_MvComponentReorder()
	uint(size=6)  MbType,
	uint(size=4)  SubMbType,
	int (size=16) Mv,
	uint(size=4)  RefIdx
		==>
	int (size=16) MvOut,
	uint(size=6)  PartSZ,
	uint(size=4)  RefIdxOut
		:

	uint(size=3) SZ_16x16 = 0;
	uint(size=3) SZ_16x8  = 1;
	uint(size=3) SZ_8x16  = 2;
	uint(size=3) SZ_8x8   = 3;
	uint(size=3) SZ_8x4   = 4;
	uint(size=3) SZ_4x8   = 5;
	uint(size=3) SZ_4x4   = 6;

	uint(size=6) BLOCK_TYPE_P_MIN     = 26;
	uint(size=6) BLOCK_TYPE_P_8x8     = 29;
	uint(size=6) BLOCK_TYPE_P_8x8ref0 = 30;
	uint(size=6) BLOCK_TYPE_P_MAX     = 30;
	uint(size=6) BLOCK_TYPE_B_MIN     = 31;
	uint(size=6) BLOCK_TYPE_B_MAX     = 53;

	uint(size=4) SLICE_TYPE_B  = 1;


	List(type: uint(size=3),size=8) NumMbPart_P =
		[
			1,2,2,4,4,1,1,1
		];

	List(type: uint(size=3),size=32) NumMbPart_B =
		[
			1,1,1,1,2,2,2,2,2,2,
			2,2,2,2,2,2,2,2,2,2,
			2,2,4,1,1,1,1,1,1,1,
			1,1
		];

	List(type: uint(size=3),size=8) SizeMb_P =
		[
			SZ_16x16, SZ_16x8, SZ_8x16, SZ_8x8, SZ_8x8, SZ_16x16, SZ_16x16, SZ_16x16
		];

	List(type: uint(size=3),size=32) SizeMb_B =
		[
			 SZ_8x8, SZ_16x16, SZ_16x16, SZ_16x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16,
			SZ_16x8,  SZ_8x16,  SZ_16x8,  SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16,
			SZ_16x8,  SZ_8x16,   SZ_8x8,   SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,
			 SZ_8x8,  SZ_8x8
		];

	List(type: List(type: uint(size=3), size=16), size=2) NumSubMbPart =
		[
			[4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 0],
			[1, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

	List(type: List(type: uint(size=3), size=16), size=2) SizeSubMb =
		[
			[SZ_4x4, SZ_8x8, SZ_8x8, SZ_8x8, SZ_8x4, SZ_4x8, SZ_8x4, SZ_4x8, SZ_8x4, SZ_4x8,
			 SZ_4x4, SZ_4x4, SZ_4x4, 0, 0, 0],
			[SZ_8x8, SZ_8x4, SZ_4x8, SZ_4x4, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0]
		];

	List(type: List(type: int(size=16),size=2), size=16) MvTab;
	List(type: int(size=5), size=16) RefIdxTab;

	uint(size=6) mb_type;
	uint(size=3) MbPartIdxMax;
	uint(size=3) MbPartIdx;
	uint(size=3) SizeMbMv;
	uint(size=3) SubMbPartIdxMax;
	uint(size=3) SubMbPartIdx;
	uint(size=3) SizeSubMbMv;
	uint(size=1) Idx_Sub_Tab;


	GetMbType: action
			MbType    :[MacroBlkType]
				==>
		do
			mb_type := MacroBlkType;
			Idx_Sub_Tab   :=
				if(MacroBlkType >= BLOCK_TYPE_B_MIN and MacroBlkType <= BLOCK_TYPE_B_MAX) then
					0
				else
					1
				end;
			MbPartIdx     := 0;
			MbPartIdxMax  :=
				if(MacroBlkType >= BLOCK_TYPE_B_MIN and MacroBlkType <= BLOCK_TYPE_B_MAX) then
					if(MacroBlkType <= BLOCK_TYPE_B_MAX)then
						NumMbPart_B[(MacroBlkType - BLOCK_TYPE_B_MIN) & 31]	
					else
						1
					end
				else
					if(MacroBlkType <= BLOCK_TYPE_P_MAX)then
						NumMbPart_P[(MacroBlkType - BLOCK_TYPE_P_MIN) &  7]
					else
						1
					end
				end;	
			SizeMbMv  :=
				if(MacroBlkType >= BLOCK_TYPE_B_MIN and MacroBlkType <= BLOCK_TYPE_B_MAX) then
					if(MacroBlkType <= BLOCK_TYPE_B_MAX)then	
						SizeMb_B[(MacroBlkType - BLOCK_TYPE_B_MIN) & 31]
					else
						SZ_16x16
					end
				else
					if(MacroBlkType <= BLOCK_TYPE_P_MAX)then
						SizeMb_P[(MacroBlkType - BLOCK_TYPE_P_MIN) &  7]
					else
						SZ_16x16
					end
				end;
		end

	GetMv.Launch16x16: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[16,16]
		guard
			MbPartIdx < MbPartIdxMax,
			SizeMbMv = SZ_16x16
		do
			foreach int i in 0 .. 15
			do
				MvTab[i]     := [Mvx,Mvy];
				RefIdxTab[i] := ref_idx;
			end
			MbPartIdx := MbPartIdx + 1;
		end

	GetMv.Launch16x8: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[16,8]
		guard
			MbPartIdx < MbPartIdxMax,
			SizeMbMv = SZ_16x8
		do
			foreach int i in 0 .. 7
			do
				MvTab[i+(8*(MbPartIdx & 1))] := [Mvx,Mvy];
				RefIdxTab[i+(8*(MbPartIdx & 1))] := ref_idx;
			end
			MbPartIdx := MbPartIdx + 1;
		end

	GetMv.Launch8x16: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[8,16]
		guard
			MbPartIdx < MbPartIdxMax,
			SizeMbMv = SZ_8x16
		do
			foreach int i in 0 .. 3
			do
				MvTab[    i+(4*(MbPartIdx & 1))] := [Mvx,Mvy];
				MvTab[8 + i+(4*(MbPartIdx & 1))] := [Mvx,Mvy];
				RefIdxTab[    i+(4*(MbPartIdx & 1))] := ref_idx;
				RefIdxTab[8 + i+(4*(MbPartIdx & 1))] := ref_idx;
			end
			MbPartIdx := MbPartIdx + 1;
		end

	GetMv.Launch8x8: action
			SubMbType :[ValSubMbType]
				==>
		guard
			MbPartIdx < MbPartIdxMax,
			SizeMbMv  = SZ_8x8
		do
			SubMbPartIdx    := 0;
			SubMbPartIdxMax := NumSubMbPart[Idx_Sub_Tab][ValSubMbType & 15];
			SizeSubMbMv     := SizeSubMb[Idx_Sub_Tab][ValSubMbType & 15];
		end

	SendParameters: action
				==>
			RefIdxOut :[refidx_out] repeat 16,
			MvOut     :[mv_out]     repeat 32	
		guard
			MbPartIdx = MbPartIdxMax
		var
			List(type: uint(size=5),  size=16) refidx_out,
			List(type: int (size=16), size=32) mv_out,
			List(type: uint(size=4),  size=16) InverseScan4x4Tab = [ 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15 ]	
		do
			foreach int i in 0 .. 15
			do
				refidx_out[i] := RefIdxTab[InverseScan4x4Tab[i]];
				mv_out[2*i]   := MvTab[InverseScan4x4Tab[i]][0];
				mv_out[2*i+1] := MvTab[InverseScan4x4Tab[i]][1];
			end	
		end

	GetSubMv.Launch8x8: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[8,8]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			SizeSubMbMv = SZ_8x8
		do
			foreach int i in 0 .. 3
			do
				MvTab[i + 4*(MbPartIdx&3)] := [Mvx,Mvy];
				RefIdxTab[i + 4*(MbPartIdx&3)] := ref_idx;
			end
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetSubMv.Launch8x4: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[8,4]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			SizeSubMbMv = SZ_8x4
		do
			MvTab[4*(MbPartIdx&3) + 2*(SubMbPartIdx&1)]     := [Mvx,Mvy];
			MvTab[4*(MbPartIdx&3) + 2*(SubMbPartIdx&1) + 1] := [Mvx,Mvy];
			RefIdxTab[4*(MbPartIdx&3) + 2*(SubMbPartIdx&1)] := ref_idx;
			RefIdxTab[4*(MbPartIdx&3) + 2*(SubMbPartIdx&1) + 1] := ref_idx;
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetSubMv.Launch4x8: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[4,8]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			SizeSubMbMv = SZ_4x8
		do
			MvTab[4*(MbPartIdx&3) + (SubMbPartIdx&1)]     := [Mvx,Mvy];
			MvTab[4*(MbPartIdx&3) + (SubMbPartIdx&1) + 2] := [Mvx,Mvy];
			RefIdxTab[4*(MbPartIdx&3) + (SubMbPartIdx&1)] := ref_idx;
			RefIdxTab[4*(MbPartIdx&3) + (SubMbPartIdx&1) + 2] := ref_idx;
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetSubMv.Launch4x4: action
			Mv:[Mvx, Mvy],
			RefIdx :[ref_idx]
				==>
			PartSZ :[4,4]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			SizeSubMbMv = SZ_4x4
		do
			MvTab[4*(MbPartIdx&3) + (SubMbPartIdx&3)]     := [Mvx,Mvy];
			RefIdxTab[4*(MbPartIdx&3) + (SubMbPartIdx&3)] := ref_idx;
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetSubMv.Done: action ==>
		guard
			SubMbPartIdx = SubMbPartIdxMax
		do
			MbPartIdx := MbPartIdx + 1;
		end

	schedule fsm GetMbType:
		GetMbType (GetMbType          )--> GetMv;

		GetMv     (GetMv.Launch16x16  )--> GetMv;
		GetMv     (GetMv.Launch16x8   )--> GetMv;	
		GetMv     (GetMv.Launch8x16   )--> GetMv;
		GetMv     (GetMv.Launch8x8    )--> GetSubMv;
		GetMv     (SendParameters     )--> GetMbType;

		GetSubMv  (GetSubMv.Launch8x8 )--> GetSubMv;
		GetSubMv  (GetSubMv.Launch8x4 )--> GetSubMv;
		GetSubMv  (GetSubMv.Launch4x8 )--> GetSubMv;
		GetSubMv  (GetSubMv.Launch4x4 )--> GetSubMv;
		GetSubMv  (GetSubMv.Done      )--> GetMv;
	end

end