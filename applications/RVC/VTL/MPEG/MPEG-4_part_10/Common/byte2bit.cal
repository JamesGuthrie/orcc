// byte2bit.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

// Read in bytes and shift out serially in msb-first order.



actor byte2bit () uint(size=8) in8 ==> uint(size=1) out :

  int(size=4) count := 0;
  int(size=9) buf;

  // Read in an new byte when needed
  reload: action in8:[i] ==>
  guard count = 0
  do
    buf := i;
    count := 8;
  end

  // Write out bits in msb first order
  shift: action ==> out:[ bit ]
  guard
    count != 0
  var
    uint(size=1) bit = if bitand( buf, 128) != 0 then 1 else 0 end
  do
    count := count - 1;
    buf := lshift( buf, 1 );
  end

  //priority
    //reload > shift;
  //end
end