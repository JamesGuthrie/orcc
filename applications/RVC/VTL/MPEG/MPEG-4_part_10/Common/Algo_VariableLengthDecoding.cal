/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
actor Algo_VariableLengthDecoding()
	uint(size=8)  RbspByte,
	bool          NewNal,

	uint(size=3)   TypeOfVLD,
	int (size=32)  VLD_Param,
	bool           EndOfNal
		==>
	int (size=32)  ValDecoded,
	bool           SkipNal
		:


/*
*
* Constants
*
*/

	uint(size=4) READ_BITS             = 0;
	uint(size=4) VLD_UE                = 1;
	uint(size=4) VLD_SE                = 2;
	uint(size=4) BYTE_ALIGNED_REQUIRED = 3;
	uint(size=4) MORE_RBSP_DATA        = 4;
	uint(size=4) CAVLC_COEFF_TOKEN     = 5;
	uint(size=4) CAVLC_LEVEL_PREFIX    = 6;
	uint(size=4) CAVLC_TOTAL_ZEROS     = 7;
	uint(size=4) CAVLC_RUN_BEFORE      = 8;
	uint(size=4) VLD_TE                = 9;

	List(type: List(type: List(type: bool, size=64), size=16), size=6) TotalCoeffValid = 
		[
			[
				// 0 <= nC < 2 ; nbBitRead = 1
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 2
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 3
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 4
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 5
				[ false , false , false , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 6
				[ false , false , false , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 7
				[ false , false , false , false , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 8
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 9
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 10
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 11
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 12
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 13
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 14
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 15
				[ false , true  , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 0 <= nC < 2 ; nbBitRead = 16
				[ false , false , false , false , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			],
			[
				// 2 <= nC < 4 ; nbBitRead = 1
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 2
				[ false , false , true  , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 3
				[ false , false , false , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 4
				[ false , false , false , false , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 5
				[ false , false , false , false , false , false , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 6
				[ false , false , false , false , true  , true  , true  , true  , true  , true ,
				  true  , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 7
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 8
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 9
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 10
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 11
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 12
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 13
				[ false , true  , false , false , false , false , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 14
				[ false , false , false , false , true  , true  , true  , true  , true  , true ,
				  true  , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 15
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 2 <= nC < 4 ; nbBitRead = 16
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			],
			[
				// 4 <= nC < 8 ; nbBitRead = 1
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 2
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 3
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 4
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 5
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 6
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 7
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 8
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 9
				[ false , false , false , false , false , false , false , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 10
				[ false , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 11
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 12
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 13
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 14
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 15
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 4 <= nC < 8 ; nbBitRead = 16
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			],
			[
				// 8 <= nC ; nbBitRead = 1
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 2
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 3
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 4
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 5
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 6
				[ true  , true  , false , true  , true  , true  , true  , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true  , true  , true  , true  , true  , true  , true ,
				  true  , true  , true  , true
				],
				// 8 <= nC ; nbBitRead = 7
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 8
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 9
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 10
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 11
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 12
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 13
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 14
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 15
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// 8 <= nC ; nbBitRead = 16
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			],
			[
				// nC == -1 ; nbBitRead = 1
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 2
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 3
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 4
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 5
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 6
				[ false , false , true  , true  , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 7
				[ true  , false , true  , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 8
				[ false , false , true  , true  , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 9
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 10
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 11
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 12
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 13
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 14
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 15
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -1 ; nbBitRead = 16
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			],
			[
				// nC == -2 ; nbBitRead = 1
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 2
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 3
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 4
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 5
				[ false , true  , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 6
				[ false , true  , false , false , false , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 7
				[ false , false , false , false , false , false , false , false , true  , true ,
				  true  , true  , true  , true  , true  , true  , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 8
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 9
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 10
				[ false , false , false , false , true  , false , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 11
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 12
				[ false , false , false , false , true  , true  , true  , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 13
				[ false , false , false , false , false , false , false , true  , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 14
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 15
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				],
				// nC == -2 ; nbBitRead = 16
				[ false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false , false , false , false , false , false , false,
				  false , false , false , false
				]
			]
		];


	//The first byte is TrailingOnes(coeff_token), the second byte isTotalCoeff(coeff_token)
	List(type: List(type: List(type: uint(size=16), size=64), size=16), size=6) TotalCoeffValue =
		[
			[
				// 0 <= nC < 2 ; nbBitRead = 1
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 2
				[ 0x0000 , 0x0101 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 3
				[ 0x0000 , 0x0202 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 5
				[ 0x0000 , 0x0000 , 0x0000 , 0x0303 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 6
				[ 0x0000 , 0x0000 , 0x0000 , 0x0304 , 0x0102 , 0x0001 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 7
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0305 , 0x0203 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0306 , 0x0204 , 0x0103 , 0x0002 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0307 , 0x0205 , 0x0104 , 0x0003 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 10
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0308 , 0x0206 , 0x0105 , 0x0004 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0309 , 0x0207 , 0x0106 , 0x0005 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 13
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0008 , 0x0209 ,
				  0x0108 ,  0x007 , 0x030A , 0x0208 , 0x0107 , 0x0006 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x030C , 0x020B ,
				  0x010A , 0x000A , 0x030B , 0x020A , 0x0109 , 0x0009 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 15
				[ 0x0000 , 0x010D , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x030E , 0x020D ,
				  0x010C , 0x000C , 0x030D , 0x020C , 0x010B , 0x000B , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 0 <= nC < 2 ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0010 , 0x0210 , 0x0110 , 0x000F , 0x0310 , 0x020F ,
				  0x010F , 0x000E , 0x030F , 0x020E , 0x010E , 0x000D , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			],
			[
				// 2 <= nC < 4 ; nbBitRead = 1
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 2
				[ 0x0000 , 0x0000 , 0x0101 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 3
				[ 0x0000 , 0x0000 , 0x0000 , 0x0202 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0304 , 0x0303 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 5
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0305 , 0x0102 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 6
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0307 , 0x0204 , 0x0104 , 0x0002 , 0x0306 , 0x0203 ,
				  0x0103 , 0x0001 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 7
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0308 , 0x0205 , 0x0105 , 0x0003 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0005 , 0x0206 , 0x0106 , 0x0004 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0309 , 0x0207 , 0x0107 , 0x0006 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 10
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x030B , 0x0209 ,
				  0x0109 , 0x0008 , 0x030A , 0x0208 , 0x0108 ,  0x007 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x000B , 0x020B ,
				  0x010B , 0x000A , 0x030C , 0x020A , 0x010A , 0x0009 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 13
				[ 0x0000 , 0x030F , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x020E , 0x000E , 0x030E , 0x020D ,
				  0x010D , 0x000D , 0x030D , 0x020C , 0x010C , 0x000C , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0310 , 0x0210 , 0x0110 , 0x0010 , 0x010F , 0x000F ,
				  0x020F , 0x010E , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 15
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 2 <= nC < 4 ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			],
			[
				// 4 <= nC < 8 ; nbBitRead = 1
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 2
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 3
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0307 , 0x0306 ,
				  0x0305 , 0x0304 , 0x0303 , 0x0202 , 0x0101 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 5
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0105 , 0x0205 ,
				  0x0104 , 0x0204 , 0x0103 , 0x0308 , 0x0203 , 0x0102 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 6
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0003 , 0x0207 ,
				  0x0107 , 0x0002 , 0x0309 , 0x0206 , 0x0106 , 0x0001 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 7
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,  0x007 , 0x0006 ,
				  0x0209 , 0x0005 , 0x030A , 0x0208 , 0x0108 , 0x0004 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x030C , 0x030C , 0x020B ,
				  0x010A , 0x0009 , 0x030B , 0x020A , 0x0109 , 0x0008 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x010D , 0x000C , 0x020D ,
				  0x010C , 0x000B , 0x030D , 0x020C , 0x010B , 0x000A , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 10
				[ 0x0000 , 0x0010 , 0x0310 , 0x0210 , 0x0110 , 0x000F , 0x030F , 0x020F , 0x010F , 0x000E ,
				  0x030E , 0x020E , 0x010E , 0x000D , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 13
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 15
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 4 <= nC < 8 ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			],
			[
				// 8 <= nC ; nbBitRead = 1
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 2
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 3
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 5
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 6
				[ 0x0001 , 0x0101 , 0x0000 , 0x0000 , 0x0002 , 0x0102 , 0x0202 , 0x0000 , 0x0003 , 0x0103 ,
				  0x0203 , 0x0303 , 0x0004 , 0x0104 , 0x0204 , 0x0304 , 0x0005 , 0x0105 , 0x0205 , 0x0305 ,
				  0x0006 , 0x0106 , 0x0206 , 0x0306 ,  0x007 , 0x0107 , 0x0207 , 0x0307 , 0x0008 , 0x0108 ,
				  0x0208 , 0x0308 , 0x0009 , 0x0109 , 0x0209 , 0x0309 , 0x000A , 0x010A , 0x020A , 0x030A ,
				  0x000B , 0x010B , 0x020B , 0x030B , 0x000C , 0x010C , 0x020C , 0x030C , 0x000D , 0x010D ,
				  0x020D , 0x030D , 0x000E , 0x010E , 0x020E , 0x030E , 0x000F , 0x010F , 0x020F , 0x030F ,
				  0x0010 , 0x0110 , 0x0210 , 0x0310
				],
				// 8 <= nC ; nbBitRead = 7
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 10
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 13
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 15
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// 8 <= nC ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			],
			[
				// nC == -1 ; nbBitRead = 1
				[ 0x0000 , 0x0101 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 2
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 3
				[ 0x0000 , 0x0202 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 5
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 6
				[ 0x0000 , 0x0000 , 0x0004 , 0x0003 , 0x0002 , 0x0303 , 0x0102 , 0x0001 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 7
				[ 0x0304 , 0x0000 , 0x0203 , 0x0103 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0204 , 0x0104 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 10
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 13
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 15
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -1 ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			],
			[
				// nC == -2 ; nbBitRead = 1
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 2
				[ 0x0000 , 0x0101 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 3
				[ 0x0000 , 0x0202 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 4
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 5
				[ 0x0000 , 0x0303 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 6
				[ 0x0000 , 0x0304 , 0x0000 , 0x0000 , 0x0000 , 0x0206 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 7
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0306 , 0x0305 ,
				  0x0204 , 0x0203 , 0x0103 , 0x0102 , 0x0002 , 0x0001 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 8
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 9
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0205 , 0x0104 , 0x0004 , 0x0003 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 10
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0307 , 0x0000 , 0x0105 , 0x0005 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 11
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0308 , 0x0207 , 0x0106 , 0x0006 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 12
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0208 , 0x0108 , 0x0107 ,  0x007 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 13
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0008 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 14
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 15
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				],
				// nC == -2 ; nbBitRead = 16
				[ 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 , 0x0000 ,
				  0x0000 , 0x0000 , 0x0000 , 0x0000
				]
			]
		];

	List(type: List(type: List(type: List(type: bool        , size=8), size=16), size=16), size=3) TotalZerosValid =
		[
			[
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 1
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 2
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 3
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 1
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 2
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 1
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				]
			],
			[
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 1
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 3
					[ false, false , true  , true  , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 4
					[ false, true  , true  , true  , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 5
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 2
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 3
					[ true , true  , false , false , true  , true  , true  , true  ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 2
					[ false, true  , true  , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 3
					[ true , true  , false , false , false , false , true  , true  ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 2
					[ true , true  , true  , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 3
					[ false, false , false , false , false , false , true  , true  ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 2
					[ true , true  , true  , true  , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 1
					[ false, true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 2
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 1
					[ true , true  , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				]
			],
			[
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 1
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 3
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 4
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 5
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 6
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 7
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 8
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 9
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 10
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 11
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 12
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 13
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 14
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 15
					[ false, false , false , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 0
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 1
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 2
					[ false, false , false , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 3
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 4
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 5
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 6
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 7
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 8
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 9
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 3
					[ false , false , false  , true  , true  , true  , true  , true  ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 4
					[ false , false , true   , true  , true  , true  , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 5
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 6
					[ true  , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 3
					[ false , false , false  , true  , true  , true  , true  , true  ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 4
					[ false , false , true   , true  , true  , true  , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 5
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 6
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 3
					[ false , false , false  , true  , true  , true  , true  , true  ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 4
					[ false , false , true   , true  , true  , true  , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 5
					[ true  , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 3
					[ false , false , false  , true  , true  , true  , true  , true  ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 4
					[ false , true  , true   , true  , true  , true  , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 5
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 3
					[ false , true  , true   , true  , true  , true  , true  , true  ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 4
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 5
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 6
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 2
					[ false , false , false  , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 3
					[ false , true  , true   , true  , true  , true  , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 4
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 5
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 6
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 2
					[ false , false , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 3
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 4
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 5
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 6
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 2
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 3
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 4
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 5
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 6
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 1
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 2
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 3
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 4
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 5
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 1
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 3
					[ false , true  , true   , true  , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 4
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 5
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 1
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 2
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 3
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 4
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 5
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 1
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 2
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 3
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 4
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 5
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 1
					[ false , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 2
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 3
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 4
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 5
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 0
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 1
					[ true  , true  , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 2
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 3
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 4
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 5
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 6
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 7
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 8
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 9
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 10
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 11
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 12
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 13
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 14
					[ false , false , false  , false , false , false , false , false ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 15
					[ false , false , false  , false , false , false , false , false ]
				]
			]
		];

	List(type: List(type: List(type: List(type: uint(size=4), size=8), size=16), size=16), size=3) TotalZerosValue=
		[
			[
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 0 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 2
					[  0,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 3
					[  3,  2 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 1 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 2
					[  2,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 2 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 1
					[  1,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 3 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 4 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 5 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 6 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 7 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 8 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 9 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 10 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 11 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 12 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 13 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 14 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 4 ; TotalCoeff = 15 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				]
			],
			[
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 0 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 3
					[  0,  0 ,  1 ,  2 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 4
					[  0,  5 ,  3 ,  4 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 5
					[  7,  6 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 1 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 2
					[  0,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 3
					[  0,  2 ,  0 ,  0 ,  3 ,  4 ,  5 ,  6 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 2 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 2
					[  0,  2 ,  3 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 3
					[  0,  1 ,  0 ,  0 ,  0 ,  0 ,  4 ,  5 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 3 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 2
					[  1,  2 ,  3 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  4 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 4 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 2
					[  0,  1 ,  2 ,  3 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 5 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 1
					[  0,  2 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 2
					[  0,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 6 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 1
					[  0,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 7 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 8 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 9 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 10 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 11 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 12 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 13 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 14 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff = 8 ; TotalCoeff = 15 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				]
			],
			[
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 0
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 1
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 2
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 3
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 4
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 5
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 6
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 7
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 8
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 9
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 10
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 11
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 12
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 13
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 14
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 0 ; nbBitRead = 15
					[  0,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 0
					[  0: for int i in 0 .. 7 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 1
					[  0 ,  0 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 2
					[  0: for int i in 0 .. 7 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 3
					[  0 ,  0 ,  2  ,  1 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 4
					[  0 ,  0 ,  4  ,  3 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 5
					[  0 ,  0 ,  6  ,  5 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 6
					[  0 ,  0 ,  8  ,  7 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 7
					[  0 ,  0 , 10  ,  9 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 8
					[  0 ,  0 , 12  , 11 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 9
					[  0 , 15 , 14  , 13 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 1 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 3
					[  0 ,  0 ,  0  ,  4 ,  3 ,  2 ,  1 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 4
					[  0 ,  0 ,  8  ,  7 ,  6 ,  5 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 5
					[  0 ,  0 , 10  ,  9 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 6
					[ 14 , 13 , 12  , 11 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 2 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 3
					[  0 ,  0 ,  0  ,  7 ,  6 ,  3 ,  2 ,  1 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 4
					[  0 ,  0 ,  8  ,  5 ,  4 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 5
					[  0 , 12 , 10  ,  9 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 6
					[ 13 , 11 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 3 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 3
					[  0 ,  0 ,  0  ,  8 ,  6 ,  5 ,  4 ,  1 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 4
					[  0 ,  0 ,  9  ,  7 ,  3 ,  2 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 5
					[ 12 , 11 , 10  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 6
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 4 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 3
					[  0 ,  0 ,  0  ,  7 ,  6 ,  5 ,  4 ,  3 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 4
					[  0 , 10 ,  8  ,  2 ,  1 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 5
					[ 11 ,  9 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 6
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 5 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 3
					[  0 ,  9 ,  7  ,  6 ,  5 ,  4 ,  3 ,  2 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 4
					[  0 ,  8 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 5
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 6
					[ 10 ,  0 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 6 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 2
					[  0 ,  0 ,  0  ,  5 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 3
					[  0 ,  8 ,  6  ,  4 ,  3 ,  2 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 4
					[  0 ,  7 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 5
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 6
					[  9 ,  0 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 7 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 2
					[  0 ,  0 ,  5  ,  4 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 3
					[  0 ,  7 ,  6  ,  3 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 4
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 5
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 6
					[  8 ,  0 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 8 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 2
					[  0 ,  6 ,  4  ,  3 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 3
					[  0 ,  5 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 4
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 5
					[  0 ,  7 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 6
					[  1 ,  0 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 9 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 1
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 2
					[  0 ,  5 ,  4  ,  3 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 3
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 4
					[  0 ,  6 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 5
					[  1,  0,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 6
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 7
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 8
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 9
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 10
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 11
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 12
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 13
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 14
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 10 ; nbBitRead = 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 1
					[  0 ,  4 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 2
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 3
					[  0 ,  2 ,  3  ,  5 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 4
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 11 ; nbBitRead = 5 .. 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 1
					[  0 ,  3 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 2
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 3
					[  0 ,  4 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 4
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 12 ; nbBitRead = 5 .. 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 1
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 2
					[  0 ,  3 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 3
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 13 ; nbBitRead = 4 .. 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 1
					[  0 ,  2 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 2
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 14 ; nbBitRead = 3 .. 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				],
				[
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 0
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 1
					[  0 ,  1 ,  0  ,  0 ,  0 ,  0 ,  0 ,  0 ],
					// MaxNumCoeff != 4 and MaxNumCoeff != 8 ; TotalCoeff = 15 ; nbBitRead = 2 .. 15
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ],
					[  0 ,  0 ,  0 ,  0 ,   0 ,  0 ,  0 ,  0 ]
				]
			]
		];


	List(type: List(type: List(type: bool, size=8), size=16), size=7) RunBeforeValid = 
		[
			[	//zerosLeft = 1 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ true  , true  , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft = 2 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ true  , true  , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft = 3 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ true  , true  , true  , true  , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft = 4 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , true  , true  , true  , false , false , false , false ],
				[ true  , true  , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft = 5 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , true  , true  , false , false , false , false ],
				[ true  , true  , true  , true  , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft = 6 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , true  , false , false , false , false ],
				[ true  , true  , true  , true  , true  , true  , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			],
			[	//zerosLeft > 6 ; nbBitRead = 0 .. 15
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , true  , true  , true  , true  , true  , true  , true  ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , true  , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ],
				[ false , false , false , false , false , false , false , false ]
			]
		];

	List(type: List(type: List(type: uint(size=4), size=8), size=16), size=7) RunBeforeValue = 
		[
			[	//zerosLeft = 1 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft = 2 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  2 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft = 3 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  3 ,  2 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft = 4 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  2 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  4 ,  3 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft = 5 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  1 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  5 ,  4 ,  3 ,  2 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft = 6 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  1 ,  2 ,  4 ,  3 ,  6 ,  5 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			],
			[	//zerosLeft > 6 ; nbBitRead = 0 .. 15
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  6 ,  5 ,  4 ,  3 ,  2 ,  1 ,  0 ],
				[  0 ,  7 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  8 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  9 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 , 10 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 , 11 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 , 12 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 , 13 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 , 14 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
				[  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ]
			]
		];

/*
*
* State variables
*
*/

	uint(size=16) WorkingByte      := 0;
	uint(size=3)  CountBufferRbsp  := 0;
	uint(size=3)  SizeBufferRbsp   := 0;

	List(type: uint(size=8), size=4) BufferRbsp := [0: for int s in 0 .. 3];

	/* ue(v) and Cavlc coeff_token()*/
	bool          Bit1Found       := false;
	uint(size=5)  leadingZeroBits := 0;
	/* ue(v) only */
	int (size=31) CodeNum         := 0;

	/* u(n) */
	uint(size=5)  BitsCount       := 0;
	uint(size=31) ReadValue       := 0;
	uint(size=1)  TeVal           := 0;

	/* more_rbsp_data() */
	bool          NewNalAlreadyDetected  := false;

	/* Cavlc */
	uint(size=5) NbBitsRead;

	/* Cavlc coeff_token */
	uint(size=3) Idx_nC;
	uint(size=6) coeff_token;

	/* Cavlc total_zeros and run_before */
	uint(size=3) ValRead         := 0;

	/* Cavlc total_zeros */
	uint(size=2) IdxmaxNumCoeff  := 0;
	uint(size=4) TotalCoeffParam := 0;

	/* Cavlc run_before */
	uint(size=8) IdxzerosLeft    := 0;

/*
*
* Function
*
*/

	function mask_bits( int(size=32)v, int(size=32)n ) --> int :
		bitand( v, lshift(1,n)-1 )
	end


/*
*
* Actions
*
*/

	IsEndOfNal: action
			EndOfNal :[ValEndOfNal]
				==>
			SkipNal  :[true]
		guard
			ValEndOfNal = true
		do
			CountBufferRbsp := 0;
			SizeBufferRbsp  := 0;
//			println("EndOfNal");
		end


	WaitForNewNal: action
			NewNal       :[IsNewNal],
			RbspByte     :[ValRbsp]
				==>
		guard
			IsNewNal = false
		do
//			println("Skip : "+ValRbsp);	
		end


	NewNalDetected: action
			NewNal :[IsNewNal]
				==>
		guard
			IsNewNal = true
		do
			SizeBufferRbsp := 0;
//			println("NewNalDetected");	
		end


	NewNalHasBeenSent: action ==>
		guard
			NewNalAlreadyDetected = true
		end

	ResetNewNalAlreadyDetected: action ==>
		do
			NewNalAlreadyDetected := false;
		end


	IsMoreRbspData: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = MORE_RBSP_DATA
		end


	CheckSizeBufferRbsp.IsEqualOrSupTo2: action
				==>
			ValDecoded :[1]
		guard
			SizeBufferRbsp >= 2
		end


	CheckSizeBufferRbsp.IsEqualTo1: action
				==>
			ValDecoded :[IsMoreDataInRbsp]
		guard
			SizeBufferRbsp = 1
		var
			uint(size=1) IsMoreDataInRbsp
		do
			if( ((WorkingByte = 0 and BufferRbsp[0] = 3) or (BufferRbsp[0] = 0x80)) and (CountBufferRbsp = 0) )then
				IsMoreDataInRbsp := 0;
			else
				IsMoreDataInRbsp := 1;
			end
		end


	CheckSizeBufferRbsp.IsEqualTo0: action
				==>
			ValDecoded :[IsMoreDataInRbsp]
		guard
			SizeBufferRbsp = 0
		var
			uint(size=1) IsMoreDataInRbsp
		do
			if( bitand(WorkingByte,0xFF) = 0x80 )then
				IsMoreDataInRbsp := 0;
			else
				IsMoreDataInRbsp := 1;
			end
		end


	FillBufferRbsp: action
			RbspByte :[ValRbspByte],
			NewNal   :[ValNewNal]
				==>
		guard
			SizeBufferRbsp        < 4,
			ValNewNal             = false,
			NewNalAlreadyDetected = false
		do
			BufferRbsp[3]  := BufferRbsp[2];
			BufferRbsp[2]  := BufferRbsp[1];
			BufferRbsp[1]  := BufferRbsp[0];
			BufferRbsp[0]  := ValRbspByte;
			SizeBufferRbsp := SizeBufferRbsp + 1;
		end


	FutureNewNalDetected: action
			NewNal :[IsNewNal]
				==>
		guard
			IsNewNal              = true,
			NewNalAlreadyDetected = false
		do
			NewNalAlreadyDetected := true;
		end


	IsVldUe: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = VLD_UE
		do
			Bit1Found       := false;
			leadingZeroBits := 0;
			CodeNum         := 0;
			//println("IsVldUe");
		end


	IsVldSe: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = VLD_SE
		do
			Bit1Found       := false;
			leadingZeroBits := 0;
			CodeNum         := 0;
			//println("IsVldSe");
		end


	IsReadBits: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[ValNbBits]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = READ_BITS
		do
			BitsCount := ValNbBits;
			ReadValue := 0;
			TeVal     := 0;
			//println("IsReadBits");
		end


	IsVldTe.u: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[TypeOfVld]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = VLD_TE,
			TypeOfVld    = 1
		do
			BitsCount := 1;
			ReadValue := 0;
			TeVal     := 1;
			//println("IsVldTeu");
		end


	IsVldTe.ue: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[TypeOfVld]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = VLD_TE,
			TypeOfVld    > 1
		do
			Bit1Found       := false;
			leadingZeroBits := 0;
			CodeNum         := 0;
			//println("IsVldTeue");
		end


	IsCavlcCoeffToken: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[nC]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = CAVLC_COEFF_TOKEN
		do
			if(nC < 0)then
				if(nC = -1)then
					Idx_nC := 4;
				else
					Idx_nC := 5;
				end
			else
				if(nC >=8)then
					Idx_nC := 3;
				else
					if(nC >=4)then
						Idx_nC := 2;
					else
						Idx_nC := rshift(nC,1);
					end
				end
			end
			coeff_token := 0;
			NbBitsRead := 0;
		end


	IsCavlcTotalZeros: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[maxNumCoeff , TotalCoeff]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = CAVLC_TOTAL_ZEROS
		do
			IdxmaxNumCoeff :=
				if(maxNumCoeff = 4) then
					0
				else
					if(maxNumCoeff=8) then
						1
					else
						2
					end
				end;
			NbBitsRead      := 0;
			ValRead         := 0;
			TotalCoeffParam := bitand(TotalCoeff,0x0F);
		end


	IsCavlcRunBefore: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal],
			VLD_Param :[zerosLeft]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = CAVLC_RUN_BEFORE
		do
			IdxzerosLeft :=
				if(zerosLeft <= 6 and zerosLeft > 0) then
					zerosLeft - 1
				else
					6
				end;
			NbBitsRead      := 0;
			ValRead         := 0;
		end


	IsCavlcLevelPrefix: action
			TypeOfVLD :[ValTypeOfVLD],
			EndOfNal  :[ValEndOfNal]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = CAVLC_LEVEL_PREFIX
		do
			Bit1Found       := false;
			leadingZeroBits := 0;
		end


	IsByteAligned: action
			TypeOfVLD    :[ValTypeOfVLD],
			EndOfNal     :[ValEndOfNal]
				==>
		guard
			ValEndOfNal  = false,
			ValTypeOfVLD = BYTE_ALIGNED_REQUIRED
		do
			CountBufferRbsp := 0;
//			println("IsByteAligned");
		end


	Buffer.IsEmpty: action
				==>
		guard
			CountBufferRbsp = 0,
			SizeBufferRbsp  > 0
		do
			CountBufferRbsp := 8;
			SizeBufferRbsp  := SizeBufferRbsp - 1;
			WorkingByte     := BufferRbsp[SizeBufferRbsp];
		end


	Buffer.IsNotEmpty: action ==>
		guard
			CountBufferRbsp > 0
		end


	GetCodeNum.Launch: action ==>
		var
			uint(size=5) NbBitsToAdd
		do
			if(not Bit1Found)then
				while( (bitand(WorkingByte,0x80) = 0) and (CountBufferRbsp > 0))
				do
					CountBufferRbsp := CountBufferRbsp - 1;
					WorkingByte     := lshift(WorkingByte,1);
					leadingZeroBits := leadingZeroBits + 1;
				end
				if(CountBufferRbsp > 0)then
					leadingZeroBits := leadingZeroBits + 1;
					Bit1Found       := true;
				end
			end
			if(Bit1Found)then
				NbBitsToAdd :=
					if(CountBufferRbsp < leadingZeroBits)then
						CountBufferRbsp
					else
						leadingZeroBits
					end;
				CodeNum         := lshift(CodeNum,NbBitsToAdd);
				CodeNum         := CodeNum + mask_bits( rshift(WorkingByte,8-NbBitsToAdd) , NbBitsToAdd);
				leadingZeroBits := leadingZeroBits - NbBitsToAdd;
				WorkingByte     := lshift(WorkingByte,NbBitsToAdd);
				CountBufferRbsp := CountBufferRbsp - NbBitsToAdd;
			end
		end


	GetCodeNum.Finished: action ==>
		guard
			leadingZeroBits = 0
		end


	GetCodeNum.NotFinished: action ==>
		guard
			leadingZeroBits != 0
		end


	SendUeValue: action
				==>
			ValDecoded :[CodeNum]
		do
			CodeNum := CodeNum - 1;
			//println("\tUeValue:"+CodeNum);
		end


	SendSeValue: action
				==>
			ValDecoded :[CodeNum]
		do
			//CodeNum computed is equal to CodeNum + 1
			if( (CodeNum mod 2) = 0 )then
				CodeNum := CodeNum / 2;
			else
				CodeNum := -CodeNum / 2;
			end
			//println("\tSeValue:"+CodeNum);
		end


	Get_u.Launch: action ==>
		var
			uint(size=5) NbBitsToAdd
		do
			NbBitsToAdd :=
				if(CountBufferRbsp < BitsCount)then
					CountBufferRbsp
				else
					BitsCount
				end;
			ReadValue       := lshift(ReadValue,NbBitsToAdd);
			ReadValue       := ReadValue + mask_bits( rshift(WorkingByte,8-NbBitsToAdd) , NbBitsToAdd);
			BitsCount       := BitsCount - NbBitsToAdd;
			WorkingByte     := lshift(WorkingByte,NbBitsToAdd);
			CountBufferRbsp := CountBufferRbsp - NbBitsToAdd;
		end


	Get_u.Finished: action ==>
		guard
			BitsCount = 0
		end


	Get_u.NotFinished: action ==>
		guard
			BitsCount != 0
		end


	SendUValue: action
				==>
			ValDecoded :[ReadValue]
		var
			uint(size=31) ValueDec
		do
			ValueDec := bitxor(ReadValue,TeVal);
			//println("\t\tRead Value u(n):"+ValueDec+" Te:"+TeVal);
		end


	GetCavlcCoeffToken.Launch: action ==>
		var
			//delete me!
			bool titi
		do
			coeff_token     := lshift(coeff_token, 1);
			coeff_token     := coeff_token + mask_bits(rshift(WorkingByte,7),1);
//			println("Cavlc bit1:"+mask_bits(rshift(WorkingByte,7),1));
			WorkingByte     := lshift(WorkingByte,1);
			CountBufferRbsp := CountBufferRbsp - 1;
			NbBitsRead      := NbBitsRead + 1;
			titi := TotalCoeffValid[Idx_nC][bitand(NbBitsRead - 1,0x0F)][bitand(coeff_token,63)];
			while((not titi) and (CountBufferRbsp > 0))
			do
				coeff_token     := lshift(coeff_token, 1);
				coeff_token     := coeff_token + mask_bits(rshift(WorkingByte,7),1);
//			println("Cavlc bit:"+mask_bits(rshift(WorkingByte,7),1));
				WorkingByte     := lshift(WorkingByte,1);
				CountBufferRbsp := CountBufferRbsp - 1;
				NbBitsRead      := NbBitsRead + 1;
				titi := TotalCoeffValid[Idx_nC][bitand(NbBitsRead - 1,0x0F)][bitand(coeff_token,63)];
//			if(TotalCoeffValid[Idx_nC][bitand(NbBitsRead - 1,0x0F)][bitand(coeff_token,63)])then
//				println("youpi!");
//			end
			end
		end

	GetCavlcCoeffToken.NotFinished: action ==>
		guard
			TotalCoeffValid[Idx_nC][bitand(NbBitsRead - 1,0x0F)][bitand(coeff_token,63)] = false
		end

	GetCavlcCoeffToken.Finished: action
			==>
			ValDecoded :[TotalCoeffValue[Idx_nC][bitand(NbBitsRead - 1,0x0F)][bitand(coeff_token,63)]]
		do
			println("Cavlc CoeffToken; Idx_nc :" + Idx_nC + " ; NbBitsRead : "+NbBitsRead+ " ; coeff_token : "+coeff_token);
		end


	GetCavlcLevelPrefix.Launch: action ==>
		do
			while( (bitand(WorkingByte,0x80) = 0) and (CountBufferRbsp > 0))
			do
				CountBufferRbsp := CountBufferRbsp - 1;
				WorkingByte     := lshift(WorkingByte,1);
				leadingZeroBits := leadingZeroBits + 1;
			end
			if(CountBufferRbsp > 0)then
				Bit1Found       := true;
				/* We read the one bit value */
				CountBufferRbsp := CountBufferRbsp - 1;
				WorkingByte     := lshift(WorkingByte,1);
			end
		end


	GetCavlcLevelPrefix.NotFinished: action ==>
		guard
			not Bit1Found
		end


	GetCavlcLevelPrefix.Finished: action
				==>
			ValDecoded :[leadingZeroBits]
		guard
			Bit1Found
		end


	GetCavlcTotalZeros.Launch: action ==>
		var
			//delete me!
			bool titi
		do
			ValRead         := lshift(ValRead, 1);
			ValRead         := ValRead + mask_bits(rshift(WorkingByte,7),1);
			WorkingByte     := lshift(WorkingByte,1);
			CountBufferRbsp := CountBufferRbsp - 1;
			NbBitsRead      := NbBitsRead + 1;
			titi := TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)];
			while((not titi) and (CountBufferRbsp > 0))
			do
				ValRead         := lshift(ValRead, 1);
				ValRead         := ValRead + mask_bits(rshift(WorkingByte,7),1);
				WorkingByte     := lshift(WorkingByte,1);
				CountBufferRbsp := CountBufferRbsp - 1;
				NbBitsRead      := NbBitsRead + 1;
				titi := TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)];
			end
		end

	GetCavlcTotalZeros.NotFinished: action ==>
		guard
			not TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)]
		end

	GetCavlcTotalZeros.Finished: action
				==>
			ValDecoded :[TotalZerosValue[IdxmaxNumCoeff][TotalCoeffParam][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)]]
		do
			println("Cavlc TotalZeros; Idx :" + IdxmaxNumCoeff +" ; TotalCoeff :"+TotalCoeffParam+ " ; NbBitsRead : "+NbBitsRead+ " ; Codeword : "+ValRead);
		end


	GetCavlcRunBefore.Launch: action ==>
		var
			//delete me!
			bool titi
		do
			ValRead         := lshift(ValRead, 1);
			ValRead         := ValRead + mask_bits(rshift(WorkingByte,7),1);
			WorkingByte     := lshift(WorkingByte,1);
			CountBufferRbsp := CountBufferRbsp - 1;
			NbBitsRead      := NbBitsRead + 1;
			titi := RunBeforeValid[IdxzerosLeft][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)];
			while((not titi) and (CountBufferRbsp > 0))
			do
				ValRead         := lshift(ValRead, 1);
				ValRead         := ValRead + mask_bits(rshift(WorkingByte,7),1);
				WorkingByte     := lshift(WorkingByte,1);
				CountBufferRbsp := CountBufferRbsp - 1;
				NbBitsRead      := NbBitsRead + 1;
				titi := RunBeforeValid[IdxzerosLeft][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)];
			end
		end

	GetCavlcRunBefore.NotFinished: action ==>
		guard
			not RunBeforeValid[IdxzerosLeft][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)]
		end

	GetCavlcRunBefore.Finished: action
				==>
			ValDecoded :[RunBeforeValue[IdxzerosLeft][bitand(NbBitsRead,0x0F)][bitand(ValRead,7)]]
		end

/*
*
* Scheduler
*
*/

	schedule fsm CheckVLDType:
		CheckVLDType    (IsEndOfNal                          )--> WaitForNewNal;
		CheckVLDType    (IsByteAligned                       )--> CheckVLDType;
		CheckVLDType    (IsVldUe                             )--> VLDecoding_Ue;
		CheckVLDType    (IsVldSe                             )--> VLDecoding_Se;
		CheckVLDType    (IsVldTe.ue                          )--> VLDecoding_Ue;
		CheckVLDType    (IsVldTe.u                           )--> Decode_u;
		CheckVLDType    (IsReadBits                          )--> Decode_u;
		CheckVLDType    (IsMoreRbspData                      )--> FillBuffer;
		CheckVLDType    (IsCavlcLevelPrefix                  )--> DecCavlcLevPre;
		CheckVLDType    (IsCavlcCoeffToken                   )--> DecCavlcCofTkn;
		CheckVLDType    (IsCavlcTotalZeros                   )--> DecCavlcTotZer;
		CheckVLDType    (IsCavlcRunBefore                    )--> DecCavlcRunBef;
		CheckVLDType    (FillBufferRbsp                      )--> CheckVLDType;

		/* more_rbsp_data() */
		FillBuffer      (FillBufferRbsp                      )--> FillBuffer;
		FillBuffer      (FutureNewNalDetected                )--> CheckBuffer;
		FillBuffer      (CheckSizeBufferRbsp.IsEqualOrSupTo2 )--> CheckVLDType;
		FillBuffer      (NewNalHasBeenSent                   )--> CheckBuffer;

		CheckBuffer     (CheckSizeBufferRbsp                 )--> CheckVLDType;

		/* Skip the others values of the Rbsp */
		WaitForNewNal   (NewNalHasBeenSent                   )--> ResetNewNal;
		WaitForNewNal   (WaitForNewNal                       )--> WaitForNewNal2;
		WaitForNewNal   (NewNalDetected                      )--> CheckVLDType;

		ResetNewNal     (ResetNewNalAlreadyDetected          )--> CheckVLDType;

		WaitForNewNal2  (WaitForNewNal                       )--> WaitForNewNal2;
		WaitForNewNal2  (NewNalDetected                      )--> CheckVLDType;

		/* ue(v) decoding process */
		VLDecoding_Ue   (Buffer                              )--> GetCodeNum4ue;
		VLDecoding_Ue   (FillBufferRbsp                      )--> VLDecoding_Ue;

		GetCodeNum4ue   (GetCodeNum.Launch                   )--> CheckCodeNum4ue;

		CheckCodeNum4ue (GetCodeNum.NotFinished              )--> VLDecoding_Ue;
		CheckCodeNum4ue (GetCodeNum.Finished                 )--> SendUeValue;

		SendUeValue     (SendUeValue                         )--> CheckVLDType;


		/* se(v) decoding process */
		VLDecoding_Se   (Buffer                              )--> GetCodeNum4se;
		VLDecoding_Se   (FillBufferRbsp                      )--> VLDecoding_Se;

		GetCodeNum4se   (GetCodeNum.Launch                   )--> CheckCodeNum4se;

		CheckCodeNum4se (GetCodeNum.NotFinished              )--> VLDecoding_Se;
		CheckCodeNum4se (GetCodeNum.Finished                 )--> SendUeValse;

		SendUeValse     (SendSeValue                         )--> CheckVLDType;


		/* u(n) decoding process */
		Decode_u        (Buffer                              )--> Get_u;
		Decode_u        (FillBufferRbsp                      )--> Decode_u;

		Get_u           (Get_u.Launch                        )--> Check_u_Val;

		Check_u_Val     (Get_u.NotFinished                   )--> Decode_u;
		Check_u_Val     (Get_u.Finished                      )--> SendUValue;

		SendUValue      (SendUValue                          )--> CheckVLDType;


		/* Cavlc coeff_token() decoding process */
		DecCavlcCofTkn  (Buffer                              )--> GetCavlcCofTkn;
		DecCavlcCofTkn  (FillBufferRbsp                      )--> DecCavlcCofTkn;

		GetCavlcCofTkn   (GetCavlcCoeffToken.Launch          )--> ChckCavlcCofTkn;

		ChckCavlcCofTkn (GetCavlcCoeffToken.NotFinished      )--> DecCavlcCofTkn;
		ChckCavlcCofTkn (GetCavlcCoeffToken.Finished         )--> CheckVLDType;

		/* Cavlc level_prefix decoding process */
		DecCavlcLevPre  (Buffer                              )--> GetCavlcLevPre;
		DecCavlcLevPre  (FillBufferRbsp                      )--> DecCavlcLevPre;

		GetCavlcLevPre  (GetCavlcLevelPrefix.Launch          )--> ChckCavlcLevPre;

		ChckCavlcLevPre (GetCavlcLevelPrefix.NotFinished     )--> DecCavlcLevPre;
		ChckCavlcLevPre (GetCavlcLevelPrefix.Finished        )--> CheckVLDType;

		/* Cavlc total_zeros decoding process */
		DecCavlcTotZer  (Buffer                              )--> GetCavlcTotZer;
		DecCavlcTotZer  (FillBufferRbsp                      )--> DecCavlcTotZer;

		GetCavlcTotZer  (GetCavlcTotalZeros.Launch          )--> ChckCavlcTotZer;

		ChckCavlcTotZer (GetCavlcTotalZeros.NotFinished     )--> DecCavlcTotZer;
		ChckCavlcTotZer (GetCavlcTotalZeros.Finished        )--> CheckVLDType;

		/* Cavlc run_before decoding process */
		DecCavlcRunBef  (Buffer                              )--> GetCavlcRunBef;
		DecCavlcRunBef  (FillBufferRbsp                      )--> DecCavlcRunBef;

		GetCavlcRunBef  (GetCavlcRunBefore.Launch            )--> ChckCavlcRunBef;

		ChckCavlcRunBef (GetCavlcRunBefore.NotFinished     )--> DecCavlcRunBef;
		ChckCavlcRunBef (GetCavlcRunBefore.Finished        )--> CheckVLDType;

	end
	
	priority
		NewNalHasBeenSent               > WaitForNewNal                        > NewNalDetected;
		IsVldUe                         > IsReadBits                           > IsCavlcLevelPrefix;  
		IsCavlcLevelPrefix              > IsCavlcRunBefore > IsCavlcCoeffToken > IsVldSe;
		IsVldSe                         > IsVldTe.ue       > IsVldTe.u         > FillBufferRbsp;
		FillBufferRbsp                  > IsMoreRbspData   > IsByteAligned     > IsEndOfNal;
		CheckSizeBufferRbsp             > FillBufferRbsp                       > FutureNewNalDetected > NewNalHasBeenSent;
		GetCodeNum.NotFinished          > GetCodeNum.Finished;
		Buffer.IsNotEmpty               > FillBufferRbsp                       > Buffer.IsEmpty;
		GetCavlcCoeffToken.NotFinished  > GetCavlcCoeffToken.Finished;
		GetCavlcLevelPrefix.NotFinished > GetCavlcLevelPrefix.Finished;
		GetCavlcTotalZeros.NotFinished  > GetCavlcTotalZeros.Finished;
		GetCavlcRunBefore.NotFinished   > GetCavlcRunBefore.Finished;
	end
end
