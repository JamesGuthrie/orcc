/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
actor Algo_RefIdxtoPOC()
	int (size=32) RefList,
	uint(size=3)  RefIdx,
	uint(size=2)  RemoteControl
		==>
	uint(size=32) POCtoRead
		:


	bool DEBUG_INPUT = false;

	uint(size=2) GETNEWLIST  = 0;
	uint(size=2) GETNEWIDX   = 1;
	uint(size=2) SENDLASTIDX = 2;

	List(type:uint(size=32), size=16) RefPoc;

	uint(size=5)  SizeList;
	uint(size=5)  CountRead;
	uint(size=32) ValPoc;

	ReadSizeList: action 
			RefList :[ SizeRefList ]
				==>
		do
			SizeList  := SizeRefList;
			CountRead := 0;
			if(DEBUG_INPUT)then
				println("Input RefIdxtoPOC RefList:"+SizeRefList);
			end
		end


	ReadRefList: action
			RefList :[ PocList ]
				==>
		guard
			CountRead < SizeList
		do
			RefPoc[CountRead] := PocList;
			CountRead         := CountRead + 1;
			if(DEBUG_INPUT)then
				println("Input RefIdxtoPOC RefList:"+PocList);
			end
		end


	ReadRefListDone: action ==>
		guard
			CountRead = SizeList
		end


	GetRefIdx: action
			RefIdx        :[  ListIdx  ]
				==>
		do
			if(DEBUG_INPUT)then
				println("Input RefIdxtoPOC RefIdx:"+ListIdx);
			end
			ValPoc := RefPoc[ListIdx & 15];
		end


	NewListAsked: action
			RemoteControl :[ WorkAsked ]
				==>
		guard
			WorkAsked = GETNEWLIST
		end


	NewIdxAsked: action
			RemoteControl :[ WorkAsked ]
				==>
		guard
			WorkAsked = GETNEWIDX
		end


	SendIdxAsked: action
			RemoteControl :[ WorkAsked ]
				==>
			POCtoRead     :[  ValPoc   ]
		guard
			WorkAsked = SENDLASTIDX
		end

	schedule fsm ReadSizeList:

		GetCommand   ( NewListAsked    )--> ReadSizeList;
		GetCommand   ( NewIdxAsked     )--> GetRefIdx;
		GetCommand   ( SendIdxAsked    )--> GetCommand;

		ReadSizeList ( ReadSizeList    )--> ReadRefList;

		ReadRefList  ( ReadRefList     )--> ReadRefList;
		ReadRefList  ( ReadRefListDone )--> GetCommand;

		GetRefIdx    ( GetRefIdx       )--> GetCommand;
	end

	priority
		ReadRefList     > ReadRefListDone;
	end
end