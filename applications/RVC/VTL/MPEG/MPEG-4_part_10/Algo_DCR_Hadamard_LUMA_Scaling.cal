/*************************************************************************
This software module was originally developed by 
Kenji Otoi, Yoshihisa Yamada and Kohtaro Asai (Mitsubishi Electric Corporation), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

Mitsubishi Electric Corporation grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that Mitsubishi Electric 
Corporation owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, Mitsubishi 
Electric Corporation will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

Mitsubishi Electric Corporation retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2007.
*************************************************************************/
//Modified by Damien de Saint Jorre, IETR/INSA of Rennes (France)



actor Algo_DCR_Hadamard_LUMA_Scaling (bool a)
		int (size=16) I, 
		int (size=8)  QP,
		int (size=8)  ScalingList,
		uint(size=2)  BlocksSize
				==>
		int(size=16) O:


//	uint(size=2) BLOCK_4x4   = 0;
//	uint(size=2) BLOCK_8x8   = 1;
	uint(size=2) BLOCK_16x16 = 2;

	bool DEBUG_INPUT = false;
	
  List( type:uint(size=5), size=6*16 ) t_normAdjust4x4  = [// same as a AVC_IQ4x4's t_normAdjust4x4. used only 16*n-th(n=0..5) elements in this FU. 
    // qp_rem = 0
    10, 13, 10, 13, 13, 16, 13, 16, 10, 13, 10, 13, 13, 16, 13, 16,

    // qp_rem = 1
    11, 14, 11, 14, 14, 18, 14, 18, 11, 14, 11, 14, 14, 18, 14, 18,

    // qp_rem = 2
    13, 16, 13, 16, 16, 20, 16, 20, 13, 16, 13, 16, 16, 20, 16, 20,

    // qp_rem = 3
    14, 18, 14, 18, 18, 23, 18, 23, 14, 18, 14, 18, 18, 23, 18, 23,

    // qp_rem = 4
    16, 20, 16, 20, 20, 25, 20, 25, 16, 20, 16, 20, 20, 25, 20, 25,

    // qp_rem = 5
    18, 23, 18, 23, 23, 29, 23, 29, 18, 23, 18, 23, 23, 29, 23, 29
  ];
  List( type:uint(size=4), size=16 )  t_Index = [
    0, 1, 5, 6, 2, 4, 7,12, 3, 8,11,13, 9,10,14,15
  ];

  List( type:int(size=16), size=96 ) t_LevelScale;
  int(size=8) qp;
  int(size=8) qp_per;
  int(size=8) qp_rem;
  int(size=8) qp_sft;

  read_qp: action QP:[x] ==>
  do
	if(DEBUG_INPUT)then
		println("Input DCR_Hadamard_Luma_Scaling QP:"+x);
	end
    qp := x;
    qp_per := qp / 6;
    qp_rem := qp mod 6;
    qp_sft := lshift(1, 5-qp_per);
  end

  read_sl: action ScalingList:[SL] repeat 4*4 ==>
  do
	if(DEBUG_INPUT)then
		foreach int i in 0 .. 15
		do
			println("Input DCR_Hadamard_Luma_Scaling ScalingList:"+SL[i]);
		end
	end
    t_LevelScale := [ SL[t_Index[s]] *t_normAdjust4x4[t*16 + s]:for int t in 0 .. 5, for int s in 0 .. 15 ];
  end


  iquantise.Launch: action
  		I:[i] repeat 16,
		BlocksSize :[BlckSz]
			==>
		O:[ [
    			if qp_per < 6 then
    			  rshift( i[s] * t_LevelScale[16*qp_rem] + qp_sft, 6 - qp_per)
   				else
      			  lshift( i[s] * t_LevelScale[16*qp_rem], qp_per - 6)
    			end : for int s in 0 .. 15 
    	  ] ] repeat 16
	do
		if(DEBUG_INPUT)then
			println("Input DCR_Hadamard_Luma_Scaling BlocksSize:"+BlckSz);
			foreach int j in 0 .. 15
			do
				println("Input DCR_Hadamard_Luma_Scaling I:"+i[j]);
			end
		end
	end


  iquantise.Skip: action
		BlocksSize :[BlckSz]
			==>
	guard
		BlckSz != BLOCK_16x16
	do
		if(DEBUG_INPUT)then
			println("Input DCR_Hadamard_Luma_Scaling BlocksSize:"+BlckSz);
		end
  	end

  schedule fsm read_qp:
    read_qp      ( read_qp 	  		) --> read_sl;
    read_sl      ( read_sl    		) --> iquantise;
    iquantise    ( iquantise 		) --> read_qp;
  end
  priority
  	iquantise.Skip > iquantise.Launch;
  end
end
