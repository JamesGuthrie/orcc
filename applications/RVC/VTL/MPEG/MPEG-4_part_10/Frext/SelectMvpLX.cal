/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
actor SelectMvpLX()
	uint(size=6)  MbType,
	uint(size=4)  SubMbType,
	int (size=16) MvpL0,
	uint(size=11) LocationL0,
	uint(size=4)  RefIdxL0,
	int (size=16) MvpL1,
	uint(size=4)  RefIdxL1,
	uint(size=11) LocationL1
		==>
	int (size=16) MvOut,
	uint(size=4)  RefIdxOut,
	uint(size=11) Location,
	uint(size=2)  SelectList

		:

	uint(size=6) BLOCK_TYPE_INTRA_MIN = 0;
	uint(size=6) BLOCK_TYPE_INTRA_MAX = 25;
	uint(size=6) BLOCK_TYPE_P_MIN     = 26;
	uint(size=6) P_L0_16x16           = 26;
	uint(size=6) BLOCK_TYPE_P_MAX     = 30;
	uint(size=6) BLOCK_TYPE_P_8x8     = 29;
	uint(size=6) BLOCK_TYPE_P_8x8ref0 = 30;
	uint(size=6) BLOCK_TYPE_B_MIN     = 31;
	uint(size=6) BLOCK_TYPE_B_8x8     = 53;
	uint(size=6) BLOCK_TYPE_B_MAX     = 53;
	uint(size=6) BLOCK_TYPE_P_SKIP    = 54;

	uint(size=2) NA = 0;
	uint(size=2) PRED_L0 = 1;
	uint(size=2) PRED_L1 = 2;
	uint(size=2) BIPRED  = 3;
	uint(size=2) DIRECT  = 4;

	List(type: uint(size=3),size=8) NumMbPart_P =
		[
			1,2,2,4,4,1,1,1
		];

	List(type: uint(size=3),size=32) NumMbPart_B =
		[
			1,1,1,1,2,2,2,2,2,2,
			2,2,2,2,2,2,2,2,2,2,
			2,2,4,1,1,1,1,1,1,1,
			1,1
		];

	List(type: List(type: uint(size=3), size=16), size=2) NumSubMbPart =
		[
			[1/*Change me when B_Direct_8x8 will be supported !! 4*/, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 0],
			[1, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

	List(type: List(type: uint(size=3),size=2),size=8) MbPartPredMode_P =
		[
			[PRED_L0,NA],[PRED_L0,PRED_L0],[PRED_L0,PRED_L0],[NA,NA],[NA,NA],[PRED_L0,NA],[NA,NA],[NA,NA]
		];

	List(type: List(type: uint(size=3),size=2),size=32) MbPartPredMode_B =
		[
			[DIRECT,NA], [PRED_L0,NA], [PRED_L1,NA], [BIPRED,NA], [PRED_L0,PRED_L0], [PRED_L0,PRED_L0], [PRED_L1,PRED_L1], [PRED_L1,PRED_L1], [PRED_L0,PRED_L1], [PRED_L0,PRED_L1],
			[PRED_L1,PRED_L0], [PRED_L1,PRED_L0], [PRED_L0,BIPRED], [PRED_L0,BIPRED], [PRED_L1,BIPRED], [PRED_L1,BIPRED], [BIPRED,PRED_L0], [BIPRED,PRED_L0], [BIPRED,PRED_L1], [BIPRED,PRED_L1],
			[BIPRED,BIPRED], [BIPRED,BIPRED], [NA,NA], [DIRECT,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA],
			[NA,NA], [NA,NA]
		];

	List(type: List(type: uint(size=3), size=16), size=2) SubMbPartPredMode =
		[
			[DIRECT, PRED_L0, PRED_L1, BIPRED, PRED_L0, PRED_L0, PRED_L1, PRED_L1, BIPRED, BIPRED,
			 PRED_L0, PRED_L1, BIPRED, NA, NA, NA],
			[PRED_L0, PRED_L0, PRED_L0, PRED_L0, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0]
		];


	function Is_PredL0(uint(size=6) Mb_Type, uint(size=1) mb_part_idx)
				-->
			bool
		:
			if(Mb_Type >= BLOCK_TYPE_B_MIN and Mb_Type <= BLOCK_TYPE_B_MAX) then
				(MbPartPredMode_B[(Mb_Type - BLOCK_TYPE_B_MIN) & 31][mb_part_idx & 1] & PRED_L0) != 0
			else//if(Mb_Type >= BLOCK_TYPE_P_MIN and Mb_Type <= BLOCK_TYPE_P_MAX)
				(MbPartPredMode_P[(Mb_Type - BLOCK_TYPE_P_MIN) & 7][mb_part_idx & 1] & PRED_L0) != 0
			end
		end


	function Is_PredL1(uint(size=6) Mb_Type, uint(size=1) mb_part_idx)
				-->
			bool
		:
			if(Mb_Type >= BLOCK_TYPE_B_MIN and Mb_Type <= BLOCK_TYPE_B_MAX) then
				(MbPartPredMode_B[(Mb_Type - BLOCK_TYPE_B_MIN) & 31][mb_part_idx & 1] & PRED_L1) != 0
			else//if(Mb_Type >= BLOCK_TYPE_P_MIN and Mb_Type <= BLOCK_TYPE_P_MAX)
				false
			end
		end

	uint(size=3) MbPartIdxMax;
	uint(size=3) MbPartIdx;
	uint(size=1) Idx_Sub_Tab;
	bool         Is8x8Mb;
	uint(size=3) SubMbPartIdxMax;
	uint(size=3) SubMbPartIdx;
	bool         IsSubPredL0;
	bool         IsSubPredL1;

	List(type: bool, size=2) IsPredL0;
	List(type: bool, size=2) IsPredL1;

	ReadMbType: action
			MbType    :[MacroBlkType]
				==>
		do
			Idx_Sub_Tab   :=
				if(MacroBlkType >= BLOCK_TYPE_B_MIN and MacroBlkType <= BLOCK_TYPE_B_MAX) then
					0
				else
					1
				end;
			MbPartIdx     := 0;
			MbPartIdxMax  :=
				if(MacroBlkType >= BLOCK_TYPE_B_MIN and MacroBlkType <= BLOCK_TYPE_B_MAX) then
					if(MacroBlkType <= BLOCK_TYPE_B_MAX)then
						NumMbPart_B[(MacroBlkType - BLOCK_TYPE_B_MIN) & 31]	
					else
						1
					end
				else
					if(MacroBlkType <= BLOCK_TYPE_P_MAX)then
						NumMbPart_P[(MacroBlkType - BLOCK_TYPE_P_MIN) &  7]
					else
						1
					end
				end;
			Is8x8Mb :=    (MacroBlkType = BLOCK_TYPE_P_8x8ref0)
			           or (MacroBlkType = BLOCK_TYPE_P_8x8)
			           or (MacroBlkType = BLOCK_TYPE_B_8x8);
			//delete me!! (when import will be supported by Orcc)
			if(MacroBlkType != BLOCK_TYPE_P_SKIP)then
				IsPredL0[0] := Is_PredL0(MacroBlkType,0);
				IsPredL0[1] := Is_PredL0(MacroBlkType,1);
				IsPredL1[0] := Is_PredL1(MacroBlkType,0);
				IsPredL1[1] := Is_PredL1(MacroBlkType,1);
			else
				IsPredL0[0] := true;
				IsPredL0[1] := false;
				IsPredL1[0] := false;
				IsPredL1[1] := false;	
			end
		end

	MacroBlkType.IsPredL0: action
			MvpL0      :[Mvx, Mvy],
			RefIdxL0   :[ref_idx],
			LocationL0 :[Mbx_in_pix,Mby_in_pix]
				==>
			MvOut      :[Mvx, Mvy],
			RefIdxOut  :[ref_idx],
			Location   :[Mbx_in_pix,Mby_in_pix],
			SelectList :[PRED_L0]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			IsPredL0[MbPartIdx&1],
			not IsPredL1[MbPartIdx&1]
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsPredL1: action
			MvpL1      :[Mvx,Mvy],
			RefIdxL1   :[ref_idx],
			LocationL1 :[Mbx_in_pix,Mby_in_pix]
				==>
			MvOut      :[Mvx,Mvy],
			RefIdxOut  :[ref_idx],
			Location   :[Mbx_in_pix,Mby_in_pix],
			SelectList :[PRED_L1]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			not IsPredL0[MbPartIdx&1],
			IsPredL1[MbPartIdx&1]
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsBiPred: action
			MvpL1      :[Mvx,Mvy],
			RefIdxL1   :[ref_idx],
			LocationL1 :[Mbx_in_pix,Mby_in_pix],
			MvpL0      :[Mvx2, Mvy2],
			RefIdxL0   :[ref_idx2],
			LocationL0 :[Mbx_in_pix2,Mby_in_pix2]
				==>
		MvOut     :[Mvx,Mvy],
		RefIdxOut :[ref_idx],
		Location  :[Mbx_in_pix,Mby_in_pix],
			SelectList :[BIPRED]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			IsPredL0[MbPartIdx&1],
			IsPredL1[MbPartIdx&1]
		do
			println("MacroBlkType.IsBiPred");
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType_Is8x8: action
			SubMbType :[ValSubMbType]
				==>
		guard
			MbPartIdx < MbPartIdxMax,
			Is8x8Mb
		do
			SubMbPartIdx    := 0;
			SubMbPartIdxMax := NumSubMbPart[Idx_Sub_Tab][ValSubMbType & 15];
			IsSubPredL0     := (SubMbPartPredMode[Idx_Sub_Tab][ValSubMbType & 15] & PRED_L0) != 0;
			IsSubPredL1     := (SubMbPartPredMode[Idx_Sub_Tab][ValSubMbType & 15] & PRED_L1) != 0;
			if(not IsSubPredL0 and not IsSubPredL1)then println("bouh");end
		end

	GetParameters_Done: action
				==>
		guard
			MbPartIdx = MbPartIdxMax
		end

	SubMacroBlkType.IsPredL0: action
			MvpL0      :[Mvx, Mvy],
			RefIdxL0   :[ref_idx],
			LocationL0 :[Mbx_in_pix,Mby_in_pix]
				==>
			MvOut      :[Mvx, Mvy],
			RefIdxOut  :[ref_idx],
			Location   :[Mbx_in_pix,Mby_in_pix],
			SelectList :[PRED_L0]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			IsSubPredL0,
			not IsSubPredL1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsPredL1: action
			MvpL1      :[Mvx, Mvy],
			RefIdxL1   :[ref_idx],
			LocationL1 :[Mbx_in_pix,Mby_in_pix]
				==>
			MvOut      :[Mvx, Mvy],
			RefIdxOut  :[ref_idx],
			Location   :[Mbx_in_pix,Mby_in_pix],
			SelectList :[PRED_L1]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			not IsSubPredL0,
			IsSubPredL1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsBiPred: action
			MvpL1      :[Mvx,Mvy],
			RefIdxL1   :[ref_idx],
			LocationL1 :[Mbx_in_pix,Mby_in_pix],
			MvpL0      :[Mvx2, Mvy2],
			RefIdxL0   :[ref_idx2],
			LocationL0 :[Mbx_in_pix2,Mby_in_pix2]
				==>
		MvOut      :[Mvx, Mvy],
		RefIdxOut  :[ref_idx],
		Location   :[Mbx_in_pix,Mby_in_pix],
			SelectList :[BIPRED]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			IsSubPredL0 and IsSubPredL1 or (not IsSubPredL0) and (not IsSubPredL1)
		do
			println("SubMacroBlkType.IsBiPred");
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetParamSubMb_Done: action ==>
		guard
			SubMbPartIdx = SubMbPartIdxMax
		do
			MbPartIdx := MbPartIdx + 1;
		end

	schedule fsm ReadMbType:
		ReadMbType         (ReadMbType          )--> GetParameters;

		GetParameters      (MacroBlkType_Is8x8  )--> GetParametersSubMb;
		GetParameters      (GetParameters_Done  )--> ReadMbType;
		GetParameters      (MacroBlkType        )--> GetParameters;

		GetParametersSubMb (SubMacroBlkType     )--> GetParametersSubMb;
		GetParametersSubMb (GetParamSubMb_Done  )--> GetParameters;
	end
end