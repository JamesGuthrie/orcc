/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.

*****************************************************************************/
actor Algo_Check_NALU_type_Frext()
	uint(size=8) RbspByte,
	bool         NewNal,

	bool         SpsReadNextByte,
	bool         SpsSkipNal,

	bool         PpsReadNextByte,
	bool         PpsSkipNal//,

//	bool         PicReadNextByte,
//	bool         PicSkipNal
		==>
	uint(size=8) SpsRbsp,
	uint(size=8) PpsRbsp/*,
	uint(size=8) PicRbsp,
	bool         PicIsAnIdr
*/		:


/*
* 
* Constants 
*
*/
	uint(size=5) NAL_SLICE_NON_IDR = 1;
	uint(size=5) NAL_SLICE_IDR     = 42;//5;
	uint(size=5) NAL_SPS           = 7;
	uint(size=5) NAL_PPS           = 8;


/*
* 
* State variables 
*
*/

	uint(size=5) nal_unit_type := 0;
	uint(size=2) nal_ref_idc   := 0;


/*
* 
* Actions 
*
*/

	WaitForNewNal: action
			NewNal       :[IsNewNal],
			RbspByte     :[ValRbsp]
				==>
		guard
			IsNewNal = false
		do
			println("Skip : "+ValRbsp);	
		end


	NewNalDetected: action
			NewNal :[IsNewNal]
				==>
		do
			println("NewNalDetected");	
		end


	ReadNaluType: action
			NewNal       :[IsNewNal],
			RbspByte     :[ValRbsp]
				==>
		do
			nal_unit_type := bitand( ValRbsp           , 0x1F );
			nal_ref_idc   := bitand( rshift(ValRbsp,5) , 0x03 );
			println("nal_unit_type:"+nal_unit_type+"; nal_ref_idc:"+nal_ref_idc);
		end

	IsSps: action ==>
		guard
			nal_unit_type = NAL_SPS
		do
			println("Is Sps");
		end


	IsPps: action ==>
		guard
			nal_unit_type = NAL_PPS
		do
			println("Is Pps");
		end


/*	IsSliceIdr: action
				==>
			PicIsAnIdr :[true]
		guard
			nal_unit_type = NAL_SLICE_IDR
		do
			println("Is SliceIdr");
		end
*/

	NalUnitType_Unknown: action ==>
		do
			println("NalUnitType_Unknown");	
		end


	ReadData.Sps: action
			NewNal          :[IsNewNal],
			RbspByte        :[ValRbsp],
			SpsReadNextByte :[ReadAsked],
			SpsSkipNal      :[ValSkipNal]
				==>
			SpsRbsp         :[ValRbsp]
		guard
			ReadAsked  = true,
			ValSkipNal = false,
			IsNewNal   = false
		end


	ReadData.Pps: action
			NewNal          :[IsNewNal],
			RbspByte        :[ValRbsp],
			PpsReadNextByte :[ReadAsked],
			PpsSkipNal      :[ValSkipNal]
				==>
			PpsRbsp         :[ValRbsp]
		guard
			ReadAsked  = true,
			ValSkipNal = false,
			IsNewNal   = false
		end


/*	ReadData.SliceIdr: action
			NewNal             :[IsNewNal],
			RbspByte           :[ValRbsp],
			PicReadNextByte :[ReadAsked],
			PicSkipNal      :[ValSkipNal]
				==>
			PicRbsp         :[ValRbsp]
		guard
			ReadAsked  = true,
			ValSkipNal = false,
			IsNewNal   = false
		end
*/

	SkipNalAsked.Sps: action
			SpsSkipNal :[ValSkipNal]
				==>
		guard
			ValSkipNal = true
		end


	SkipNalAsked.Pps: action
			PpsSkipNal :[ValSkipNal]
				==>
		guard
			ValSkipNal = true
		end


/*	SkipNalAsked.SliceIdr: action
			PicSkipNal :[ValSkipNal]
				==>
		guard
			ValSkipNal = true
		end
*/

	schedule fsm WaitForNewNal:
		WaitForNewNal      (WaitForNewNal         )--> WaitForNewNal;
		WaitForNewNal      (NewNalDetected        )--> ReadNaluType;

		ReadNaluType       (ReadNaluType          )--> CheckNaluType;

//		CheckNaluType      (IsSliceIdr            )--> ReadData4SliceIdr;
		CheckNaluType      (IsSps                 )--> ReadData4Sps;
		CheckNaluType      (IsPps                 )--> ReadData4Pps;
		CheckNaluType      (NalUnitType_Unknown   )--> undefined;

		ReadData4Sps       (ReadData.Sps          )--> ReadData4Sps;
		ReadData4Sps       (SkipNalAsked.Sps      )--> WaitForNewNal;

		ReadData4Pps       (ReadData.Pps          )--> ReadData4Pps;
		ReadData4Pps       (SkipNalAsked.Pps      )--> WaitForNewNal;

/*		ReadData4SliceIdr  (ReadData.SliceIdr     )--> ReadData4SliceIdr;
		ReadData4SliceIdr  (SkipNalAsked.SliceIdr )--> WaitForNewNal;	
*/	end

	priority
		/*IsSliceIdr    >*/ IsPps          > IsSps > NalUnitType_Unknown;
		ReadData      > SkipNalAsked;
		WaitForNewNal > NewNalDetected;
	end
end