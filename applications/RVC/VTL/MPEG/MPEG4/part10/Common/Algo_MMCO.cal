/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/

//Modified by Mederic Blestel and Endri Bezati IETR/INSA of Rennes
//Modified by Mickael Raulet IETR/INSA of Rennes
//Modified by Damien de Saint Jorre IETR/INSA of Rennes
package MPEG.MPEG4.part10.Common;

import MPEG.Common.Imp_Math.*;

actor Algo_MMCO () 
	uint(size=31) Mmco,
	uint(size=31) FraNum,
	uint(size=31) MaxFrameNum,
	uint(size=5)  NumReferenceFrame,
	uint(size=32) Poc
		==>
	int (size=32) DelList,
	int (size=32) LongTermList,
	int (size=32) ShortTermList,
	uint(size=5)  SzShortTermList,
	bool          EmptyDPB
		:


/*
*
* Constant
*
*/

	int (size=32) SENT_DONE = -2;

	bool DEBUG_OUTPUT = false;
	bool DEBUG_INPUT  = false;

/*
*
* Global variables
*
*/

	List(type:uint(size=31), size=17) STList              := [  0    : for int s in 0 .. 16];
	List(type:bool         , size=17) ShortTermFalseFrame := [ false : for int s in 0 .. 16];
	List(type:int (size=32), size=16) LTList              := [ -1    : for int s in 0 .. 15];
	List(type:uint(size=31), size=16) DelListTab          := [  0    : for int s in 0 .. 15];

	List(type:int (size=32), size=32) FrameNumList        := [ -1    : for int s in 0 .. 31];
	List(type:int (size=32), size=32) PocList             := [  0    : for int s in 0 .. 31];

	int (size=6)  NbFrameDel       := 0;
	uint(size=31) FrameNum         := 0;
	uint(size=32) ValCurrPoc       := 0;
	uint(size=31) LastFrameNum     := 0;
	uint(size=31) ValMaxFrameNum   := 0;
	uint(size=6)  NumRefFrame      := 0;
	uint(size=5)  ShortTermCount   := 0;
	uint(size=5)  LongTermCount    := 0;
	uint(size=5)  NbShortTermSent  := 0;
	uint(size=1)  FlagLongTerm     := 0;
	uint(size=5)  LongTermFrameIdx := 0;
	uint(size=7)  IdxPocList       := 0;
	bool          ValIsIDR         := false;
	int (size=32) ValDelPoc        := 0;
	uint(size=31) ValDelFrame      := 0;

/*
*
* Actions
*
*/

	//Get the Frame Num and others informations about the current picture
	read_num_ref_frames: action
			NumReferenceFrame :[ValNumRefFrame],
			FraNum            :[ValFrame_Num],
			MaxFrameNum       :[MaxFrNu],
			Poc               :[PicOrderCnt]
				==>
		var
			int (size=6) NbFrameToDel,
			uint(size=5) Idx
		do
			NumRefFrame     := ValNumRefFrame;
			ValMaxFrameNum  := MaxFrNu;
			LastFrameNum    := FrameNum;
			FrameNum        := ValFrame_Num;
			NbFrameDel      := 0;
			NbShortTermSent := 0;
			ValCurrPoc      := PicOrderCnt;
			IdxPocList      := 0;
			if(ValFrame_Num = 0 and PicOrderCnt = 0) then
				ValIsIDR := true;
				foreach int j in 0 .. 31
				do
					FrameNumList[j] := -1;
				end
			else
				ValIsIDR := false;
			end
			NbFrameToDel := LongTermCount + ShortTermCount - NumRefFrame - 1;
			Idx := NumRefFrame + 1 - LongTermCount;
			if(NbFrameToDel >= 0)then
				foreach int i in Idx .. ShortTermCount - 1
				do
					ShortTermCount := ShortTermCount - 1;
					if( (ShortTermFalseFrame[i] = false) and (NbFrameDel < 16) ) then
						DelListTab[i] := STList[i];
						NbFrameDel    := NbFrameDel + 1;
					end
				end
			end
			if ((LongTermCount + ShortTermCount > NumRefFrame) and (LastFrameNum != FrameNum)) then
				ShortTermCount := ShortTermCount - 1;
				if( (ShortTermFalseFrame[ShortTermCount] = false) and (NbFrameDel < 16) ) then
					DelListTab[NbFrameDel] := STList[ShortTermCount];
					NbFrameDel             := NbFrameDel + 1;
				end
			end
			if(DEBUG_INPUT)then
				println("input Mmco FraNum:"+ValFrame_Num);
				println("input Mmco MaxFrameNum:"+MaxFrNu);
				println("input Mmco NumReferenceFrame:"+ValNumRefFrame);
				println("input Mmco POC:"+PicOrderCnt);
			end
		end


	//If the new frame num isn't following the previous frame num,
	//we must fill the short term list with all the missed frame num
	FillFalseRefFrame.launch : action 
				==>
			SzShortTermList :[ShortTermCount]
		var
			uint(size=31) false_frame_num := (LastFrameNum + 1) mod ValMaxFrameNum
		do
			while(false_frame_num != FrameNum)
			do
				if(LongTermCount + ShortTermCount = NumRefFrame) then
					if ( (ShortTermFalseFrame[ShortTermCount - 1] = false) and (NbFrameDel < 16) ) then
						DelListTab[NbFrameDel] := STList[ShortTermCount - 1];
						NbFrameDel             := NbFrameDel + 1;
					end
					ShortTermCount := ShortTermCount - 1;
				end
				foreach int i in 0 .. ShortTermCount - 1
				do
					STList             [ShortTermCount - i] := STList             [ShortTermCount - i - 1];
					ShortTermFalseFrame[ShortTermCount - i] := ShortTermFalseFrame[ShortTermCount - i - 1];
				end
				STList[0]              := false_frame_num;
				ShortTermFalseFrame[0] := true;
				ShortTermCount         := ShortTermCount + 1;
				false_frame_num        := (false_frame_num + 1) mod ValMaxFrameNum;
			end
		end


	FillFalseRefFrame.skip : action
				==>
			SzShortTermList :[SizeShortTermList]
		guard
			(FrameNum = (LastFrameNum + 1) mod ValMaxFrameNum) or (FrameNum = LastFrameNum)
		var
			uint(size=4) SizeShortTermList
		do
			if(FrameNum = LastFrameNum) then
				SizeShortTermList := ShortTermCount;
				foreach int i in 0 .. ShortTermCount - 1
				do
					if(STList[i] = FrameNum)then
						SizeShortTermList := ShortTermCount - 1;
					end
				end
			else
				SizeShortTermList := ShortTermCount;
			end
			if(DEBUG_OUTPUT)then
				println("Output Mmco SzShortTermList: "+ShortTermCount);
			end
		end


	SendLists.ShortTerm: action
				==>
			ShortTermList :[ValShortTermList]
		guard
			NbShortTermSent < ShortTermCount,
			STList[min(NbShortTermSent,16)] != FrameNum
		var
			uint(size=31) ValShortTermList
		do
			ValShortTermList := STList[NbShortTermSent];
			NbShortTermSent  := NbShortTermSent + 1;
			if(DEBUG_OUTPUT)then
				println("Output Mmco ShortTermList: "+ValShortTermList);
			end
		end


	SendLists.ShortTermSkipVal: action
				==>
		guard
			NbShortTermSent < ShortTermCount
		do
			NbShortTermSent := NbShortTermSent + 1;
		end


	SendLists.LongTerm: action
				==>
			LongTermList :[LTList] repeat 16
		do
			if(DEBUG_OUTPUT)then
				foreach int i in 0 .. 15
				do
					println("Output Mmco LongTermList: "+LTList[i]);
				end
			end
		end


	read_IDR: action
			Mmco :[NotIdr , is_long_term]
				==>
		guard 
			NotIdr = 0
		do
			FlagLongTerm     := is_long_term;
			LongTermFrameIdx := 0;
			ShortTermCount   := 0;
			LongTermCount    := 0;
			LTList           := [-1 :for int s in 0 .. 15];
			NbFrameDel       := 0;
		end


	read_not_IDR_not_MMCO: action
			Mmco :[NotIdr , adaptive_ref_pic_marking_mode_flag]
				==>
		guard
			(NotIdr = 1) and (adaptive_ref_pic_marking_mode_flag = 0)
		do
			FlagLongTerm := 0;
		end


	read_not_IDR_MMCO: action
			Mmco :[NotIdr , adaptive_ref_pic_marking_mode_flag]
				==>
		guard 
			(NotIdr = 1) and (adaptive_ref_pic_marking_mode_flag = 1)
		do
			FlagLongTerm := 0;
		end


	MMCO_opcode.IsEqualTo0: action
			Mmco :[opcode]
				==>
		guard 
			opcode = 0
		do
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode);
			end
		end


	// Mark a short term reference picture as "unused for reference "
	MMCO_opcode.IsEqualTo1: action
			Mmco :[opcode, difference_of_pic_nums_minus1]
				==>
		guard
			opcode = 1
		var
			uint(size=4)  i := 0,
			int (size=32) FrameNumST,
			bool         IdxFound   := false
		do
			FrameNumST := FrameNum - difference_of_pic_nums_minus1 - 1;
			if(FrameNumST < 0) then
				FrameNumST := FrameNumST + ValMaxFrameNum;
			end
			while((not IdxFound) and (i < ShortTermCount))
			do
				if(STList[i] = FrameNumST) then
					IdxFound := true;
					if ( (ShortTermFalseFrame[i] = false) and (NbFrameDel < 16) ) then
						DelListTab[NbFrameDel] := FrameNumST;
						NbFrameDel             := NbFrameDel + 1;
					end
					foreach int j in i .. ShortTermCount - 2
					do
						STList[j]              := STList[j+1];
						ShortTermFalseFrame[j] := ShortTermFalseFrame[j+1];
					end
					ShortTermCount := ShortTermCount - 1;
				end
				i := i + 1;
			end
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode+" ; "+difference_of_pic_nums_minus1);
			end
		end


	// Mark a long term reference picture as "unused for reference "
	MMCO_opcode.IsEqualTo2: action
			Mmco:[opcode, IdxLTFrame ]
				==>
		guard 
			opcode = 2
		do
			if(LTList[IdxLTFrame]  != -1) then
				if(NbFrameDel < 16)then
					DelListTab[NbFrameDel] := LTList[IdxLTFrame];
					NbFrameDel             := NbFrameDel + 1;
				end
				LTList[IdxLTFrame]     := -1;
				LongTermCount          := LongTermCount - 1;
			end
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode+" ; "+IdxLTFrame);
			end
		end


	// Mark a short term reference picture as long term
	MMCO_opcode.IsEqualTo3: action
			Mmco:[opcode, difference_of_pic_nums_minus1, IdxLTFrame]
				==>
		guard 
			opcode = 3
		var
			int(size=32)FrameNumST,
			uint(size=4)  i := 0,
			bool         IdxFound   := false
		do
			FrameNumST := FrameNum - difference_of_pic_nums_minus1 - 1; 
			if(FrameNumST < 0) then
				FrameNumST := FrameNumST + ValMaxFrameNum;
			end

			while((not IdxFound) and (i < ShortTermCount))
			do
				if(STList[i] = FrameNumST) then
					IdxFound := true;
					foreach int j in i .. ShortTermCount - 2
					do
							STList[j]              := STList[j + 1];
							ShortTermFalseFrame[j] := ShortTermFalseFrame[j + 1];
					end
					ShortTermCount := ShortTermCount - 1;
					
					if (LTList[IdxLTFrame] = -1) then
						LongTermCount := LongTermCount + 1;
					else
						if(NbFrameDel < 16)then
							DelListTab[NbFrameDel] := LTList[IdxLTFrame];
							NbFrameDel             := NbFrameDel + 1;
						end
					end
					LTList[IdxLTFrame] := FrameNumST;
				end
				i := i + 1;
			end
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode+" ; "+difference_of_pic_nums_minus1+" ; "+IdxLTFrame);
			end
		end


	// Specify the maximum long term frame index
	MMCO_opcode.IsEqualTo4: action
			Mmco:[opcode, long_term_max_idx]
				==>
		guard 
			opcode = 4
		do
			foreach int i in long_term_max_idx .. 15
			do
				if (LTList[i] != -1) then
					if(NbFrameDel < 16)then
						DelListTab[NbFrameDel] := LTList[i];
						NbFrameDel             := NbFrameDel + 1;
					end
					LTList[i]              := -1;
					LongTermCount          := LongTermCount - 1;
				end
			end
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode+" ; "+long_term_max_idx);
			end
		end


	// Mark all reference picture as "unused for reference "
	MMCO_opcode.IsEqualTo5: action
			Mmco:[opcode]
				==>
		guard 
			opcode = 5
		do
			FrameNum        := 0;
			ShortTermCount  := 0;
			STList          := [-1 :for int s in 0 .. 17-1];
			LongTermCount   := 0;
			LTList          := [-1 :for int s in 0 .. 16-1];
			NbFrameDel      := 0;
			ValIsIDR        := true;
			foreach int j in 0 .. 31
			do
				FrameNumList[j] := -1;
			end
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode);
			end
		end


	// Mark the current picture as long term reference picture
	MMCO_opcode.IsEqualTo6: action
			Mmco:[opcode, IdxLTFrame]
				==>
		guard 
			opcode = 6
		do
			LongTermFrameIdx := IdxLTFrame;
			FlagLongTerm     := 1;
			LongTermFrameIdx := bitand(LongTermFrameIdx,0x0F);
			if(DEBUG_INPUT)then
				println("input Mmco Mmco:"+opcode+" ; "+IdxLTFrame);
			end
		end


	AddFrame.InSTList: action
				==>
			EmptyDPB  :[ValIsIDR]
		guard
			FlagLongTerm = 0
		var
			uint(size=4) j            := 0,
			uint(size=4) NbSTFrameDel := 0
		do
			foreach int i in 0 .. ShortTermCount -1
			do
				if(STList[i] != FrameNum)then
					STList[j] := STList[i];
					j := j + 1;
				else
					NbSTFrameDel := NbSTFrameDel + 1;
				end
			end
			ShortTermCount := ShortTermCount - NbSTFrameDel;

			foreach int i in 0 .. 15
			do
				if(LTList[i] = FrameNum)then
					LTList[i]     := -1;
					LongTermCount := LongTermCount - 1;
				end
			end
			if(NbFrameDel < 16)then
				DelListTab[NbFrameDel] := FrameNum;
				NbFrameDel             := NbFrameDel + 1;
			end

			foreach int i in 0 .. ShortTermCount - 1
			do
				STList             [ShortTermCount - i] := STList             [ShortTermCount - i - 1];
				ShortTermFalseFrame[ShortTermCount - i] := ShortTermFalseFrame[ShortTermCount - i - 1];
			end
			IdxPocList := 0;
			STList[0]              := FrameNum;
			ShortTermFalseFrame[0] := false;
			ShortTermCount         := ShortTermCount +1;
			if(DEBUG_OUTPUT)then
				println("Output Mmco IsIDR: "+ValIsIDR);
			end
		end


	AddFrame.InLTList: action
				==>
			EmptyDPB   :[ValIsIDR]
		var
			uint(size=4) j            := 0,
			uint(size=4) NbSTFrameDel := 0
		do
			foreach int i in 0 .. ShortTermCount -1
			do
				if(STList[i] != FrameNum)then
					STList[j] := STList[i];
					j := j + 1;
				else
					NbSTFrameDel := NbSTFrameDel + 1;
				end
			end
			ShortTermCount := ShortTermCount - NbSTFrameDel;

			foreach int i in 0 .. 15
			do
				if(LTList[i] = FrameNum)then
					LTList[i]     := -1;
					LongTermCount := LongTermCount - 1;
				end
			end
			if(NbFrameDel < 16)then
				DelListTab[NbFrameDel] := FrameNum;
				NbFrameDel             := NbFrameDel + 1;
			end

			if (LTList[LongTermFrameIdx] != -1) then
				if(NbFrameDel < 16)then
					DelListTab[NbFrameDel] := LTList[LongTermFrameIdx];
					NbFrameDel             := NbFrameDel + 1;
				end
			else 
				LongTermCount := LongTermCount +1;
			end
			LTList[LongTermFrameIdx] := FrameNum;

			IdxPocList := 0;
			if(DEBUG_OUTPUT)then
				println("Output Mmco IsIDR: "+ValIsIDR);
			end
		end


	GetNextPocToDel: action ==>
		var
			bool IdxFound := false
		do
			while( (not IdxFound) and (NbFrameDel > 0))
			do
				while( (not IdxFound) and (IdxPocList < 32))
				do
					if(FrameNumList[IdxPocList]   = DelListTab[NbFrameDel - 1])then
						FrameNumList[IdxPocList] := -1;
						ValDelPoc                := PocList[IdxPocList];
						ValDelFrame              := DelListTab[NbFrameDel - 1];
						IdxFound                 := true;
					else
						IdxPocList := IdxPocList + 1;
					end
				end
				if(IdxPocList = 32)then
					IdxPocList := 0;
					NbFrameDel := NbFrameDel - 1;
				end
			end
		end


	//Send the DelList
	SendDelList.PocValue : action
				==>
			DelList:[ValDelPoc , ValDelFrame]
		guard
			NbFrameDel > 0
		do
			if(DEBUG_OUTPUT)then
				println("Output Mmco DelList: "+ValDelPoc+" ; "+ValDelFrame);
			end
		end


	//Sent part of the DelList is completed. 
	SendDelList.skip : action
				==>
		end


	//Sent of the DelList is completed
	SendDelList.done : action
				==>
			DelList :[SENT_DONE]
		var
			bool         IdxFound := false,
			uint(size=6) i := 0
		do
			/* Put the value of the current pic order count in the PocList */
			while(not IdxFound)
			do
				if( (FrameNumList[i] = -1) or (i = 31) ) then
					IdxFound        := true;
					PocList[i]      := ValCurrPoc;
					FrameNumList[i] := FrameNum;
				end
				i := i + 1;
			end
			if(DEBUG_OUTPUT)then
				println("Output Mmco DelList: "+SENT_DONE);
			end
		end


/*
*
* Scheduler
*
*/
	schedule fsm  read_num_ref_frames:
		read_num_ref_frames  (read_num_ref_frames    )--> FillFalseRefFrame;

		FillFalseRefFrame    (FillFalseRefFrame      )--> SendLists;

		SendLists            (SendLists.ShortTerm        )--> SendLists;
		SendLists            (SendLists.ShortTermSkipVal )--> SendLists;
		SendLists            (SendLists.LongTerm         )--> check_IDR;

		/* Get values about memory_management_control_operation */
		check_IDR            (read_IDR               )--> AddFrameInList;
		check_IDR            (read_not_IDR_not_MMCO  )--> AddFrameInList;
		check_IDR            (read_not_IDR_MMCO      )--> MMCO_opcode;

		MMCO_opcode          (MMCO_opcode.IsEqualTo0 )--> AddFrameInList;
		MMCO_opcode          (MMCO_opcode.IsEqualTo1 )--> GetNextPocToDel_Temp;
		MMCO_opcode          (MMCO_opcode.IsEqualTo2 )--> GetNextPocToDel_Temp;
		MMCO_opcode          (MMCO_opcode.IsEqualTo3 )--> MMCO_opcode;
		MMCO_opcode          (MMCO_opcode.IsEqualTo4 )--> GetNextPocToDel_Temp;
		MMCO_opcode          (MMCO_opcode.IsEqualTo5 )--> MMCO_opcode;
		MMCO_opcode          (MMCO_opcode.IsEqualTo6 )--> MMCO_opcode;

		/* Send part of the DelList */
		GetNextPocToDel_Temp (GetNextPocToDel        )--> SendPartDelLists;

		SendPartDelLists     (SendDelList.PocValue   )--> GetNextPocToDel_Temp;
		SendPartDelLists     (SendDelList.skip       )--> MMCO_opcode;

		AddFrameInList       (AddFrame               )--> GetNextPocToDel;

		GetNextPocToDel      (GetNextPocToDel        )--> SendDelLists;

		SendDelLists         (SendDelList.PocValue   )--> GetNextPocToDel;
		SendDelLists         (SendDelList.done       )--> read_num_ref_frames;
	end

	priority
		SendDelList.PocValue     > SendDelList.done           > SendDelList.skip;
		SendLists.ShortTerm      > SendLists.ShortTermSkipVal > SendLists.LongTerm;
		FillFalseRefFrame.skip   > FillFalseRefFrame.launch;
		AddFrame.InSTList        > AddFrame.InLTList;
	end

end
