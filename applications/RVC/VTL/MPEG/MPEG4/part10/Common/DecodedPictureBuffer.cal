/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/

package MPEG.MPEG4.part10.Common;

import MPEG.Common.Imp_Math.*;
import MPEG.Common.Imp_PictureInfo.*;

actor DecodedPictureBuffer ( int MB_WIDTH )
	uint(size=32) FrameToRead,
	int(size=32)  DelList,
	uint(size=8)  WD,
	bool          EnableRead,
	int (size=12) ReadAddress,
	bool          IsIDR,
	uint(size=31) FrameNum,
	uint(size=32) currPicInfo
		==> 
	uint(size=8)  ReadResult
		:

	int (size=32) SENT_DONE = -2;
	uint(size=32) NB_PIC    = 16;
	uint(size=32) SZ_NBPIC  = 6; /* >= log2(NB_PIC) */

	uint(size=8)  pictureBuffer[NB_PIC][MAX_PICWIDTH_PX + 4*MB_WIDTH_MAX]
	                           [MAX_PICHEIGHT_PX + 4*MB_WIDTH_MAX];
	int (size=31) listFrameNum[NB_PIC] := [-1    :for int s in 0 .. NB_PIC-1];
	uint(size=32) ReadTable[32 * 32];
	int (size=32) picCurrIdx        := 0;
	uint(size=7)  picWidthInMacroB  := 0;
	uint(size=7)  picHeightInMacroB := 0;
	uint(size=13) picSizeInMacroB   := 0;
	uint(size=32) nbMacroBlocksWritten := 0;
	uint(size=16) mbLocXInPic;
	uint(size=16) mbLocYInPic;
	uint(size=32) readIdx;
	uint(size=32) readIdxMax;

	getIsNewPic: action EnableRead :[enabled_read] ==>
	end

	getReadAddr: action
		ReadAddress :[RaOffX , RaOffY , RAWidth , RAHeight],
		FrameToRead :[FrameNumToRead],
		EnableRead  :[ReadEnabled]
			==>
	guard
		ReadEnabled
	var
		bool found := false,
		uint i     := 0,
		uint(size=SZ_NBPIC) refIdx := 0
	do
		while(i < NB_PIC and not found) do
			if FrameNumToRead=listFrameNum[i] then
				refIdx := i;
				found  := true;
			end
			i := i + 1;
		end
		if(not found) then
			println("FrameNum not found : "+FrameNumToRead+"\n");
				foreach int i in 0 .. NB_PIC-1 do
					println("Idx n"+i+ " ; Frame Num:"+listFrameNum[i]);
				end
			while true do end
		end

		readIdxMax := 0;
		foreach int yAddr in RaOffY + 2*MB_WIDTH ..
			    RaOffY + RAHeight - 1 + 2*MB_WIDTH do
			foreach int xAddr in RaOffX + 2*MB_WIDTH ..
				    RaOffX + RAWidth - 1 + 2*MB_WIDTH do
				ReadTable[readIdxMax] := pictureBuffer[refIdx][xAddr][yAddr];
				readIdxMax            := readIdxMax + 1;
			end
		end
		readIdx    := 0;
	end

	readDone: action
		EnableRead  :[EnabledRead],
		currPicInfo :[PicSizeInMb , PicWidthInMb]
			==>
	guard
		not EnabledRead
	do
		picWidthInMacroB     := PicWidthInMb;
		picSizeInMacroB      := PicSizeInMb;
		picHeightInMacroB    := picSizeInMacroB / picWidthInMacroB;
		nbMacroBlocksWritten := 0;
		mbLocXInPic          := 0;
		mbLocYInPic          := 0;
	end

	readData.launch: action ==> ReadResult :[rd]
	guard 
		readIdx < readIdxMax
	var 
		uint(size=8) rd
	do
		rd      := ReadTable[readIdx];
		readIdx := readIdx + 1;
	end

	readData.done: action ==>
	guard
		readIdx = readIdxMax
	end

	readRefParameters: action
		FrameNum :[frame_num],
		IsIDR    :[IsIDRPic]
			==>
	var
		bool         idxSelected := false,
		int(size=32) i            := 0
	do
		if(IsIDRPic)then
			foreach int i in 0 .. NB_PIC - 1 do
				listFrameNum[i] := -1;
			end
		end

		picCurrIdx := -1;
		while((not idxSelected) and (i < NB_PIC)) do
			if(listFrameNum[i] < 0) then
				idxSelected := true;
				picCurrIdx  := i;
				if(not IsIDRPic) then
					listFrameNum[i] := frame_num;
				else
					listFrameNum[i] := 0;
				end
			end
			i := i + 1;
		end
		/*Fix Me!!! ==> exception*/
		if(picCurrIdx = -1) then
			picCurrIdx      := 0;
			listFrameNum[0] := frame_num;
		end
	end

	writeData.launch.Chroma: action
		WD :[Wd] repeat MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
			==>
	guard
		nbMacroBlocksWritten < picSizeInMacroB,
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		foreach int y in 0 .. MB_WIDTH_CHROMA - 1 do
			foreach int x in 0 .. MB_WIDTH_CHROMA - 1 do
				pictureBuffer[picCurrIdx][(mbLocXInPic + 2) * MB_WIDTH_CHROMA + x ]
				             [(mbLocYInPic + 2) * MB_WIDTH_CHROMA + y] 
				                 := Wd[y*MB_WIDTH_CHROMA + x];
			end
		end
		mbLocXInPic := mbLocXInPic + 1;
		if(mbLocXInPic = picWidthInMacroB) then
			mbLocYInPic := mbLocYInPic + 1;
			mbLocXInPic := 0;
		end
		nbMacroBlocksWritten := nbMacroBlocksWritten + 1;
	end

	writeData.launch.Luma: action
		WD :[Wd] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
			==>
	guard
		nbMacroBlocksWritten < picSizeInMacroB,
		MB_WIDTH = MB_WIDTH_LUMA
	do
		foreach int y in 0 .. MB_WIDTH_LUMA - 1 do
			foreach int x in 0 .. MB_WIDTH_LUMA - 1 do
				pictureBuffer[picCurrIdx][(mbLocXInPic + 2) * MB_WIDTH_LUMA + x ]
				    [(mbLocYInPic + 2) * MB_WIDTH_LUMA + y]
				        := Wd[y*MB_WIDTH_LUMA + x];
			end
		end
		mbLocXInPic := mbLocXInPic + 1;
		if(mbLocXInPic = picWidthInMacroB) then
			mbLocYInPic := mbLocYInPic + 1;
			mbLocXInPic := 0;
		end
		nbMacroBlocksWritten := nbMacroBlocksWritten + 1;
	end

	writeData.done: action ==>
	guard
		nbMacroBlocksWritten = picSizeInMacroB
	do
		foreach int y in 2*MB_WIDTH .. (picHeightInMacroB + 2) * MB_WIDTH - 1 do
			foreach int x in 0 .. 2*MB_WIDTH - 1 do
				pictureBuffer[picCurrIdx][x][y] := pictureBuffer[picCurrIdx]
				                                       [2*MB_WIDTH][y];
				pictureBuffer[picCurrIdx][(picWidthInMacroB + 2) * MB_WIDTH + x]
				    [y] := pictureBuffer[picCurrIdx]
				               [(picWidthInMacroB + 2) * MB_WIDTH - 1][y];
			end
		end
		foreach int x in 0 .. (picWidthInMacroB + 4) * MB_WIDTH - 1 do
			foreach int y in 0 .. 2*MB_WIDTH - 1 do
				pictureBuffer[picCurrIdx][x][y] := pictureBuffer[picCurrIdx][x]
				                                       [2*MB_WIDTH];
				pictureBuffer[picCurrIdx][x][(picHeightInMacroB + 2) * MB_WIDTH + y]
				    := pictureBuffer[picCurrIdx][x]
				           [(picHeightInMacroB + 2) * MB_WIDTH - 1];
			end
		end
	end

	readDelList.launch: action DelList:[DelPoc , DelFrame] ==>
	guard
		DelPoc != SENT_DONE
	do
		foreach int i in 0 .. NB_PIC - 1 do
			if(listFrameNum[i] = DelFrame) then
				listFrameNum[i] := -1;
			end
		end
	end

	readDelList.done: action DelList:[DelVal] ==>
	end
  
	schedule fsm  GetIsNewPic:
		GetIsNewPic       (getIsNewPic        )--> Checkread;

		Checkread         (getReadAddr        )--> Read;
		Checkread         (readDone           )--> ReadDelList;

		Read              (readData.launch    )--> Read;
		Read              (readData.done      )--> Checkread;

		ReadDelList       (readDelList.launch )--> ReadDelList;
		ReadDelList       (readDelList.done   )--> ReadRefParameters;

		ReadRefParameters (readRefParameters  )--> Write;

		Write             (writeData.launch   )--> Write;
		Write             (writeData.done     )--> Checkread;
	end
	priority
		getReadAddr        > readDone;
		readData.launch    > readData.done;
		writeData.launch   > writeData.done;
		readDelList.launch > readDelList.done;
	end
end
