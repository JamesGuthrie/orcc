/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package MPEG.MPEG4.part10;

import MPEG.MPEG4.part10.Common.Imp_MacroBlockInfo.*;
import MPEG.Common.Imp_PictureInfo.*;

actor Algo_DemuxParserInfoForBlocks_Luma()
	uint(size=6)  MBType,
//	bool          TransformSize8x8,
	int (size=9)  Coef_ACR,
	bool          ConstrainedIFlag,
	uint(size=4)  PredMode,
	uint(size=7)  MbLocation,
	bool          NeighbourAvail
		==>
	int (size=9)  Coef_ACR_Intra_4x4,
	bool          ConstrI_Intra_4x4,
	uint(size=4)  PredMode_4x4,
	bool          IsIntraFlag_4x4,
	bool          NeighbourAvail4x4,

	int (size=9)  Coef_ACR_Intra_16x16,
	bool          ConstrI_Intra_16x16,
	uint(size=4)  PredMode_16x16,
	bool          IsIntraFlag_16x16,
	bool          NeighbourAvail16x16,

	int (size=9)  Coef_ACR_Inter
		:



	bool AcrSent;
	bool ConstrISent;
	bool PredModeSent;
	bool IsIntraSent;
	bool IsNeighbourSent;


	List( type:bool, size = MAX_PICWIDTH_BLK) is_intra := [false : for int i in 0 .. MAX_PICWIDTH_BLK-1];
	bool          intra_top_left := false;	
	uint(size=13) curr_pos       := 0;
	bool          CurrValIsIntra := false;
/*
*
* Actions
*
*/

	MBTypeIsPCM: action
			MBType           :[ValMBType],
			ConstrainedIFlag :[c_intra_flag]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_PCM
		do
			AcrSent         := true;
			ConstrISent     := true;
			PredModeSent    := true;
			IsIntraSent     := false;
			IsNeighbourSent := false;

			CurrValIsIntra := true;
		end


	MBTypeIsIntra4x4: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType    = BLOCK_TYPE_I_NxN
		do
			AcrSent         := false;
			ConstrISent     := false;
			PredModeSent    := false;
			IsIntraSent     := false;
			IsNeighbourSent := false;

			CurrValIsIntra := true;	
		end

	SendAcr4x4: action
			Coef_ACR           :[ValCoef] repeat 256
				==>
			Coef_ACR_Intra_4x4 :[ValCoef] repeat 256
		guard
			not AcrSent
		do
			AcrSent := true;
		end

	SendCnstrI4x4: action
			ConstrainedIFlag  :[c_intra_flag]
				==>
			ConstrI_Intra_4x4 :[c_intra_flag]
		guard
			not ConstrISent
		do
			ConstrISent := true;
		end

	SendPredMode4x4: action
			PredMode     :[pred_mode] repeat 16
				==>
			PredMode_4x4 :[pred_mode] repeat 16
		guard
			not PredModeSent
		do
			PredModeSent := true;
		end


	SendIsIntra4x4: action
			MbLocation   :[MbLocxInPic , MbLocyInPic]
				==>
			IsIntraFlag_4x4 :[ is_intra[(curr_pos-1) & 0x3F] , is_intra[curr_pos & 0x3F] , is_intra[(curr_pos+1) & 0x3F] , intra_top_left ]
		guard
			not IsIntraSent
		do
			curr_pos    := MbLocxInPic;
			IsIntraSent := true;
		end

	SendNeighbourg4x4: action
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
			NeighbourAvail4x4 :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
		guard
			not IsNeighbourSent
		do
			IsNeighbourSent := true;
		end

	SendInfosDone: action ==>
		guard
			AcrSent,
			ConstrISent,
			PredModeSent,
			IsIntraSent,
			IsNeighbourSent
		do
			intra_top_left     := is_intra[curr_pos];
			is_intra[curr_pos] := CurrValIsIntra;
		end


	MBTypeIsIntra16x16: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType >= BLOCK_TYPE_INTRA_16x16_MIN,
			ValMBType <= BLOCK_TYPE_INTRA_16x16_MAX
		do
			AcrSent         := false;
			ConstrISent     := false;
			PredModeSent    := false;
			IsIntraSent     := false;
			IsNeighbourSent := false;

			CurrValIsIntra := true;
		end

	SendAcr16x16: action
			Coef_ACR             :[ValCoef] repeat 256
				==>
			Coef_ACR_Intra_16x16 :[ValCoef] repeat 256
		guard
			not AcrSent
		do
			AcrSent := true;
		end

	SendCnstrI16x16: action
			ConstrainedIFlag    :[c_intra_flag]
				==>
			ConstrI_Intra_16x16 :[c_intra_flag]
		guard
			not ConstrISent
		do
			ConstrISent := true;
		end

	SendPredMode16x16: action
			PredMode       :[pred_mode]
				==>
			PredMode_16x16 :[pred_mode]
		guard
			not PredModeSent
		do
			PredModeSent := true;
		end

	SendIsIntra16x16: action
			MbLocation   :[MbLocxInPic , MbLocyInPic]
				==>
			IsIntraFlag_16x16  :[ is_intra[(curr_pos-1) & 0x3F] , is_intra[curr_pos & 0x3F], intra_top_left ]
		guard
			not IsIntraSent
		do
			curr_pos    := MbLocxInPic;
			IsIntraSent := true;
		end

	SendNeighbourg16x16: action
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
			NeighbourAvail16x16 :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
		guard
			not IsNeighbourSent
		do
			IsNeighbourSent := true;
		end


	MBTypeIsInter: action
			MBType      :[ValMBType]
				==>
		guard
			ValMBType > BLOCK_TYPE_INTRA_MAX
		do
			AcrSent         := false;
			ConstrISent     := false;
			IsIntraSent     := false;
			PredModeSent    := true;
			IsNeighbourSent := false;

			CurrValIsIntra := false;
		end

	SendAcrInter: action
			Coef_ACR       :[ValCoef] repeat 256
				==>
			Coef_ACR_Inter :[ValCoef] repeat 256
		guard
			not AcrSent
		do
			AcrSent := true;
		end

	GetCnstrIAndFstMbInter: action
			ConstrainedIFlag :[c_intra_flag]
				==>
		guard
			not ConstrISent
		do
			ConstrISent := true;
		end

	UpdateIsIntra: action
			MbLocation     :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
		guard
			not IsIntraSent
		do
			curr_pos        := MbLocxInPic;
			IsIntraSent     := true;
			IsNeighbourSent := true;
		end	

	schedule fsm CheckMbType:
		CheckMbType         (MBTypeIsPCM             )--> SendPCMInfos;
		CheckMbType         (MBTypeIsIntra4x4        )--> SendIntra4x4Infos;
		CheckMbType         (MBTypeIsIntra16x16      )--> SendIntra16x16Infos;
		CheckMbType         (MBTypeIsInter           )--> SendInterInfos;

		SendIntra4x4Infos   (SendAcr4x4              )--> SendIntra4x4Infos;
		SendIntra4x4Infos   (SendCnstrI4x4           )--> SendIntra4x4Infos;
		SendIntra4x4Infos   (SendPredMode4x4         )--> SendIntra4x4Infos;
		SendIntra4x4Infos   (SendIsIntra4x4          )--> SendIntra4x4Infos;
		SendIntra4x4Infos   (SendNeighbourg4x4       )--> SendIntra4x4Infos;
		SendIntra4x4Infos   (SendInfosDone           )--> CheckMbType;

		SendIntra16x16Infos (SendAcr16x16            )--> SendIntra16x16Infos;
		SendIntra16x16Infos (SendCnstrI16x16         )--> SendIntra16x16Infos;
		SendIntra16x16Infos (SendPredMode16x16       )--> SendIntra16x16Infos;	
		SendIntra16x16Infos (SendIsIntra16x16        )--> SendIntra16x16Infos;	
		SendIntra16x16Infos (SendNeighbourg16x16     )--> SendIntra16x16Infos;	
		SendIntra16x16Infos (SendInfosDone           )--> CheckMbType;

		SendInterInfos      (SendAcrInter            )--> SendInterInfos;
		SendInterInfos      (GetCnstrIAndFstMbInter  )--> SendInterInfos;
		SendInterInfos      (UpdateIsIntra           )--> SendInterInfos;
		SendInterInfos      (SendInfosDone           )--> CheckMbType;

		SendPCMInfos        (UpdateIsIntra           )--> SendPCMInfos;
		SendPCMInfos        (SendInfosDone           )--> CheckMbType;
	end
end