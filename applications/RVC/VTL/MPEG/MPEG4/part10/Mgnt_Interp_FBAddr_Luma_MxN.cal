/**
 * This software module was originally developed by 
 * He-Yuan Lin (NCKU), 
 * in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
 * for reference purposes and its performance may not have been optimized. 
 * This software module is an implementation of one or more tools as 
 * specified by the ISO/IEC 23002-4.
 * 
 * ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
 * license to copy, distribute, and make derivative works of this software 
 * module or modifications thereof for use in implementations of the 
 * ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
 * 
 * Those intending to use this software module in products are advised that 
 * its use may infringe existing patents. ISO/IEC have no liability for use 
 * of this software module or modifications thereof.
 * 
 * Copyright is not released for products that do not conform to audiovisual 
 * and image-coding related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * Assurance that the originally developed software module can be used 
 * (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
 * (2) to develop the ISO/IEC 23002-4: 
 *
 *
 * NCKU grants ISO/IEC all rights necessary to 
 * include the originally developed software module or modifications thereof 
 * in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
 * worldwide, non-exclusive, copyright license to copy, distribute, and make 
 * derivative works for use in implementations of the ISO/IEC 23002-4 in 
 * products that satisfy conformance criteria (if any), and to the extent 
 * that such originally developed software module or portions of it are 
 * included in the ISO/IEC 23002-4.  To the extent that NCKU
 * owns patent rights that would be required to make, use, or 
 * sell the originally developed software module or portions thereof 
 * included in the ISO/IEC 23002-4 in a conforming product, NCKU
 * Rennes will assure the ISO/IEC that it is willing to 
 * negotiate licenses under reasonable and non-discriminatory terms and 
 * conditions with applicants throughout the world.
 *
 * ISO/IEC gives You a free license to this software module or modifications 
 * thereof for the sole  purpose of developing the ISO/IEC 23002-4.
 * 
 * NCKU Rennes retains full right to modify and use the 
 * code for its own purpose, assign or donate the code to a third party and 
 * to inhibit third parties from using the code for products that do not 
 * conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * This copyright notice must be included in all copies or derivative works. 
 * Copyright (c) ISO/IEC 2006-2010.
 */

//Modified by Florian DECOLOGNE (IETR) : 15/09/08 : 
//Mgnt_FBAddr_Luma_MxN --> Mgnt_Interp_FBAddr_Luma_MxN

//Modified by Endri Bezati <endri.bezati@insa-rennes.fr>
//Modified the "size" correctly to work with orcc
package MPEG.MPEG4.part10;
import std.util.BitOps.*;

actor Mgnt_Interp_FBAddr_Luma_MxN ()
		int (size=9)  Coef_ACR_i,
		uint(size=13) CurrMbAddr,
		uint(size=3) MbPartIdx,
		uint (size=8) Mb_Type,
		uint(size=13) PicSizeInMb,
		uint(size=6) PartSZ,
		bool Write_Done
		==>
		int (size=9)  Coef_ACR_o,
		bool PicID
	:
  int count:=0;
  int currMB                := 0;
  int pic_size              := 0;
  bool ValPicID     := false;
  

  //Mb_Type_NOK : Consume the token, nothing else to do 
  Mb_Type_NOK :action Mb_Type:[a],  PicSizeInMb:[ c ], CurrMbAddr:[valCurrMbAddr] ==> 
  guard 
  	a != 2
  do
  	currMB:=valCurrMbAddr;
  	pic_size:=c;
  end
  
  //Mb_Type_OK : Enable the prediction 
  Mb_Type_OK :action Mb_Type:[a], PicSizeInMb:[ c ], CurrMbAddr:[valCurrMbAddr],  Coef_ACR_i:[coef] repeat 16 * 16 ==> Coef_ACR_o:[coef] repeat 16 * 16 
  guard
  	a = 2
  do 
  	currMB:=valCurrMbAddr;
  	pic_size:=c;
  end
  
  get_pos: action MbPartIdx:[idx], PartSZ:[ width, height ] ==>PicID :[ValPicID]
  do
    count := if width=16 and height=16 then
       count+(width >> 2)*(height >> 2)
    else 
    if height = 16 and width = 8 then //mode16x8
   	  if idx = 0 then 4 else 16 end 
    else 
    if height = 8 and width = 16 then //mode 8x16
      count+(width >> 2)*(height >> 2)
    else 
    if height = 8 and width = 8 then // mode8x8
      count+(width >> 2)*(height >> 2)
    else 
    if height = 8 and width = 4 then //mode 8x4
      count+1+(idx << 1)
    else 
    if height = 4 and width = 8 then //mode 4x8
      count+(width >> 2)*(height >> 2)
    else // if mbpart_h = 4 and mbpart_w = 4 then mode4x4 
      count+(width >> 2)*(height >> 2)
    end end end end end end;
    
    
  end
  
  MB_done: action ==>
  guard
    count = 16
  do
  	count:=0;
  end
  
  MB_Ndone: action ==>
  end

  PIC_done: action Write_Done:[w_done]==> PicID     : [ValPicID]
  guard currMB=pic_size-1
  do
  	ValPicID := not(ValPicID);
  end

  PIC_Ndone: action ==>
  guard currMB<pic_size-1
  end

  schedule fsm get_MB:
    get_MB      		( Mb_Type_NOK       	) --> get_pic_done;
    get_pic_done   		( PIC_done       		) --> get_MB;
    get_pic_done   		( PIC_Ndone       		) --> get_MB;
    get_MB      		( Mb_Type_OK        	) --> get_pos;
    get_pos        		( get_pos        		) --> MB_done;
    MB_done      		( MB_done         		) --> get_pic_done;
    MB_done      		( MB_Ndone         		) --> get_pos;
   end

  priority
     Mb_Type_OK > Mb_Type_NOK;
     MB_done    > MB_Ndone ;
     PIC_done > PIC_Ndone;
  end

end