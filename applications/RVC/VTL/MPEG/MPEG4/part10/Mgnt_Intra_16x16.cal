/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 
Manager for a full macroblock intra Prediction
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/
//Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
package MPEG.MPEG4.part10;

import MPEG.Common.Imp_PictureInfo.*;

actor Mgnt_Intra_16x16 (int MB_WIDTH)
	bool          NeighbourAvail,
	uint(size=4)  PredMode,
	uint(size=16) EDGE
		==> 
		uint(size=1) Avail,
		uint(size=4) PredMode_I,
		int(size=16) Y_Left,
		int(size=16) Y_Up,
		int(size=16) Y_UpLeft
		:  
	int MB_WIDTH_MAX    = 16;
	//List that contains the neighbouring pixel of the current 16x16 Mb, from bottom to top then left to right 
	List( type:uint(size=16), size=MB_WIDTH_MAX ) left_16x16_edge := [ 0 : for int i in 0 .. MB_WIDTH_MAX-1];
  	List( type:uint(size=16), size=MB_WIDTH_MAX + 4 ) top_16x16_edge := [ 0 : for int i in 0 .. MB_WIDTH_MAX+3];
  	uint(size=16) topLeft_16x16_edge := 0;
  
	// Available edge for prediction [left, top, top left, top right]
	List( type:uint(size=1), size=3 ) avail := [ 0 : for int i in 0 .. 2 ];
	
	// Available 16x16 edge for prediction
	bool left_16x16_avail := false;
	bool top_16x16_avail := false;
	bool topLeft_16x16_avail := false;


	
  //******************************* Enable or not Prediction management ********************************************
 
  
	//Mb_Type_OK : Enable the prediction 
	MbTypeOK:action
		NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail],
		PredMode:[v]
			==>
		PredMode_I:[v]
	do
		//Set 16x16 the available edge
		left_16x16_avail := NeighbourA_Avail;
		top_16x16_avail := NeighbourB_Avail;
		topLeft_16x16_avail :=  NeighbourD_Avail;

	end

	//******************************* Receiving required token ********************************************
  
	//Receive the value of the 16x16 Mb neighbouring pixel from bottom to top, then corner, then left to right 
	InitEdge_CHROMA:action EDGE:[v] repeat 2*MB_WIDTH_CHROMA+1 ==>
	guard
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		//Store left, top and top left border
		left_16x16_edge := [v[s]:for int s in 0 .. MB_WIDTH_CHROMA-1];
		topLeft_16x16_edge := v[MB_WIDTH_CHROMA];
		top_16x16_edge := [v[s]:for int s in MB_WIDTH_CHROMA+1 .. 2*MB_WIDTH_CHROMA];
	end
  
	//Receive the value of the 16x16 Mb neighbouring pixel from bottom to top, then corner, then left to right 
	InitEdge_LUMA:action EDGE:[v] repeat 2*MB_WIDTH_LUMA+1 ==> 
	do
		//Store left, top and top left border
		left_16x16_edge := [v[s]:for int s in 0 .. MB_WIDTH_LUMA-1];
		topLeft_16x16_edge := v[MB_WIDTH_LUMA];
		top_16x16_edge := [v[s]:for int s in MB_WIDTH_LUMA+1 .. 2*MB_WIDTH_LUMA];
	end
   
	//******************************* Processing ********************************************
 
	//**** Select and send available edge ****
	InitAvail:action ==> Avail:[ [ avail[s] : for int s in 0 .. 2 ] ] repeat 3
	do
		//edge available for left
		avail[0] := if left_16x16_avail then 1 else 0 end;
		//edge available for top
		avail[1] := if top_16x16_avail then 1 else 0 end;
		//edge available for top left
		avail[2] := if topLeft_16x16_avail then 1 else 0 end;
  	end
  
	//**** Send neighbouring pixel value ****
  
	ResetNone:action ==> 
	guard 
		avail[0] = 0,
		avail[1] = 0,
		avail[2] = 0
	end 

	//Left neighbour from 16x16 edge
	Reset.AvailLeft_CHROMA:action ==> Y_Left:[[left_16x16_edge[s]: for int s in 0 .. MB_WIDTH_CHROMA-1]]repeat MB_WIDTH_CHROMA
	guard 
		avail[0] = 1,
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		avail[0] := 0;
	end 

	//Left neighbour from 16x16 edge
	Reset.AvailLeft_LUMA:action ==> Y_Left:[left_16x16_edge]repeat MB_WIDTH_LUMA
	guard 
		avail[0] = 1
	do
		avail[0] := 0;
	end 
  
	//Top and right neighbour from 16x16 edge
	Reset.AvailTop_CHROMA:action ==> Y_Up:[[top_16x16_edge[s]: for int s in 0 .. MB_WIDTH_CHROMA-1]]repeat MB_WIDTH_CHROMA
	guard 
		avail[1] = 1,
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		avail[1] := 0;
	end
  
	//Top and right neighbour from 16x16 edge
	Reset.AvailTop_LUMA:action ==> Y_Up:[[top_16x16_edge[s]: for int s in 0 .. MB_WIDTH_LUMA-1]]repeat MB_WIDTH_LUMA
	guard 
		avail[1] = 1,
		MB_WIDTH = MB_WIDTH_LUMA
	do
		avail[1] := 0;
	end
  
	//Up Left neighbour
	Reset.AvailTopLeft:action ==> Y_UpLeft:[topLeft_16x16_edge]
	guard 
		avail[2] = 1
	do
		avail[2] := 0;
	end
	
	schedule fsm Mb_Type:
		Mb_Type  (MbTypeOK        )--> InitEdge;
		InitEdge (InitEdge_CHROMA )--> InitAvail;
		InitEdge (InitEdge_LUMA   )--> InitAvail;
		InitAvail(InitAvail       )--> Reset;
		Reset    (ResetNone       )--> Mb_Type;
		Reset    (Reset           )--> Reset;
	end
	
	priority
		ResetNone > Reset.AvailLeft_CHROMA > Reset.AvailLeft_LUMA > Reset.AvailTopLeft;
		Reset.AvailTop_CHROMA              > Reset.AvailTop_LUMA;
		InitEdge_CHROMA                    > InitEdge_LUMA;
	end
end