/**
 * This software module was originally developed by 
 * He-Yuan Lin (NCKU), 
 * in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
 * for reference purposes and its performance may not have been optimized. 
 * This software module is an implementation of one or more tools as 
 * specified by the ISO/IEC 23002-4.
 * 
 * ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
 * license to copy, distribute, and make derivative works of this software 
 * module or modifications thereof for use in implementations of the 
 * ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
 * 
 * Those intending to use this software module in products are advised that 
 * its use may infringe existing patents. ISO/IEC have no liability for use 
 * of this software module or modifications thereof.
 * 
 * Copyright is not released for products that do not conform to audiovisual 
 * and image-coding related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * Assurance that the originally developed software module can be used 
 * (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
 * (2) to develop the ISO/IEC 23002-4: 
 *
 *
 * NCKU grants ISO/IEC all rights necessary to 
 * include the originally developed software module or modifications thereof 
 * in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
 * worldwide, non-exclusive, copyright license to copy, distribute, and make 
 * derivative works for use in implementations of the ISO/IEC 23002-4 in 
 * products that satisfy conformance criteria (if any), and to the extent 
 * that such originally developed software module or portions of it are 
 * included in the ISO/IEC 23002-4.  To the extent that NCKU
 * owns patent rights that would be required to make, use, or 
 * sell the originally developed software module or portions thereof 
 * included in the ISO/IEC 23002-4 in a conforming product, NCKU
 * Rennes will assure the ISO/IEC that it is willing to 
 * negotiate licenses under reasonable and non-discriminatory terms and 
 * conditions with applicants throughout the world.
 *
 * ISO/IEC gives You a free license to this software module or modifications 
 * thereof for the sole  purpose of developing the ISO/IEC 23002-4.
 * 
 * NCKU Rennes retains full right to modify and use the 
 * code for its own purpose, assign or donate the code to a third party and 
 * to inhibit third parties from using the code for products that do not 
 * conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * This copyright notice must be included in all copies or derivative works. 
 * Copyright (c) ISO/IEC 2006-2010.
 */
// Algo_Interp_EighthPelBilinear.cal
//
// Author: He-Yuan Lin
//
// Fractional chroma sample interpolation for motion compensation of AVC

package MPEG.MPEG4.part10;

actor Algo_Interp_EighthPelBilinear() 
		int(size=16) Mv, 
		uint(size=8) RD, 
		uint(size=6) PartSZ 
				==> 
		uint(size=8) Interp:

  int(size=32) x ;
  int(size=32) y ;
  int(size=32) o_x ;
  int(size=32) o_y ;
  int(size=32) x_index ;
  int(size=32) y_index ;
  int temp;
  int width;
  int height;

  List( type:uint(size=8), size=289 ) inbuf := [ 0 : for int i in 0 .. 288 ];

  procedure compensate( )
  begin  
      temp := (8-x_index)*(8-y_index)*inbuf[ ( o_x) + ( o_y) * 17 ]+ (x_index)*(8-y_index)* inbuf[ ( 1 + o_x) + (o_y) * 17 ];
      temp := temp + (8-x_index)*(y_index)*inbuf[ ( 0 + o_x) + ( 1 + o_y) * 17 ]+x_index*y_index*inbuf [ ( 1 + o_x) + ( 1 + o_y) * 17 ] + 32;
      temp := (temp >> 6);
  end

  get_fract_x: action Mv:[ MovementVector ] ==>
  do
    x := 0;
    y := 0;
    o_x := 0;
    o_y := 0;
    x_index := MovementVector & 7;
  end

  get_fract_y: action Mv:[ MovementVector ] ==>
  do
    y_index := MovementVector & 7;
  end

  getwidth: action PartSZ:[ f ] ==>
  do
    width :=f/2;
  end

  getheight: action PartSZ:[ f ] ==>
  do
    height :=f/2;
  end

  // fetch (width+1)x(height+1) pixels
  fetch: action RD:[d] ==>
  guard 
   x < (width+1) and y < (height+1)
  do
   inbuf[y * 17 + x] := d;
   x := x + 1;
   if x >= (width+1) then
      x := 0;
      y := y + 1;
   end
  end

  done: action ==>
  guard
    o_y = height
  end
  
  // interpolation according to MODE
  process: action ==> Interp:[ p ]
  guard
    x = 0 and y = (height+1)
  var 
	uint(size=8) p
  do
   compensate();
   p := temp;
   o_x := o_x + 1;
   if o_x >= width then
      o_x := 0;
      o_y := o_y + 1;
    end
  end

  schedule fsm get_fract_x:
    get_fract_x  ( get_fract_x ) --> get_fract_y;

    get_fract_y  ( get_fract_y ) --> getwidth;

    getwidth     ( getwidth    ) --> getheight;

    getheight    ( getheight   ) --> interpolate;

    interpolate  ( fetch       ) --> interpolate;
    interpolate  ( done        ) --> get_fract_x;
    interpolate  ( process     ) --> interpolate;
  end

  priority
    done >  fetch > process  ;
  end

end