// Algo_Inversequant
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// MPEG-4 inverse quantization function

actor MPEG.MPEG4.part2.Algo_Inversequant () int(size=SAMPLE_SZ) DC, int(size=SAMPLE_SZ) AC,
int(size=QUANT_SZ) QP ==> int(size=SAMPLE_SZ) OUT :

// Port size declaration
	int SAMPLE_SZ = 13;

	int QUANT_SZ = 6;

	function saturate(int x) --> int
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :
		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end


	int(size=QUANT_SZ) quant;

	int(size=2) round;

	get_qp: action QP:[ q ], DC:[ i ] ==> OUT:[ i ]
	do
		quant := q;
		round := bitxor(bitand(q, 1), 1);
	end

	function abs(int x) --> int :
		if x < 0 then
			-x
		else
			x
		end
	end

	ac: action AC:[ i ] repeat 63 ==> OUT:[ o ] repeat 63
	var
		List(type: int(size=SAMPLE_SZ), size=63) v = [ (quant * (lshift(abs(i[j]), 1) + 1)) - round :
		for int j in 0 .. 62 ] , List(type: int(size=SAMPLE_SZ), size=63) o = [ if i[k] = 0 then
			0
		else
			if i[k] < 0 then
				saturate(-v[k])
			else
				saturate(v[k])
			end
		end : for int k in 0 .. 62 ]
	end

	schedule fsm start :
		start ( get_qp ) --> ac;
		ac ( ac ) --> start;
	end

end