actor Predictor_4 () int In, int BlockType ==> int Out0, int Out1, int Out2, int
Out3 :

	List(type: int, size=13) AtoM := [ 128 : for int t in Integers(0, 12) ];

	//BlockType=0	--> [ABCDIJKLEFGHM]
	//BlockType=1	--> [ABCDXXXXEFGHX]
	//BlockType=2	--> [XXXXIJKLXXXXX]
	//BlockType=3	--> [ABCDXXXXXXXXX]
	//BlockType=4	--> [ABCDIJKLXXXXM]
	int bType := 0;

	int i := 0;

	int offset := 0;

	int mode := 0;

	int mean := 0;

	BType: action BlockType:[ bt ] ==>
	do
		bType := bt;
		//println("Block Type is "+bType);

	end

	Read_In: action In:[ in0 ] ==>
	guard
		(i < 13 and bType = 0) or (i < 8 and bType = 1) or (i < 4 and bType = 2) or (
		i < 4 and bType = 3) or (i < 9 and bType = 4)
	do
		if (bType = 1) then
			if (i = 4) then
				offset := offset + 4;
			end
		else
			if (bType = 2) then
				if (i = 0) then
					offset := offset + 4;
				end
			else
				if (bType = 4) then
					if (i = 8) then
						offset := offset + 4;
					end
				end
			end
		end
		AtoM[i + offset] := in0;
		i := i + 1;
	end

	FinishIn: action ==>
	guard
		(i = 13 and bType = 0) or (i = 8 and bType = 1) or (i = 4 and bType = 2) or (
		i = 4 and bType = 3) or (i = 9 and bType = 4)
	do
		i := 0;
		offset := 0;
	end

	Mode0: action ==> Out0:[ AtoM[0] ], Out1:[ AtoM[1] ], Out2:[ AtoM[2] ], Out3:[
		AtoM[3] ]
	guard
		i < 4 and mode = 0 and (bType = 0 or bType = 1 or bType = 4)
	do
		i := i + 1;
		//println("Mode 0: "+AtoM[0]+", "+AtoM[1]+", "+AtoM[2]+", "+AtoM[3]);

	end

	FinishMode0: action ==>
	guard
		i = 4 and mode = 0 and (bType = 0 or bType = 1 or bType = 4)
	do
		i := 0;
		mode := 1;
	end

	Mode1: action ==> Out0:[ AtoM[3 + i] ], Out1:[ AtoM[3 + i] ], Out2:[ AtoM[3 +
		i] ], Out3:[ AtoM[3 + i] ]
	guard
		i < 4 and mode = 1 and (bType = 0 or bType = 2 or bType = 4)
	do
		i := i + 1;
		//println("Mode 1: "+AtoM[3+i]+", "+AtoM[3+i]+", "+AtoM[3+i]+", "+AtoM[3+i]);

	end

	FinishMode1: action ==>
	guard
		i = 4 and mode = 1 and (bType = 0 or bType = 2 or bType = 4)
	do
		i := 0;
		mode := 2;
	end

	Mode2: action ==> Out0:[ mean ], Out1:[ mean ], Out2:[ mean ], Out3:[ mean ]
	guard
		i < 4 and mode = 2
	do
		if i = 0 then
		//To prevent redundancy in calculations
			if bType = 0 or bType = 4 then
				mean := (AtoM[0] + AtoM[1] + AtoM[2] + AtoM[3] + AtoM[4] + AtoM[5] + AtoM[6
				] + AtoM[7] + 4) / 8;
			else
				if bType = 2 then
					mean := (AtoM[4] + AtoM[5] + AtoM[6] + AtoM[7] + 2) / 4;
				else
				//bType = 1 or bType = 3 (no left)
					mean := (AtoM[0] + AtoM[1] + AtoM[2] + AtoM[3] + 2) / 4;
				end
			end
		end
		i := i + 1;
		//println("Mode 2: "+mean+", "+mean+", "+mean+", "+mean);

	end

	FinishMode2: action ==>
	guard
		i = 4 and mode = 2
	do
		i := 0;
		mode := 3;
	end

	Mode3: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 3 and (bType = 0 or bType = 1)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
			pred1 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
			pred2 := (AtoM[2] + 2 * AtoM[3] + AtoM[4 + 4] + 2) / 4;
			pred3 := (AtoM[3] + 2 * AtoM[4 + 4] + AtoM[5 + 4] + 2) / 4;
		else
			if i = 1 then
				pred0 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
				pred1 := (AtoM[2] + 2 * AtoM[3] + AtoM[4 + 4] + 2) / 4;
				pred2 := (AtoM[3] + 2 * AtoM[4 + 4] + AtoM[5 + 4] + 2) / 4;
				pred3 := (AtoM[4 + 4] + 2 * AtoM[5 + 4] + AtoM[6 + 4] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[2] + 2 * AtoM[3] + AtoM[4 + 4] + 2) / 4;
					pred1 := (AtoM[3] + 2 * AtoM[4 + 4] + AtoM[5 + 4] + 2) / 4;
					pred2 := (AtoM[4 + 4] + 2 * AtoM[5 + 4] + AtoM[6 + 4] + 2) / 4;
					pred3 := (AtoM[5 + 4] + 2 * AtoM[6 + 4] + AtoM[7 + 4] + 2) / 4;
				else
				//i=3
					pred0 := (AtoM[3] + 2 * AtoM[4 + 4] + AtoM[5 + 4] + 2) / 4;
					pred1 := (AtoM[4 + 4] + 2 * AtoM[5 + 4] + AtoM[6 + 4] + 2) / 4;
					pred2 := (AtoM[5 + 4] + 2 * AtoM[6 + 4] + AtoM[7 + 4] + 2) / 4;
					pred3 := (AtoM[6 + 4] + 3 * AtoM[7 + 4] + 2) / 4;
					//Special Case
				end
			end
		end
		i := i + 1;
		//println("Mode 3: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode3: action ==>
	guard
		i = 4 and mode = 3 and (bType = 0 or bType = 1)
	do
		i := 0;
		mode := 4;
	end

	Mode4: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 4 and (bType = 0 or bType = 4)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
			pred1 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
			pred2 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
			pred3 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
		else
			if i = 1 then
				pred0 := (AtoM[12] + 2 * AtoM[4] + AtoM[5] + 2) / 4;
				pred1 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
				pred2 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
				pred3 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[4] + 2 * AtoM[5] + AtoM[6] + 2) / 4;
					pred1 := (AtoM[12] + 2 * AtoM[4] + AtoM[5] + 2) / 4;
					pred2 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
					pred3 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
				else
				//i=3
					pred0 := (AtoM[5] + 2 * AtoM[6] + AtoM[7] + 2) / 4;
					pred1 := (AtoM[4] + 2 * AtoM[5] + AtoM[6] + 2) / 4;
					pred2 := (AtoM[12] + 2 * AtoM[4] + AtoM[5] + 2) / 4;
					pred3 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
				end
			end
		end
		i := i + 1;
		//println("Mode 4: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode4: action ==>
	guard
		i = 4 and mode = 4 and (bType = 0 or bType = 4)
	do
		i := 0;
		mode := 5;
	end

	Mode5: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 5 and (bType = 0 or bType = 4)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[12] + AtoM[0] + 1) / 2;
			pred1 := (AtoM[0] + AtoM[1] + 1) / 2;
			pred2 := (AtoM[1] + AtoM[2] + 1) / 2;
			pred3 := (AtoM[2] + AtoM[3] + 1) / 2;
		else
			if i = 1 then
				pred0 := (AtoM[4] + 2 * AtoM[12] + AtoM[0] + 2) / 4;
				pred1 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
				pred2 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
				pred3 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[5] + 2 * AtoM[4] + AtoM[12] + 2) / 4;
					pred1 := (AtoM[12] + AtoM[0] + 1) / 2;
					pred2 := (AtoM[0] + AtoM[1] + 1) / 2;
					pred3 := (AtoM[1] + AtoM[2] + 1) / 2;
				else
				//i=3
					pred0 := (AtoM[6] + 2 * AtoM[5] + AtoM[4] + 2) / 4;
					pred1 := (AtoM[4] + 2 * AtoM[12] + AtoM[0] + 2) / 4;
					pred2 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
					pred3 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
				end
			end
		end
		i := i + 1;
		//println("Mode 5: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode5: action ==>
	guard
		i = 4 and mode = 5 and (bType = 0 or bType = 4)
	do
		i := 0;
		mode := 6;
	end

	Mode6: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 6 and (bType = 0 or bType = 4)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[12] + AtoM[4] + 1) / 2;
			pred1 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
			pred2 := (AtoM[5] + 2 * AtoM[4] + AtoM[12] + 2) / 4;
			pred3 := (AtoM[2] + 2 * AtoM[1] + AtoM[0] + 2) / 4;
		else
			if i = 1 then
				pred0 := (AtoM[4] + AtoM[5] + 1) / 2;
				pred1 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
				pred2 := (AtoM[12] + AtoM[4] + 1) / 2;
				pred3 := (AtoM[0] + 2 * AtoM[12] + AtoM[4] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[5] + AtoM[6] + 1) / 2;
					pred1 := (AtoM[4] + 2 * AtoM[5] + AtoM[6] + 2) / 4;
					pred2 := (AtoM[4] + AtoM[5] + 1) / 2;
					pred3 := (AtoM[12] + 2 * AtoM[0] + AtoM[1] + 2) / 4;
				else
				//i=3
					pred0 := (AtoM[6] + AtoM[7] + 1) / 2;
					pred1 := (AtoM[5] + 2 * AtoM[6] + AtoM[7] + 2) / 4;
					pred2 := (AtoM[5] + AtoM[6] + 1) / 2;
					pred3 := (AtoM[4] + 2 * AtoM[5] + AtoM[6] + 2) / 4;
				end
			end
		end
		i := i + 1;
		//println("Mode 6: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode6: action ==>
	guard
		i = 4 and mode = 6 and (bType = 0 or bType = 4)
	do
		i := 0;
		mode := 7;
	end

	Mode7: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 7 and (bType = 0 or bType = 1)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[0] + AtoM[1] + 1) / 2;
			pred1 := (AtoM[1] + AtoM[2] + 1) / 2;
			pred2 := (AtoM[2] + AtoM[3] + 1) / 2;
			pred3 := (AtoM[3] + AtoM[8] + 1) / 2;
		else
			if i = 1 then
				pred0 := (AtoM[0] + 2 * AtoM[1] + AtoM[2] + 2) / 4;
				pred1 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
				pred2 := (AtoM[2] + 2 * AtoM[3] + AtoM[8] + 2) / 4;
				pred3 := (AtoM[3] + 2 * AtoM[8] + AtoM[9] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[1] + AtoM[2] + 1) / 2;
					pred1 := (AtoM[2] + AtoM[3] + 1) / 2;
					pred2 := (AtoM[3] + AtoM[8] + 1) / 2;
					pred3 := (AtoM[8] + AtoM[9] + 1) / 2;
				else
				//i=3
					pred0 := (AtoM[1] + 2 * AtoM[2] + AtoM[3] + 2) / 4;
					pred1 := (AtoM[2] + 2 * AtoM[3] + AtoM[8] + 2) / 4;
					pred2 := (AtoM[3] + 2 * AtoM[8] + AtoM[9] + 2) / 4;
					pred3 := (AtoM[8] + 2 * AtoM[9] + AtoM[10] + 2) / 4;
				end
			end
		end
		i := i + 1;
		//println("Mode 7: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode7: action ==>
	guard
		i = 4 and mode = 7 and (bType = 0 or bType = 1)
	do
		i := 0;
		mode := 8;
	end

	Mode8: action ==> Out0:[ pred0 ], Out1:[ pred1 ], Out2:[ pred2 ], Out3:[ pred3
		]
	guard
		i < 4 and mode = 8 and (bType = 0 or bType = 2 or bType = 4)
	var
		int pred0 , int pred1 , int pred2 , int pred3
	do
		if i = 0 then
			pred0 := (AtoM[4] + AtoM[5] + 1) / 2;
			pred1 := (AtoM[4] + 2 * AtoM[5] + AtoM[6] + 2) / 4;
			pred2 := (AtoM[5] + AtoM[6] + 1) / 2;
			pred3 := (AtoM[5] + 2 * AtoM[6] + AtoM[7] + 2) / 4;
		else
			if i = 1 then
				pred0 := (AtoM[5] + AtoM[6] + 1) / 2;
				pred1 := (AtoM[5] + 2 * AtoM[6] + AtoM[7] + 2) / 4;
				pred2 := (AtoM[6] + AtoM[7] + 1) / 2;
				pred3 := (AtoM[6] + 3 * AtoM[7] + 2) / 4;
			else
				if i = 2 then
					pred0 := (AtoM[6] + AtoM[7] + 1) / 2;
					pred1 := (AtoM[6] + 3 * AtoM[7] + 2) / 4;
					pred2 := AtoM[7];
					pred3 := AtoM[7];
				else
				//i=3
					pred0 := AtoM[7];
					pred1 := AtoM[7];
					pred2 := AtoM[7];
					pred3 := AtoM[7];
				end
			end
		end
		i := i + 1;
		//println("Mode 8: "+pred0+", "+pred1+", "+pred2+", "+pred3);

	end

	FinishMode8: action ==>
	guard
		i = 4 and mode = 8 and (bType = 0 or bType = 2 or bType = 4)
	do
		i := 0;
		mode := 9;
	end

	SkipMode: action ==>
	do
		mode := mode + 1;
		//println("Mode Skipped");

	end

	FinishPrediction: action ==>
	guard
		mode = 9
	do
		mode := 0;
		//println("============ All Candidate Predictors of This Block Has Been Generated ============");

	end

	schedule fsm ReadBlockType :
		ReadBlockType ( BType ) --> ReadSamplesForPrediction;
		ReadSamplesForPrediction ( Read_In ) --> ReadSamplesForPrediction;
		ReadSamplesForPrediction ( FinishIn ) --> CheckMode;
		CheckMode ( Mode0 ) --> CheckMode;
		CheckMode ( FinishMode0 ) --> CheckMode;
		CheckMode ( Mode1 ) --> CheckMode;
		CheckMode ( FinishMode1 ) --> CheckMode;
		CheckMode ( Mode2 ) --> CheckMode;
		CheckMode ( FinishMode2 ) --> CheckMode;
		CheckMode ( Mode3 ) --> CheckMode;
		CheckMode ( FinishMode3 ) --> CheckMode;
		CheckMode ( Mode4 ) --> CheckMode;
		CheckMode ( FinishMode4 ) --> CheckMode;
		CheckMode ( Mode5 ) --> CheckMode;
		CheckMode ( FinishMode5 ) --> CheckMode;
		CheckMode ( Mode6 ) --> CheckMode;
		CheckMode ( FinishMode6 ) --> CheckMode;
		CheckMode ( Mode7 ) --> CheckMode;
		CheckMode ( FinishMode7 ) --> CheckMode;
		CheckMode ( Mode8 ) --> CheckMode;
		CheckMode ( FinishMode8 ) --> CheckMode;
		CheckMode ( SkipMode ) --> CheckMode;
		CheckMode ( FinishPrediction ) --> ReadBlockType;
	end

	priority
		Mode0 > SkipMode;
		FinishMode0 > SkipMode;
		Mode1 > SkipMode;
		FinishMode1 > SkipMode;
		Mode2 > SkipMode;
		FinishMode2 > SkipMode;
		Mode3 > SkipMode;
		FinishMode3 > SkipMode;
		Mode4 > SkipMode;
		FinishMode4 > SkipMode;
		Mode5 > SkipMode;
		FinishMode5 > SkipMode;
		Mode6 > SkipMode;
		FinishMode6 > SkipMode;
		Mode7 > SkipMode;
		FinishMode7 > SkipMode;
		Mode8 > SkipMode;
		FinishMode8 > SkipMode;
		FinishPrediction > SkipMode;
	end

end