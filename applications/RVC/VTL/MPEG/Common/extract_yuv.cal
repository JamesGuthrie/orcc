actor MPEG.Common.extract_yuv () int(size=16) Width, int(size=16) Height, uint(size=8) YUV ==>
int(size=PIX_SZ) Y , int(size=PIX_SZ) U , int(size=PIX_SZ) V :

// Port size declaration
	int PIX_SZ = 9;

	//constant definition
	int MAX_BLOCKSZ_Y = 16;

	int MAX_BLOCKSZ_UV = 16 / 2;

	int MAX_H = 1080;

	int MAX_W = 1920;

	//variables
	List(type: uint(size=PIX_SZ), size=MAX_W * MAX_H * 3 / 2) _buf;

	bool _pic := true;

	int _width_y;

	int _width_uv;

	int _height;

	int cnt_y;

	int cnt_u;

	int cnt_v;

	pic_done: action Width:[ width ], Height:[ height ] ==>
	guard
		_pic = true
	do
		_width_y := width * 16;
		_width_uv := width * 8;
		_height := height * 16;
		cnt_y := 0;
		cnt_u := _width_y * _height;
		cnt_v := _width_y * _height * 5 / 4;
		_pic := false;
	end

	read: action YUV:[ yuv ] ==>
	do
		_buf[cnt_y] := yuv;
		cnt_y := cnt_y + 1;
	end

	read_done: action ==>
	guard
		cnt_y = _height * _width_y * 3 / 2
	do
		cnt_y := 0;
	end

	// Select the Y blocks 
	write_Y: action ==> Y:[ _buf_y ] repeat MAX_BLOCKSZ_Y * MAX_BLOCKSZ_Y
	var
		List(type: int(size=PIX_SZ), size=MAX_BLOCKSZ_Y * MAX_BLOCKSZ_Y) _buf_y
	do
		foreach int i in 0 .. MAX_BLOCKSZ_Y - 1 do
			foreach int j in 0 .. MAX_BLOCKSZ_Y - 1 do
				_buf_y[(i * MAX_BLOCKSZ_Y) + j] := _buf[cnt_y + i * _width_y + j];
			end
		end
		cnt_y := cnt_y + MAX_BLOCKSZ_Y;
		if (cnt_y mod _width_y) = 0 then
			cnt_y := cnt_y + (MAX_BLOCKSZ_Y - 1) * _width_y;
		end
	end

	write_done: action ==>
	guard
		cnt_y = _width_y * _height
	do
		cnt_y := 0;
		cnt_u := 0;
		cnt_v := 0;
		_pic := true;
	end

	// Select the U blocks 
	write_U: action ==> U:[ _buf_u ] repeat MAX_BLOCKSZ_UV * MAX_BLOCKSZ_UV
	var
		List(type: int(size=PIX_SZ), size=MAX_BLOCKSZ_UV * MAX_BLOCKSZ_UV) _buf_u
	do
		foreach int i in 0 .. MAX_BLOCKSZ_UV - 1 do
			foreach int j in 0 .. MAX_BLOCKSZ_UV - 1 do
				_buf_u[i * MAX_BLOCKSZ_UV + j] := _buf[cnt_u + i * _width_uv + j];
			end
		end
		cnt_u := cnt_u + MAX_BLOCKSZ_UV;
		if (cnt_u mod (_width_uv)) = 0 then
			cnt_u := cnt_u + (MAX_BLOCKSZ_UV - 1) * (_width_uv);
		end
	end

	// Select the V blocks 
	write_V: action ==> V:[ _buf_v ] repeat MAX_BLOCKSZ_UV * MAX_BLOCKSZ_UV
	var
		List(type: int(size=PIX_SZ), size=MAX_BLOCKSZ_UV * MAX_BLOCKSZ_UV) _buf_v
	do
		foreach int i in 0 .. MAX_BLOCKSZ_UV - 1 do
			foreach int j in 0 .. MAX_BLOCKSZ_UV - 1 do
				_buf_v[i * MAX_BLOCKSZ_UV + j] := _buf[cnt_v + i * _width_uv + j];
			end
		end
		cnt_v := cnt_v + MAX_BLOCKSZ_UV;
		if (cnt_v mod (_width_uv)) = 0 then
			cnt_v := cnt_v + (MAX_BLOCKSZ_UV - 1) * (_width_uv);
		end
	end

	schedule fsm pic_done :
		pic_done ( pic_done ) --> read;
		read ( read ) --> read;
		read ( read_done ) --> write_y;
		write_y ( write_Y ) --> write_u;
		write_u ( write_U ) --> write_v;
		write_v ( write_V ) --> write_y;
		write_y ( write_done ) --> pic_done;
	end

	priority
		read_done > read;
		write_done > write_Y;
	end

end
