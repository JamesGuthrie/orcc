actor ModeSelector () int MBType, int SATD ==> int Mode, int Score:

	List (type:int, size=4) scores := [0: for int t in 0 .. 3];
	int score:=0;
	int mode:=0;
	int block:=0;
	int mbType:=0;
	 
	
	Read_MBType: action MBType:[m] ==> 
	do
		mbType:=m;
	end	
	
	//Read 16 scores for each mode
	InBlock: action SATD:[satd] ==>
	guard block<16
	do
		score:= score+satd;
		block:=block+1;	
	end

	FinishInBlock: action ==>
	guard block=16
	do
		block:=0;
		scores[mode]:= score;
		score:=0;
		mode:=mode+1;		
	end

	C: action ==> Mode:[bestMode], Score:[minscore_16]
	guard mode=4 and mbType=0
	var int bestMode, int minscore_16
	do
		mode:=0;
		if(scores[0]<=scores[1] and scores[0]<=scores[2] and scores[0]<=scores[3])then
			bestMode:= 0;
			minscore_16:=scores[0]; 
		else
			if(scores[1]<=scores[0] and scores[1]<=scores[2] and scores[1]<=scores[3])then
				bestMode:= 1;
				minscore_16:=scores[1];
			else
				if(scores[2]<=scores[0] and scores[2]<=scores[1] and scores[2]<=scores[3])then
					bestMode:= 2;
					minscore_16:=scores[2];
				else
					bestMode:= 3;
					minscore_16:=scores[3];
				end	
			end
		end
		println("minscore_16");
	end		
	
	
	D: action ==> Mode:[bestMode], Score:[minscore_16]
	guard mode=2 and mbType=1	//Upper border MB, hence two possible modes	(horizontal and DC)
	var int bestMode, int minscore_16
	do
		mode:=0;
		if(scores[0]<=scores[1])then
			bestMode:= 1;
			minscore_16:=scores[0];
		else
			bestMode:= 2;
			minscore_16:=scores[1];	
		end
		println("minscore_16");
	end		
	
	E: action ==> Mode:[bestMode], Score:[minscore_16]
	guard mode=2 and mbType=2	//first MB in a row that is not an upper border, hence two possible modes (vertical and DC)
	var int bestMode, int minscore_16
	do
		mode:=0;
		if(scores[0]<=scores[1])then
			bestMode:= 0;
			minscore_16:=scores[0];
		else
			bestMode:= 2;
			minscore_16:=scores[1];
		end
		println("minscore_16");
	end		
	
	
	schedule fsm s0:
		s0(Read_MBType) --> s1;
		s1(InBlock) --> s1;
		s1(FinishInBlock) --> s1;
		s1(C) --> s0;
		s1(D) --> s0;
		s1(E) --> s0;
	end
	
	priority
		C>InBlock;
		D>InBlock;
		E>InBlock;
	end
	
end