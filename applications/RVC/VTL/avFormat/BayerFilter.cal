/*
*	author:			alhadi.abrahman@epfl.ch
*	description: 	bayer filter based on "improved linear interpolation (H.S Malvar et al)"				
*	input: 			imgSize - size of image with first LSB 16 bit as width and MSB 16 bit as height
*					inData0 to inData 12 - 13 data inputs for filtering from a specific cache
*	output: 		R - Red output
*					G - Green output
*					B - Blue output
*/

actor BayerFilter () 
	int(size=16) WIDTH,
    int(size=16) HEIGHT,
	int (size = 8) inData0, 
	int (size = 8) inData1, 
	int (size = 8) inData2, 
	int (size = 8) inData3, 
	int (size = 8) inData4, 
	int (size = 8) inData5, 
	int (size = 8) inData6, 
	int (size = 8) inData7, 
	int (size = 8) inData8, 
	int (size = 8) inData9, 
	int (size = 8) inData10, 
	int (size = 8) inData11, 
	int (size = 8) inData12 
		==> 
			int (size = 8) R, 
			int (size = 8) G, 
			int (size = 8) B,
			int (size=16) WIDTH_OUT,
			int (size=16) HEIGHT_OUT :
	
	int width := 0;
	int height := 0;
	bool getSz := true;
	bool startR := false;
	bool startG1 := false;
	bool startG2 := false;
	bool startB := false;
	int i := 0;
	
	int (size = 23) ind0t  := 0;
	int (size = 23) ind1t := 0;
	int (size = 23) ind2t  := 0;
	int (size = 23) ind3t := 0;
	int (size = 23) ind4t := 0;
	int (size = 23) ind5t := 0;
	int (size = 23) ind6t := 0;
	int (size = 23) ind7t := 0;
	int (size = 23) ind8t := 0;
	int (size = 23) ind9t := 0;
	int (size = 23) ind10t := 0;
	int (size = 23) ind11t := 0;
	int (size = 23) ind12t := 0;
	
	int (size = 23) ind20t  := 0;
	int (size = 23) ind21t := 0;
	int (size = 23) ind22t  := 0;
	int (size = 23) ind23t := 0;
	int (size = 23) ind24t := 0;
	int (size = 23) ind25t := 0;
	int (size = 23) ind26t := 0;
	int (size = 23) ind27t := 0;
	int (size = 23) ind28t := 0;
	int (size = 23) ind29t := 0;
	int (size = 23) ind210t := 0;
	int (size = 23) ind211t := 0;
	int (size = 23) ind212t := 0;
	
	int r := 0;
	int g := 0;
	int b := 0;
	
	//function getWidth(int(size=32) sizeOfImage) --> int(size=16): bitand(sizeOfImage ,65535) end
    //function getHeight(int(size=32) sizeOfImage) --> int(size=16): rshift(sizeOfImage ,16) end
	
	getSZ : action WIDTH:[w],HEIGHT:[h] ==> WIDTH_OUT:[w-4],HEIGHT_OUT:[h-4]
    guard getSz = true
    do
    	width := w;
		height := h;
		//println("getSz "+width+" "+height);
		getSz := false;
		startR := true;
    end
    
    
    onR : action inData0: [ind0], inData1: [ind1], inData2: [ind2], inData3: [ind3], inData4: [ind4],
					inData5: [ind5], inData6: [ind6], inData7: [ind7], inData8: [ind8], inData9: [ind9],
					inData10: [ind10], inData11: [ind11], inData12: [ind12] ==> R: [r], G: [g], B: [b]
	guard startR = true
	do
		ind0t := ind0;
		ind1t := ind1;
		ind2t := ind2;
		ind3t := ind3;
		ind4t := ind4;
		ind5t := ind5;
		ind6t := ind6;
		ind7t := ind7;
		ind8t := ind8;
		ind9t := ind9;
		ind10t := ind10;
		ind11t := ind11;
		ind12t := ind12;
		ind20t := bitand(ind0t,255);
		ind21t := bitand(ind1t,255);
		ind22t := bitand(ind2t,255);
		ind23t := bitand(ind3t,255);
		ind24t := bitand(ind4t,255);
		ind25t := bitand(ind5t,255);
		ind26t := bitand(ind6t,255);
		ind27t := bitand(ind7t,255);
		ind28t := bitand(ind8t,255);
		ind29t := bitand(ind9t,255);
		ind210t := bitand(ind10t,255);
		ind211t := bitand(ind11t,255);
		ind212t := bitand(ind12t,255);
		//println("R");
		r := ind6;
		g := (-ind20t + (ind22t << 1) - ind24t + (ind25t << 1) + (ind26t << 2) + (ind27t << 1) - ind28t + (ind210t << 1) - ind212t + 1020) >> 4;
		b := ((ind20t*(-3) >> 1) + (ind21t << 1) + (ind23t << 1) + (ind24t*(-3) >> 1) + ind26t*6 + (ind28t*(-3) >> 1) + (ind29t << 1) + (ind211t << 1) + (ind212t*(-3) >> 1) + 1530)*819 >> 14; //filter here
		//println(r+" "+g+" "+b);
		i := i + 1;
		startR := false;
		startG1 := true;
	end
	
	onG1 : action inData0: [ind0], inData1: [ind1], inData2: [ind2], inData3: [ind3], inData4: [ind4],
					inData5: [ind5], inData6: [ind6], inData7: [ind7], inData8: [ind8], inData9: [ind9],
					inData10: [ind10], inData11: [ind11], inData12: [ind12] ==> R: [r], G: [g], B: [b]
	guard startG1 = true
	do
		ind0t := ind0;
		ind1t := ind1;
		ind2t := ind2;
		ind3t := ind3;
		ind4t := ind4;
		ind5t := ind5;
		ind6t := ind6;
		ind7t := ind7;
		ind8t := ind8;
		ind9t := ind9;
		ind10t := ind10;
		ind11t := ind11;
		ind12t := ind12;
		ind20t := bitand(ind0t,255);
		ind21t := bitand(ind1t,255);
		ind22t := bitand(ind2t,255);
		ind23t := bitand(ind3t,255);
		ind24t := bitand(ind4t,255);
		ind25t := bitand(ind5t,255);
		ind26t := bitand(ind6t,255);
		ind27t := bitand(ind7t,255);
		ind28t := bitand(ind8t,255);
		ind29t := bitand(ind9t,255);
		ind210t := bitand(ind10t,255);
		ind211t := bitand(ind11t,255);
		ind212t := bitand(ind12t,255);
		//println("G1");
		r := ((ind20t >> 1) - ind21t - ind23t - ind24t + (ind25t << 2) + ind26t*5 + (ind27t << 2) - ind28t - ind29t - ind211t + (ind212t >> 1) + 1530)*819 >> 14; //filter here
		g := ind6;
		b := (-ind20t - ind21t + (ind22t << 2) - ind23t + (ind24t >> 1) + ind26t*5 + (ind28t >> 1) - ind29t + (ind210t << 2) - ind211t - ind212t + 1530)*819 >> 14; //filter here
		//println(r+" "+g+" "+b);
		i := i + 1;
		startG1 := false;
		if (i >= width-4) then
			startG2 := true;
			i := 0;
		else
			startR := true;
		end
	end
    
    onG2 : action inData0: [ind0], inData1: [ind1], inData2: [ind2], inData3: [ind3], inData4: [ind4], 
					inData5: [ind5], inData6: [ind6], inData7: [ind7], inData8: [ind8], inData9: [ind9],
					inData10: [ind10], inData11: [ind11], inData12: [ind12] ==> R: [r], G: [g], B: [b]
    guard startG2 = true
	do
		ind0t := ind0;
		ind1t := ind1;
		ind2t := ind2;
		ind3t := ind3;
		ind4t := ind4;
		ind5t := ind5;
		ind6t := ind6;
		ind7t := ind7;
		ind8t := ind8;
		ind9t := ind9;
		ind10t := ind10;
		ind11t := ind11;
		ind12t := ind12;
		ind20t := bitand(ind0t,255);
		ind21t := bitand(ind1t,255);
		ind22t := bitand(ind2t,255);
		ind23t := bitand(ind3t,255);
		ind24t := bitand(ind4t,255);
		ind25t := bitand(ind5t,255);
		ind26t := bitand(ind6t,255);
		ind27t := bitand(ind7t,255);
		ind28t := bitand(ind8t,255);
		ind29t := bitand(ind9t,255);
		ind210t := bitand(ind10t,255);
		ind211t := bitand(ind11t,255);
		ind212t := bitand(ind12t,255);
		//println("G2");
		r := (-ind20t - ind21t + (ind22t << 2) - ind23t + (ind24t >> 1) + ind26t*5 + (ind28t >> 1) - ind29t + (ind210t << 2) - ind211t - ind212t + 1530)*819 >> 14; //filter here
		g := ind6;
		b := ((ind20t >> 1) - ind21t - ind23t - ind24t + (ind25t << 2) + ind26t*5 + (ind27t << 2) - ind28t - ind29t - ind211t + (ind212t >> 1) + 1530)*819 >> 14; //filter here
		//println(r+" "+g+" "+b);
		i := i + 1;
		startG2 := false;
		startB := true;
	end
	
	onB : action inData0: [ind0], inData1: [ind1], inData2: [ind2], inData3: [ind3], inData4: [ind4], 
					inData5: [ind5], inData6: [ind6], inData7: [ind7], inData8: [ind8], inData9: [ind9],
					inData10: [ind10], inData11: [ind11], inData12: [ind12] ==> R: [r], G: [g], B: [b]
	guard startB = true
	do
		ind0t := ind0;
		ind1t := ind1;
		ind2t := ind2;
		ind3t := ind3;
		ind4t := ind4;
		ind5t := ind5;
		ind6t := ind6;
		ind7t := ind7;
		ind8t := ind8;
		ind9t := ind9;
		ind10t := ind10;
		ind11t := ind11;
		ind12t := ind12;
		ind20t := bitand(ind0t,255);
		ind21t := bitand(ind1t,255);
		ind22t := bitand(ind2t,255);
		ind23t := bitand(ind3t,255);
		ind24t := bitand(ind4t,255);
		ind25t := bitand(ind5t,255);
		ind26t := bitand(ind6t,255);
		ind27t := bitand(ind7t,255);
		ind28t := bitand(ind8t,255);
		ind29t := bitand(ind9t,255);
		ind210t := bitand(ind10t,255);
		ind211t := bitand(ind11t,255);
		ind212t := bitand(ind12t,255);
		//println("B");
		g := (-ind20t + (ind22t << 1) - ind24t + (ind25t << 1) + (ind26t << 2) + (ind27t << 1) - ind28t + (ind210t << 1) - ind212t + 1020) >> 4;
		r := ((ind20t*(-3) >> 1) + (ind21t << 1) + (ind23t << 1) + (ind24t*(-3) >> 1) + ind26t*6 + (ind28t*(-3) >> 1) + (ind29t << 1) + (ind211t << 1) + (ind212t*(-3) >> 1) + 1530)*819 >> 14; //filter here		
		//r := ind0;
		//g := ind1;
		b := ind6; //filter here
		//println(r+" "+g+" "+b);
		i := i + 1;
		startB := false;
		if (i >= width-4) then
			startR := true;
			i := 0;
		else
			startG2 := true;
		end
	end
    
 end
    
    