/*
 * Copyright (c) 2009-2010, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
/* 
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *			alhadi.abrahman@epfl.ch - modified to work with CAL2HDL
 *
 * Create Date:   10/31/2008
 * Design Name:   RGBtoYCrCb
 * Project Name:  ColorSpace Converter
 * Tool versions:  Orcc
 * Description:   
 * 		This application note describes the implementation of
 *		an RGB color space to a YCbCr color space conversion
 *		circuit necessary in many video designs.
 * Dependencies:
 * 
 * Revision:
 * 		Revision 0.10
 * Additional Comments:
 *		Parameterization Values for the YCrCb Standard
 *		All coefficients have been multiplied by 1024.
 * Notes:
 *  (1)original[in RGB] --> YCrCb444 --> (2)displayed[in RGB]
 *	original 			displayed 	 			SNR[dB]		PSNR[dB]	RMSE	MAE   
 *  (1)lena 512x512 	(2)lena444 512x512		40.853		48.323		0.94	0.883
 */


actor avFormat.RGBtoYCrCb()
	int(size=8) R, 
	int(size=8) G, 
	int(size=8) B
		==>
			int(size=10) Y, 
			int(size=10) Cr, 
			int(size=10) Cb:
    
	int(size=18) YR = 306;
	int(size=18) YG = 601;
	int(size=18) YB = 117;
	int(size=18) CbR = 151;
	int(size=18) CbG = 296;
	int(size=18) CbB = 446;
	int(size=18) CrR = 630;
	int(size=18) CrG = 527;
	int(size=18) CrB = 102;
	
	int y := 0;
	int cr := 0;
	int cb := 0;
	int yt := 0;
	int crt := 0;
	int cbt := 0;
	
	int (size = 9) red_tmp := 0;
	int (size = 9) red_tmp2 := 0;
	int (size = 9) blue_tmp := 0;
	int (size = 9) green_tmp := 0;
	int (size = 9) blue_tmp2 := 0;
	int (size = 9) green_tmp2 := 0;
    
    RGBtoYCrCb.Fire : action R:[Red],
    						 G:[Green],
    						 B:[Blue] ==> Y:[y], 
    						 			  Cr:[cr], 
    						 			  Cb:[cb] //the only difference is luma is offset by +64
	var 
		int(size=18) Luma, 
		int(size=18) ChromaRed, 
		int(size=18) ChromaBlue
	do
		//change input from 8-bit to 9-bit for unsigned
		red_tmp2   := Red;
		red_tmp    := bitand(red_tmp2, 255);
		green_tmp2 := Green;
		green_tmp  := bitand(green_tmp2, 255);
		blue_tmp2  := Blue;
		blue_tmp   := bitand(blue_tmp2, 255);
	
		Luma       := (YR*red_tmp)+(YG*green_tmp)+(YB*blue_tmp); 
		yt         := rshift(Luma,8)+64;
		ChromaRed  := (CrR*red_tmp)-(CrG*green_tmp)-(CrB*blue_tmp);
		crt        := rshift(ChromaRed,8)+512;
		ChromaBlue := (CbB*blue_tmp)-(CbR*red_tmp)-(CbG*green_tmp);
		cbt        := rshift(ChromaBlue,8)+512;
		
		if yt > 0 then
			if yt < 1023 then
				y := yt;
			else
				y := 1023;
			end
		else
			y := 0;
		end
		if crt > 0 then
			if crt < 1023 then
				cr := crt;
			else
				cr := 1023;
			end
		else
			cr := 0;
		end
		if cbt > 0 then
			if cbt < 1023 then
				cb := cbt;
			else
				cb := 1023;
			end
		else
			cb := 0;
		end
		//println("y cr cb "+y+" "+cr+" "+cb);
	end
	
end
