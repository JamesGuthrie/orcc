/*-------------------------------------------------------------------
/*
 * Copyright (c) 2009-2010, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
/* 
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *			alhadi.abrahman@epfl.ch - modified to work with CAL2HDL
 *
 * Create Date:   11/31/2008
 * Design Name:   YCrCb422to444
 * Project Name:  Chroma Resampler
 * Tool versions:  Orcc
 * Description:   
 * 		This application note describes the implementation
 *		of circuit necessary to perform commonly used 
 *		conversions between various chroma formats.
 * Dependencies:
 * 
 * Revision:
 * 		Revision 0.10
 * Additional Comments:
 *		This actor is a 2:1 horizontal up conversion operation by using a 2-phase
 *		polyphase structure.
 * 		For the first phase, the default coefficients are equivalent to [0.5 0.5].
 *		These coefficients are represented in 2-bit form such that the integer
 *		representations are [1 1]. For the second phase, the coefficient for that
 *		phase being equal to 1 for one tap and zero for the others.
 *		This actor manages the edge effect.
 * Notes:
 *  (1)original[in RGB] --> YCrCb444 --> YCrCb422 --> YCrCb444 --> (2)displayed[in RGB]
 *	original 			displayed 	 			SNR[dB]		PSNR[dB]	RMSE	MAE   
 *  (1)lena 512x512 	(2)lena422 512x512		37.887		45.356		1.322	1.012
 */

actor avFormat.YCrCb422to444()
    int(size=10) CrCb422,
   int(size=16) WIDTH,
    int(size=16) HEIGHT
		==>
			int(size=10) Cr,
			int(size=10) Cb:
			
       
    //function getWidth(int(size=32) sizeOfImage) --> int(size=16): bitand(sizeOfImage ,65535) end
    //function getHeight(int(size=32) sizeOfImage) --> int(size=16): rshift(sizeOfImage ,16) end
    function tap(int(size=10) a,int(size=10) b) --> int(size=10) : (a + b)/2 end
   
   	int(size=11) ChromaR0 := 0;
   	int(size=11) ChromaB0 := 0;
   	int(size=11) ChromaR1 := 0;
   	int(size=11) ChromaB1 := 0;
    
    int(size=16) width := 0;
    int(size=16) height := 0; 
    
    int(size=16) i := 0;
    int(size=16) j := 0; 
    
    int CrOut := 0;
    int CbOut := 0;
    
    bool getSz := true;
    bool cr1Start := false;
    bool cr2Start := false;
    bool cbStart := false;
    
    int Cr_CoefA := 0;
    int Cr_CoefB := 0;
    int Cb_CoefA := 0;
    int Cb_CoefB := 0;
    
    YCrCb422to444.SizeOfImage : action WIDTH:[w],HEIGHT:[h] ==>
    guard 
    	getSz = true
	do
		width := w;
		height := h;
		i := 0;
		j := 0;
		getSz := false;
		cr1Start := true;
	end
   
	YCrCb422to444.Cr1Start : action CrCb422:[ChromaR] ==>
	guard 
		cr1Start = true
	do
		ChromaR0 := ChromaR;
		cr1Start := false;
		cbStart := true;
	end
	
	YCrCb422to444.CbStart : action CrCb422:[ChromaB] ==> Cr:[CrOut],
														 Cb:[CbOut]
	guard 
		cbStart = true
	do
		ChromaB0 := ChromaB;
		if (i = 0) then
			Cr_CoefA := ChromaR0;
			Cr_CoefB := ChromaR0;
			Cb_CoefA := ChromaB;
			Cb_CoefB := ChromaB;
		else
			Cr_CoefA := ChromaR0;
			Cr_CoefB := ChromaR1;
			Cb_CoefA := ChromaB0;
			Cb_CoefB := ChromaB1; 
		end 
		//println("coeffs Cr "+Cr_CoefA+" "+Cr_CoefB);
		//println("coeffs Cb "+Cb_CoefA+" "+Cb_CoefB);
		CrOut := tap(Cr_CoefA,Cr_CoefB);
		CbOut := tap(Cb_CoefA,Cb_CoefB);
		
		//println("CrOut "+CrOut);
		//println("CbOut "+CbOut);
		
		ChromaR1 := ChromaR0;
		ChromaB1 := ChromaB0;
		
		cbStart := false;
		cr2Start := true;
		
	end
	
	YCrCb422to444.Cr2Start : action CrCb422:[ChromaR] ==> Cr:[CrOut],Cb:[CbOut]
	guard 
		cr2Start = true
	do
		ChromaR0 := ChromaR;
		CrOut := ChromaR1;
		CbOut := ChromaB1;
		//println("ChromaROut "+CrOut);
		//println("ChromaBOut "+CbOut);
		i := i + 2;
		if i >= width then
			i := 0;
			j := j + 1;
		end
		
		cbStart := true;
		cr2Start := false;
	end

end
