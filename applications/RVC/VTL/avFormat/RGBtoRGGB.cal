/*
 * Copyright (c) 2009-2010, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
/* 
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *				alhadi.abrahman@epfl.ch - modified scheduling to work with CAL2HDL
 *
 * Create Date:   10/31/2008
 * Design Name:   RGBtoYCrCb
 * Project Name:  ColorSpace Converter
 * Tool versions:  Orcc
 * Description:   
 * 		This application note describes the implementation of
 *		an RGB color space to a YCbCr color space conversion
 *		circuit necessary in many video designs.
 * Dependencies:
 * 
 * Revision:
 * 		Revision 0.10
 * Additional Comments:
 *		Parameterization Values for the YCrCb Standard
 *		All coefficients have been multiplied by 1024.
 * Notes:
 *  (1)original[in RGB] --> YCrCb444 --> (2)displayed[in RGB]
 *	original 			displayed 	 			SNR[dB]		PSNR[dB]	RMSE	MAE   
 *  (1)lena 512x512 	(2)lena444 512x512		40.853		48.323		0.94	0.883
 */


package avFormat;

actor RGBtoRGGB()
	int(size=16) WIDTH,
    int(size=16) HEIGHT,
	int(size=8) R, 
	int(size=8) G, 
	int(size=8) B
		==>
			int(size=8) RGGB:
    
    //function getWidth(int(size=32) sizeOfImage) --> int(size=16): bitand(sizeOfImage ,65535) end
    //function getHeight(int(size=32) sizeOfImage) --> int(size=16): rshift(sizeOfImage ,16) end
    
    int(size=16) width := 8;
    int(size=16) height := 8; 
    
    int(size=16) i := 0;
    //int(size=16) j := 0; 
    
    bool Rout := false;
    bool Gout := false;
    bool Gout2 := false;
    bool Bout := false;
    bool getSz := true;
    
    mosaicingOfBayer.getSz: action WIDTH:[w],HEIGHT:[h] ==>
    guard 
    	getSz = true
    do
    	width := w;
		height := h;
		//println("getSz "+width+" "+height);
		getSz := false;
		Rout := true;
    end
    
    mosaicingOfBayer.R : action R:[Red],
    							G:[Green],
    							B:[Blue] ==> RGGB:[Red]
	guard 
		Rout = true
	do
		//println("R");
		i := i + 1;
		Rout := false;
		Gout := true;
	end

	mosaicingOfBayer.G : action R:[Red],
								G:[Green],
								B:[Blue] ==> RGGB:[Green]
	guard 
		Gout = true
	do
		//println("G1");
		i := i + 1;
		Gout := false;
		if  i >= width then
			Gout2 := true;
			i := 0;
		else
			Rout := true;
		end
	end
	
	mosaicingOfBayer.G2 : action R:[Red],
								 G:[Green],
								 B:[Blue] ==> RGGB:[Green]
	guard 
		Gout2 = true
	do
		//println("G2");
		i := i + 1;
		Gout2 := false;
		Bout := true;
	end

	mosaicingOfBayer.B : action R:[Red],
								G:[Green],
								B:[Blue] ==> RGGB:[Blue]
	guard 
		Bout = true
	do
		//println("B");
		i := i + 1;
		Bout := false;
		if (i >= width) then
			Rout := true;
			i := 0;
		else
			Gout2 := true;
		end
	end
	
end
