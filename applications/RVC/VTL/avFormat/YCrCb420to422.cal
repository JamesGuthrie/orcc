/*-------------------------------------------------------------------
/*
 * Copyright (c) 2009-2010, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
/* 
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *			alhadi.abrahman@epfl.ch - modified to work with CAL2HDL
 *
 * Create Date:   11/31/2008
 * Design Name:   YCrCb420to422
 * Project Name:  Chroma Resampler
 * Tool versions:  Orcc
 * Description:   
 * 		This application note describes the implementation
 *		of circuit necessary to perform commonly used 
 *		conversions between various chroma formats.
 * Dependencies:
 * 
 * Revision:
 * 		Revision 0.10
 * Additional Comments:
 * 		This actor is a 2:1 vertical up conversion operation. 
 *		By default, this is achieved using a 2-tap 2-phase structure with
 *		coefficients equivalent to [0.25 0.75] represented in 3-bit
 *		form by the integer set [1 3]. The second phase is achieved
 *		by reversing these coefficients. This actor manages the edge effect.
 * Notes:
 *  (1)original[in RGB] --> YCrCb444 -->  YCrCb422 --> YCrCb420 --> YCrCb422 --> YCrCb444 --> (2)displayed[in RGB]
 *	original 			displayed 	 			SNR[dB]		PSNR[dB]	RMSE	MAE   
 *  (1)lena 512x512 	(2)lena420 512x512		36.148		43.617		1.616	1.209
 */


actor avFormat.YCrCb420to422()
	int(size=16) WIDTH,
    int(size=16) HEIGHT,
	int(size=10) CrCb420
		==>
			int(size=10) CrCb422 :
       
	//Parameters
	int WidthMAX = 1024; //change to set max length 128
   	
    //function getWidth(int(size=32) sizeOfImage) --> int(size=16): bitand(sizeOfImage ,65535) end
    
    //function getHeight(int(size=32) sizeOfImage) --> int(size=16): rshift(sizeOfImage ,16) end
   	
   	function tap(int(size=10) a, int(size=10) b) --> int(size=10) : 
   		rshift(lshift(a,1)+a+b,2)//(3*a+b)/4
   	end 
   	
   	bool beginning := true;		
    int(size=16) width := 0;
    int(size=16) height := 0; 
    
    int(size=16) i := 0;
    int(size=16) j := 0; 
	
	bool getSz := true;
	bool nextPhaseStart := false;
	bool nextPhase2Start := false;
	bool phaseAStart := false;
	bool phaseBStart := false;
	
	//List(type: int(size=10), size=WidthMAX) Line1;
	//List(type: int(size=10), size=WidthMAX) Line0;
	//memory declaration for CAL2HDL
	List(type:int(size=10), size = WidthMAX) Line1 := [0 : for int k in 1 .. WidthMAX];
	List(type:int(size=10), size = WidthMAX) Line0 := [0 : for int k in 1 .. WidthMAX];
	
	YCrCb420to422.SizeOfImage : action WIDTH:[w],HEIGHT:[h] ==>
	guard 
		getSz = true
	do
		width := w;
		height := h;
		i := 0;
		j := 0;
		getSz := false;
		phaseAStart := true;
	end

	YCrCb420to422.NextPhase : action ==>
	guard 
		nextPhaseStart = true
	do
		i := 0;
		j := j + 1;
		nextPhaseStart := false;
		phaseBStart := true;
	end
	
	YCrCb420to422.NextPhase2 : action ==>
	guard 
		nextPhase2Start = true
	do
		i := 0;
		j := j + 1;
		nextPhase2Start := false;
		phaseAStart := true;
	end
	 
	 YCrCb420to422.PhaseA : action
        CrCb420:[ChromaX]
        ==>
        CrCb422:[q]
     guard 
     	phaseAStart = true
     var 
     	int(size=10) q 
     do
     	if beginning then
     		Line1[i] := ChromaX;       	
     	end
     	q := tap(Line1[i],ChromaX);
     	Line0[i] := ChromaX;
     	//println("outA: "+q);
		i := i + 1;
		if (i >= width) then
			phaseAStart := false;
			nextPhaseStart := true;
		end
     end

	 YCrCb420to422.PhaseB : action ==> CrCb422:[q]
     guard 
     	phaseBStart = true
     var 
     	int(size=10) q
     do
       	beginning := false;
     	q := tap(Line0[i],Line1[i]);
     	Line1[i] := Line0[i];
     	//println("outB: "+q);
		i := i + 1;
		if (i >= width) then
			phaseBStart := false;
			nextPhase2Start := true;
		end
     end
     
end