/*-------------------------------------------------------------------
/*
 * Copyright (c) 2009-2010, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
/* 
 * Author: Richard Thavot <richard.thavot@epfl.ch>
 *			alhadi.abrahman@epfl.ch - modified to work with CAL2HDL
 *
 * Create Date:   11/31/2008
 * Design Name:   YCrCb422to420
 * Project Name:  Chroma Resampler
 * Tool versions:  Orcc
 * Description:   
 * 		This application note describes the implementation
 *		of circuit necessary to perform commonly used 
 *		conversions between various chroma formats.
 * Dependencies:
 * 
 * Revision:
 * 		Revision 0.10
 * Additional Comments:
 * 		This actor is a 2:1 vertical down conversion operation.
 * 		By default, this is achieved using a 4-tap structure 
 *		with coefficients equivalent to [0.125 0.375 0.375 0.125]
 * 		represented in 4-bit form by the integer set [1 3 3 1].
 *		This actor manages the edge effect.
 * Notes:
 *  (1)original[in RGB] --> YCrCb444 -->  YCrCb422 --> YCrCb420 --> YCrCb422 --> YCrCb444 --> (2)displayed[in RGB]
 *	original 			displayed 	 			SNR[dB]		PSNR[dB]	RMSE	MAE   
 *  (1)lena 512x512 	(2)lena420 512x512		36.148		43.617		1.616	1.209
 */


package avFormat;

actor YCrCb422to420()
	int(size=16) WIDTH,
    int(size=16) HEIGHT,
    int(size=10) CrCb422
		==>
			int(size=10) CrCb420:
        
   	//Parameters
   	int WidthMAX = 1024;
   	
    //function getWidth(int(size=32) sizeOfImage) --> int(size=16): bitand(sizeOfImage ,65535) end
    //function getHeight(int(size=32) sizeOfImage) --> int(size=16): rshift(sizeOfImage ,16) end
   	function tap(int(size=10) a,int(size=10) b,int(size=10) c,int(size=10) d) --> int(size=10):
   		rshift(a + lshift(b,1) + b + lshift(c,1) + c + d , 3) //=(a+3*b+3*c+d)/8
   	end
   
	
    int(size=16) width := 0;
    int(size=16) height := 0; 
    
    int(size=16) i := 0;
    int(size=16) j := 0; 
    
    bool getSz := true;
    bool waitStart := false;
    bool nextStart := false;
    bool next2Start := false;
    bool fireStart := false;
    
    int crcbOut := 0;
	  
	//List(type: int(size=10), size=WidthMAX) Line1;
	//List(type: int(size=10), size=WidthMAX) Line0;
	//List(type: int(size=10), size=WidthMAX) Line2;
	
	List(type:int(size=10), size = WidthMAX) Line0 := [0 : for int k in 1 .. WidthMAX];
	List(type:int(size=10), size = WidthMAX) Line1 := [0 : for int k in 1 .. WidthMAX];
	List(type:int(size=10), size = WidthMAX) Line2 := [0 : for int k in 1 .. WidthMAX];

	YCrCb422to420.SizeOfImage : action WIDTH:[w],HEIGHT:[h] ==>
	guard 
		getSz = true
	do
		width := w;
		height := h;
		i := 0;
		j := 0;
		getSz := false;
		waitStart := true;
	end
	
	YCrCb422to420.Next : action ==>
	guard 
		nextStart = true
	do
		i := 0;
		j := j + 1;
		nextStart := false;
		fireStart := true;
	end
	
	YCrCb422to420.Next2 : action ==>
	guard 
		next2Start = true
	do
		i := 0;
		j := j + 1;
		next2Start := false;
		waitStart := true;
	end

	YCrCb422to420.Wait : action CrCb422:[ChromaX] ==>
	guard 
		waitStart = true
	do
		
		if (j = 0) then
			Line2[i] := ChromaX;
			Line1[i] := ChromaX;
			Line0[i] := ChromaX;
		else 
			Line2[i] := Line1[i];
			Line1[i] := Line0[i];
			Line0[i] := ChromaX;
		end
		i := i + 1;
		if i >= width then
			waitStart := false;
			nextStart := true;
		end
	end
     
	YCrCb422to420.Fire : action CrCb422:[ChromaX] ==> CrCb420:[crcbOut]
	guard 
		fireStart = true
	var 
		int(size=10) CoefA, 
		int(size=10) CoefB,
		int(size=10) CoefC, 
		int(size=10) CoefD
	do
		
	
		CoefA := Line2[i];
		CoefB := Line1[i];
		CoefC := Line0[i];
		CoefD := ChromaX;
		
		Line2[i] := Line1[i];
		Line1[i] := Line0[i];
		Line0[i] := ChromaX;
		
		crcbOut := tap(CoefA,CoefB,CoefC,CoefD);
		
		//println("crcbOut : "+crcbOut);
		
		i := i + 1;
		if i >= width then
			fireStart := false;
			next2Start := true;
		end
	end

end