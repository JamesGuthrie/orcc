/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference
 purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or 
modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software 
module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the 
MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the 
<standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use 
in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module 
or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure 
the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third 
parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
import orcc.Imp_DecodingFunctions.*;

actor Algo_DecodeSliceData_CAVLC(bool Is_CBP)
	int (size=32) ValVLD,

	int(size=5)   PpsParameters,
	uint(size=32) SpsParameters,
	uint(size=5)  NumRefIdxLXActive,
	//Slice Header Parameters
	uint(size=13) FstMbInSlc,
	uint(size=4)  SliceType,
	bool          MbaffFrame,
	uint(size=2)  DisDeblocFilterIdc,
	int(size=6)   SliceBetaOffset,
	int (size=6)  SliceAlphaC0Offset,
	int (size=8)  ValQp,

	uint(size=5)  Total_CoeffLuma,
	uint(size=5)  Total_CoeffChroma,
	int (size=8)  ValQpFeedback
		==>
	int (size=6)  TypeOfVLD,
	int (size=32) VLDParam,

	int (size=8)  MbLayerParameters,

	bool          SkipMbLayer,
	bool          Is_B_Skip,
	uint(size=5)  SzMbSkipped,

	bool          ConstraindedIntraPredFlag,
	uint(size=13) CurrMbAddr,
	uint(size=7)  PicWidthInMb, 
	uint(size=13) PicSizeInMb,
	uint(size=13) FirstMbInSlice,
	uint(size=2)  LFDisable,
	int(size=6)   Slice_Beta_Offset,
	int(size=6)   Slice_Alpha_C0_Offset,
	int(size=8)   SkipValQp_Y_Cb_Cr,

	bool          NewPic
		:


/*
*
* Constants
*
*/

	int (size=6) LAUNCH_ACTOR   = -1;

	uint(size=4) MB_LAYER       =  2;

//	uint(size=4) SLICE_TYPE_P  = 0;
	uint(size=4) SLICE_TYPE_B  = 1;
	uint(size=4) SLICE_TYPE_I  = 2;
//	uint(size=4) SLICE_TYPE_SP = 3;
	uint(size=4) SLICE_TYPE_SI = 4;

	bool         CABAC_ENTROPY = true;

	int SZ_TOTALCOEFF          = 128;
	int MASK_TOTALCOEFF        = 127;

	bool DEBUG_FLAG_DECODED = false;


	List (type:uint(size=6),size=64) QP_TAB := 
		[
			 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
			10,11,12,13,14,15,16,17,18,19,
			20,21,22,23,24,25,26,27,28,29,
			29,30,31,32,32,33,34,34,35,35,
			36,36,37,37,37,38,38,38,39,39,
			39,39,39,39,39,39,39,39,42,42,
			42,42,42,42
		];
/*
*
* State Variables
*
*/

	//Sps Parameters
	uint(size=4)  bit_depth_luma;
	uint(size=4)  bit_depth_chroma;
	uint(size=2)  Chroma_Array_Type;
	uint(size=2)  NumC8x8;
	uint(size=32) PicSizeInMbs;
	uint(size=32) PicWidthInMbs;
	//Pps Parameters
	bool          entropy_coding_mode_flag;
	bool          transform_8x8_mode_flag;
	uint(size=5)  num_ref_idx_l0_active;
	uint(size=5)  num_ref_idx_l1_active;
	int (size=5)  chroma_qp_index_offset;
	int (size=5)  second_chroma_qp_index_offset;
	//Slice Header Parameters
	uint(size=32) curr_mb_addr := 0;
	uint(size=4)  slice_type;
	bool          MbaffFrameFlag;
	uint(size=13) first_mb_in_slice;
	uint(size=2)  disable_deblocking_filter_idc;
	int(size=6)   slice_beta_offset;
	int(size=6)   slice_alpha_c0_offset;

	bool          moreDataFlag;
	bool          prevMbSkipped;
	uint(size=32) mb_skip_run;
	bool          mb_field_decoding_flag;
	bool          direct_8x8_inference_flag;
	bool          constrained_intra_pred_flag;
	int (size=8)  QpValue;
	int (size=8)  Qp_CbValue;
	int (size=8)  Qp_CrValue;

	//Size of TotalCoeffTab must be >= PicWidthInMb + 1 and must be equal to pow(2,n) for masking bits easily.
	List( type: List(type: uint(size=5), size=16),size= SZ_TOTALCOEFF) TotalCoeffTabLuma   := [[0:for int s in 0 .. 15]: for int s in 0 .. SZ_TOTALCOEFF-1];
	List( type: List( type: List(type: uint(size=5), size=16),size= SZ_TOTALCOEFF), size=2) TotalCoeffTabChroma := [[[0:for int s in 0 .. 15]: for int s in 0 .. SZ_TOTALCOEFF-1]: for int i in 0 .. 1];

	procedure NextMbAddress()
		begin
			curr_mb_addr        := curr_mb_addr + 1;
			TotalCoeffTabLuma[bitand(curr_mb_addr ,MASK_TOTALCOEFF)] := [0: for int i in 0 .. 15];
			if(DEBUG_FLAG_DECODED)then
				println("\n\n\n*** New Mb *** Val = "+curr_mb_addr);
			end
	//		Mb_x := val_CurrMbAddr mod PicWidthInMbs;
	//		Mb_y := val_CurrMbAddr / PicWidthInMbs;
		end
	function GetFlag(int(size=32) Val, uint(size=5) Idx)
				-->
			bool
		:
			(Val & (1 << Idx)) != 0
		end

	function SetFlag(bool ValFlag, uint(size=5)Idx, int(size=32) Val)
				-->
			int(size=32)
		:
			if(ValFlag) then
				Val | (1<<Idx)
			else
				Val & (-1 ^ (1<<Idx))
			end
		end

	GetSpsAndPpsParameters: action
			PpsParameters         :[PpsParam] repeat 3,
			SpsParameters         :[SpsParam] repeat 7,
			FstMbInSlc            :[ValFirstMbInSlice],
			SliceType             :[ValSliceType],
			MbaffFrame            :[ValMbaffFrame],
			NumRefIdxLXActive     :[ValNumRefIdxLXActive] repeat 2,
			DisDeblocFilterIdc    :[ValDisDebFil],
			SliceBetaOffset       :[ValSliceBetaOffset],
			SliceAlphaC0Offset    :[ValSliceAlphaC0Offset],
			ValQp                 :[Val_Qp]
				==>
		guard
			Is_CBP = false
		do
			bit_depth_chroma              := SpsParam[0];
			bit_depth_luma                := SpsParam[1];
			Chroma_Array_Type             := SpsParam[2];
			NumC8x8                       := SpsParam[3];
			PicSizeInMbs                  := SpsParam[4];
			PicWidthInMbs                 := SpsParam[5];
			direct_8x8_inference_flag     := GetFlag(SpsParam[6],0);

			chroma_qp_index_offset        := PpsParam[0];
			second_chroma_qp_index_offset := PpsParam[1];
			constrained_intra_pred_flag   := GetFlag(PpsParam[2],0);
			entropy_coding_mode_flag      := GetFlag(PpsParam[2],1);
			transform_8x8_mode_flag       := GetFlag(PpsParam[2],2);

			slice_type                    := ValSliceType;
			MbaffFrameFlag                := ValMbaffFrame;
			num_ref_idx_l0_active         := ValNumRefIdxLXActive[0];
			num_ref_idx_l1_active         := ValNumRefIdxLXActive[1];
			first_mb_in_slice             := ValFirstMbInSlice;
			disable_deblocking_filter_idc := ValDisDebFil;
			slice_beta_offset             := ValSliceBetaOffset;
			slice_alpha_c0_offset         := ValSliceAlphaC0Offset;
			QpValue                       := Val_Qp;
			Qp_CbValue                    := QP_TAB[(QpValue + chroma_qp_index_offset) & 0x3F];
			Qp_CrValue                    := QP_TAB[(QpValue + second_chroma_qp_index_offset) & 0x3F];

			curr_mb_addr :=
				if(MbaffFrameFlag = false)then
					ValFirstMbInSlice * (1 + 0)
				else
					ValFirstMbInSlice * (1 + 1)
				end;
			moreDataFlag   := true;
			prevMbSkipped  := false;

/*			NonZeroCount   := [[ 0 : for int j in 0 .. 16-1] : for int i in 0 .. PICHEIGHT*PICWIDTH-1]; //FIXME ! size is not right
			NonZeroCountCb := [[ 0 : for int j in 0 ..  4-1] : for int i in 0 .. PICHEIGHT*PICWIDTH-1]; //FIXME ! size is not right
			NonZeroCountCr := [[ 0 : for int j in 0 ..  4-1] : for int i in 0 .. PICHEIGHT*PICWIDTH-1]; //FIXME ! size is not right
			Mb_x := val_CurrMbAddr mod PicWidthInMbs;
			Mb_y := val_CurrMbAddr  /  PicWidthInMbs;
			// ...
*/
		end

	SendNewPic.Launch: action
				==>
			NewPic :[true]
		guard
			first_mb_in_slice = 0
		end

	SendNewPic.Skip: action ==>
		guard
			first_mb_in_slice != 0
		end

	/* It's a CABAC Sequence ! */
	EntropyCodingModeFlag.IsEqualToTrue: action
			==>
		guard
			entropy_coding_mode_flag = CABAC_ENTROPY
		end

	IsSliceIorSI: action
				==>
			//         mb_skip_run
			TypeOfVLD :[ VLD_UE ]
		guard
			slice_type != SLICE_TYPE_I,
			slice_type != SLICE_TYPE_SI
		end

	ReadMbSkipRun.Done: action
			ValVLD     :[ValueOfVLD]
				==>
		do
			mb_skip_run   := ValueOfVLD;
			prevMbSkipped := (mb_skip_run > 0);
			if(DEBUG_FLAG_DECODED)then
				println("\t\tmb_skip_run : "+ValueOfVLD);
			end
		end

	//for( i=0; i<mb_skip_run; i++ )
	CheckMbSkipRun.IsNotEqualTo0: action
				==>
			ConstraindedIntraPredFlag :[constrained_intra_pred_flag],
			CurrMbAddr                :[curr_mb_addr - 1],
			PicWidthInMb              :[PicWidthInMbs],
			PicSizeInMb               :[PicSizeInMbs],
			FirstMbInSlice            :[first_mb_in_slice],
			SkipMbLayer               :[true],
			Is_B_Skip                 :[slice_type = SLICE_TYPE_B],
			SzMbSkipped               :[16+1+1+4+4],
			LFDisable                 :[disable_deblocking_filter_idc],
			Slice_Beta_Offset         :[slice_beta_offset],
			Slice_Alpha_C0_Offset     :[slice_alpha_c0_offset],
			SkipValQp_Y_Cb_Cr         :[ QpValue , Qp_CbValue , Qp_CrValue],
			NewPic                    :[false]
		guard
			mb_skip_run > 0
		do
			foreach int i in 0 .. 15
			do
				TotalCoeffTabLuma     [curr_mb_addr & MASK_TOTALCOEFF][i] := 0;
				TotalCoeffTabChroma[0][curr_mb_addr & MASK_TOTALCOEFF][i] := 0;
				TotalCoeffTabChroma[1][curr_mb_addr & MASK_TOTALCOEFF][i] := 0;
			end
			NextMbAddress();
			mb_skip_run := mb_skip_run - 1;
		end

	CheckMbSkipRun.IsEqualTo0: action
				==>
			//          more_rbsp_data()
			TypeOfVLD :[ MORE_RBSP_DATA ]
		guard
			mb_skip_run = 0
		end

	ReadMoreDataFlag: action
			ValVLD     :[ValueOfVLD]
				==>
		do
			moreDataFlag :=
				if(ValueOfVLD = 0)then
					false
				else
					true
				end;
		end

	CheckMoreDataFlag.IsEqualToTrue: action
				==>
		guard
			moreDataFlag = true
		end

	ReadMbFieldDecod.Asked: action
				==>
			//        mb_field_decoding_flag
			TypeOfVLD :[ READ_BITS ],
			VLDParam  :[     1     ]
		guard
			MbaffFrameFlag = true,
			    (curr_mb_addr mod 2 = 0)
			or ((curr_mb_addr mod 2 = 1) and prevMbSkipped)
		end

	ReadMbFieldDecod.Done: action
			ValVLD     :[ValueOfVLD]
				==>
		do
			mb_field_decoding_flag :=
				if(ValueOfVLD = 0) then
					false
				else
					true
				end;
			if(DEBUG_FLAG_DECODED)then
				println("\t\tmb_field_decoding_flag : "+ValueOfVLD);
			end
		end

	//macroblock_layer()
	SendMbLayerParameters: action
				==>
			MbLayerParameters :[Parameters] repeat 35,
			NewPic            :[false]
		var
			List(type: int(size=8), size=35) Parameters,
			List(type: uint(size=5), size=12) NaTab,
			List(type: uint(size=5), size=12) NbTab,
			bool        LMbExists,
			bool        AMbExists,
			int(size=8) Flags
		do
				if(((curr_mb_addr - first_mb_in_slice) mod PicWidthInMbs) != 0) then
					NaTab := [ TotalCoeffTabLuma  [ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 5],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 7],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][13],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][15],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 5],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 7],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][13],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][15],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 5],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][ 7],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][13],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - 1 ,MASK_TOTALCOEFF)][15]
					         ];
					LMbExists := true;
				else
					NaTab     := [0:for int i in 0 .. 11];
					LMbExists := false;
				end
				if((curr_mb_addr - first_mb_in_slice) / PicWidthInMbs != 0)then
					AMbExists := true;
					NbTab := [ TotalCoeffTabLuma  [ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][10],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][11],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][14],
					           TotalCoeffTabLuma  [ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][15],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][10],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][11],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][14],
					           TotalCoeffTabChroma[0][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][15],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][10],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][11],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][14],
					           TotalCoeffTabChroma[1][ bitand(curr_mb_addr - PicWidthInMbs,MASK_TOTALCOEFF)][15]
					         ];
				else
					AMbExists := false;
					NbTab := [0:for int i in 0 .. 11];
				end

			Flags := SetFlag(direct_8x8_inference_flag, 0, SetFlag(transform_8x8_mode_flag, 1,SetFlag(mb_field_decoding_flag,2 ,0 ) ));
			Flags := SetFlag( entropy_coding_mode_flag, 3, SetFlag(              LMbExists, 4,SetFlag(             AMbExists,5 ,0 ) ));
			Parameters[0]  := Flags;
			Parameters[1]  := slice_type;
			Parameters[2]  := bit_depth_luma;
			Parameters[3]  := bit_depth_chroma;
			Parameters[4]  := Chroma_Array_Type;
			Parameters[5]  := num_ref_idx_l0_active;
			Parameters[6]  := num_ref_idx_l1_active;
			Parameters[7]  := NumC8x8;
			Parameters[8]  := QpValue;
			Parameters[9]  := chroma_qp_index_offset;
			Parameters[10] := second_chroma_qp_index_offset;
			foreach int i in 0 .. 11
			do
				Parameters[11 + i] := NaTab[i];
				Parameters[23 + i] := NbTab[i];
			end
		end


	DecMacroBlockLayer.Launch: action
				==>
			//                         more_rbsp_data()
			TypeOfVLD :[ LAUNCH_ACTOR , MORE_RBSP_DATA ],
			VLDParam  :[   MB_LAYER                    ],

			ConstraindedIntraPredFlag :[constrained_intra_pred_flag],
			CurrMbAddr                :[curr_mb_addr],
			PicWidthInMb              :[PicWidthInMbs],
			PicSizeInMb               :[PicSizeInMbs],
			FirstMbInSlice            :[first_mb_in_slice],
			SkipMbLayer               :[false],
			LFDisable                 :[disable_deblocking_filter_idc],
			Slice_Beta_Offset         :[slice_beta_offset],
			Slice_Alpha_C0_Offset     :[slice_alpha_c0_offset]
		end


	GetTotalCoeffLuma: action
		Total_CoeffLuma   :[CoLu]    repeat 16,
		Total_CoeffChroma :[CoLuChe] repeat 32,
		ValQpFeedback     :[NewQp]
				==>
		do
			foreach int i in 0 .. 15
			do
				TotalCoeffTabLuma[bitand(curr_mb_addr ,MASK_TOTALCOEFF)][i]      := CoLu[i];
				TotalCoeffTabChroma[0][bitand(curr_mb_addr ,MASK_TOTALCOEFF)][i] := CoLuChe[i];
				TotalCoeffTabChroma[1][bitand(curr_mb_addr ,MASK_TOTALCOEFF)][i] := CoLuChe[16+i];
			end
			QpValue := NewQp;
		end

	LaunchNextMbAddr: action
				==>
		do
			NextMbAddress();
		end

	SendEndSliceHeader: action
				==>
			TypeOfVLD    :[SKIP_NAL]
		end

	schedule fsm GetSpsAndPpsParameters:
		GetSpsAndPpsParameters     (GetSpsAndPpsParameters              )--> SendNewPic;

		SendNewPic                 (SendNewPic                          )--> CheckEntropyCodingModeFlag;

		CheckEntropyCodingModeFlag (EntropyCodingModeFlag.IsEqualToTrue )--> GetSpsAndPpsParameters;
		CheckEntropyCodingModeFlag (IsSliceIorSI                        )--> ReadMbSkipRun;
		CheckEntropyCodingModeFlag (CheckMoreDataFlag.IsEqualToTrue     )--> CheckMbAffFrame;

		CheckSliceType             (IsSliceIorSI                        )--> ReadMbSkipRun;
		CheckSliceType             (CheckMoreDataFlag.IsEqualToTrue     )--> CheckMbAffFrame;

		ReadMbSkipRun              (ReadMbSkipRun.Done                  )--> CheckMbSkipRun;

		CheckMbSkipRun             (CheckMbSkipRun.IsNotEqualTo0        )--> CheckMbSkipRun;
		CheckMbSkipRun             (CheckMbSkipRun.IsEqualTo0           )--> ReadMoreDataFlag;

		ReadMoreDataFlag           (ReadMoreDataFlag                    )--> CheckMoreDataFlag;

		CheckMoreDataFlag          (CheckMoreDataFlag.IsEqualToTrue     )--> CheckMbAffFrame;
		CheckMoreDataFlag          (LaunchNextMbAddr                    )--> EndDecodeSliceData;

		CheckMbAffFrame            (ReadMbFieldDecod.Asked              )--> ReadMbFieldDecod;
		CheckMbAffFrame            (SendMbLayerParameters               )--> DecodeMacroBlockLayer;

		ReadMbFieldDecod           (ReadMbFieldDecod.Done               )--> SendMbLayerParameters;

		SendMbLayerParameters      (SendMbLayerParameters               )--> DecodeMacroBlockLayer;

		DecodeMacroBlockLayer      (DecMacroBlockLayer.Launch           )--> GetTotalCoeffLuma;

		GetTotalCoeffLuma          (GetTotalCoeffLuma                   )--> ReadMoreDataFlag2;

		ReadMoreDataFlag2          (ReadMoreDataFlag                    )--> LaunchNextMbAddr;

		LaunchNextMbAddr           (LaunchNextMbAddr                    )--> CheckMoreDataFlag2;

		CheckMoreDataFlag2         (CheckMoreDataFlag.IsEqualToTrue     )--> CheckSliceType;
		CheckMoreDataFlag2         (SendEndSliceHeader                  )--> GetSpsAndPpsParameters;

		EndDecodeSliceData         (SendEndSliceHeader                  )--> GetSpsAndPpsParameters;
	end

	priority
		EntropyCodingModeFlag.IsEqualToTrue > IsSliceIorSI;
		IsSliceIorSI                        > CheckMoreDataFlag.IsEqualToTrue;
		CheckMbSkipRun.IsNotEqualTo0        > CheckMbSkipRun.IsEqualTo0;
		CheckMoreDataFlag.IsEqualToTrue     > LaunchNextMbAddr;
		ReadMbFieldDecod.Asked              > SendMbLayerParameters;
		CheckMoreDataFlag.IsEqualToTrue     > SendEndSliceHeader;
	end
end