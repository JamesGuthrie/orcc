/*************************************************************************
This software module was originally developed by 
Kenji Otoi, Yoshihisa Yamada and Kohtaro Asai (Mitsubishi Electric Corporation), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

Mitsubishi Electric Corporation grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that Mitsubishi Electric 
Corporation owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, Mitsubishi 
Electric Corporation will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

Mitsubishi Electric Corporation retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2007.
*************************************************************************/

/********************************************************************************

This software module was modified by Endri Bezati <endri.bezati@insa-rennes.fr> IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
//For making possible to work with ORCC interpreter



actor Algo_IntraPred_LUMA_16x16 ()
  int(size=16) Y_LEFT,     // List
  int(size=16) Y_UP,       // List
  int(size=16) Y_UP_LEFT,  // point

  uint(size=1) AVAIL,              // up, left, up_left availability List

  uint(size = 4) PredMode

  ==> int(size=16) MPR:


  // res variable used by procedure sum 
  int( size = 32 ) res;
  // sum_temp variable used for summing different sum procedures 
  int(size=32) sum_temp;
  
  
  procedure summ(List(type:int(size=16), size=16) list, int n)
  begin
    res := 0;
    if n > 0 then
    	foreach int i in 0 .. n-1 do
      		res := res + list[i]; 
     	end
    end
  end

  function clip(int x) --> int:
    if x > 255 then 255 else if x < 0 then 0 else x end end
  end

  int(size=2) left_avail;
  int(size=2) up_avail;
  int(size=2) up_left_avail;

  List(type:int(size=16), size= 16) y_left;
  List(type:int(size=16), size= 16) y_up;
  int(size=16)       y_up_left;
  List( type:int(size=16), size=16*16 ) mpr := [ 0 : for int i in 0 .. 16*16 - 1 ];

  read.avail: action AVAIL:[avail] repeat 3 ==>
  do
    left_avail    := avail[0];
    up_avail      := avail[1];
    up_left_avail := avail[2];    
  end

  readpix.l.av: action Y_LEFT:[x] repeat 16 ==>
  guard left_avail = 1
  do
    y_left := [ x[i] : for int i in 0 .. 15 ];
   
  end
  readpix.u.av: action Y_UP:[x] repeat 16 ==>
  guard up_avail = 1
  do
    y_up := [ x[i] : for int i in 0 .. 15 ];
  end
  readpix.ul.av: action Y_UP_LEFT:[x] ==>
  guard up_left_avail = 1
  do
    y_up_left:=x ;
  end

  readpix.l.no: action ==>
  guard left_avail = 0
  end
  readpix.u.no: action ==>
  guard up_avail = 0
  end
  readpix.ul.no: action ==>
  guard up_left_avail = 0
  end

  write.mode0: action PredMode:[mode] ==>
  	 MPR:[[mpr[16*j+i]: for int i in  0 .. 15, for int j in 0 .. 15]] repeat 16*16
  guard
  	mode = 0
  do
  	 mpr := [y_up[i]  : for int i in  0 .. 15, for int j in 0 .. 15];
  end

 write.mode1: action PredMode:[mode] ==>
 	MPR:[[mpr[16*j+i]: for int i in  0 .. 15, for int j in 0 .. 15]] repeat 16*16
 guard
 	mode = 1
 do
 	mpr := [y_left[j]: for int i in  0 .. 15, for int j in 0 .. 15];
 end
 
 write.mode2:  action PredMode:[mode] ==>
 	MPR:[[mpr[16*j+i]: for int i in  0 .. 15, for int j in 0 .. 15]] repeat 16*16
 guard
 	mode = 2
 var
 	int mean
 do
	if left_avail = 1 and up_avail = 1 then
    		summ(y_left,16);
    		sum_temp := res;
    		summ(y_up,16);
    		sum_temp := sum_temp + res;
    		mean := (sum_temp + 16) /32;	 
    else 
    	if left_avail = 1 then
       		summ(y_left,16);
        	mean := (res  + 8) / 16;
        else 
        	if up_avail   = 1  then 
        		summ(y_up,16);
        		mean := (res + 8) / 16;
        	else
        		mean := 128;
        	end 
        end 
    end
             
     mpr := [mean     : for int i in  0 .. 15, for int j in 0 .. 15];
 end
 
 write.mode3: action PredMode:[mode] ==>
    MPR:[[mpr[16*j+i]: for int i in  0 .. 15, for int j in 0 .. 15]] repeat 16*16	
 guard
 	mode = 3
 var
    int H, int V, int a, int b, int c,
    List(type: int(size=16), size = 7) sum_list,
    List(type: int(size=16), size = 7) sum_list2
 do
 	sum_list := [(i+1)*(y_up[8+i]  -y_up[6-i]  ):for int i in 0 .. 6];
    summ(sum_list,7);
    H := res + (7+1)*(y_up[8+7]  -y_up_left);
           
    sum_list2 := [(j+1)*(y_left[8+j]-y_left[6-j]):for int j in 0 .. 6];
    summ(sum_list2,7);
    V := res + (7+1)*(y_left[8+7]-y_up_left);
     
    
    a:= 16*(y_left[15] + y_up[15]);
    b:= rshift( 5*H + 32, 6);
    c:= rshift( 5*V + 32, 6);

    mpr := [clip( rshift(a + b*(i-7) + c*(j-7) + 16, 5) ): for int i in  0 .. 15, for int j in 0 .. 15];
 end
 		
  schedule fsm start:
    start    ( read.avail ) --> readpix0;

    readpix0 ( readpix.l  ) --> readpix1;
    readpix1 ( readpix.u  ) --> readpix2;
    readpix2 ( readpix.ul ) --> pixdone;

    pixdone  ( write      ) --> start;

  end
end
