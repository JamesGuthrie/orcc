/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
import VTL.Proprietary.IETR.MPEG_4_part_10.Common.Imp_MacroBlockInfo.*;

actor Algo_Interp_Reord()
	uint(size=6)  MbType,
	uint(size=4)  SubMbType,
	uint(size=2)  SelectList,
	int (size=16) Interp
		==>
	int (size=16) MbPred
		:

	List(type: List(type: int(size=16), size=16), size=16) ListInterp;

	uint(size=6) mb_type;

	uint(size=3) MbPartIdxMax;
	uint(size=3) MbPartIdx;
	uint(size=3) SizeMb;

	uint(size=3) SubMbPartIdxMax;
	uint(size=3) SubMbPartIdx;
	uint(size=3) Size_SubMb;
	uint(size=2) NbListToGet;

	GetMbType: action
			MbType :[MacroBlkType]
				==>
		do
			mb_type       := MacroBlkType;
			MbPartIdx     := 0;
			MbPartIdxMax  := NumMbPart(MacroBlkType);
			SizeMb        := SizeMbPart(MacroBlkType);
		end

	GetListSel4Mb: action
			SelectList:[list_selected]
				==>
		guard
			MbPartIdx  < MbPartIdxMax,
			SizeMb    != SZ_8x8
		do
			NbListToGet :=
				if(list_selected != BIPRED)then
					1
				else
					2
				end;
		end

	GetInterp.Launch16x16: action
			Interp:[InterpolationValues] repeat 16*16
				==>
		guard
			SizeMb      = SZ_16x16,
			NbListToGet > 0
		do
//			println("16x16");
			foreach int i in 0 .. 15
			do
				foreach int j in 0 .. 15
				do
					ListInterp[i][j] := InterpolationValues[16*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterp.Launch16x8: action
			Interp:[InterpolationValues] repeat 16*8
				==>
		guard
			SizeMb      = SZ_16x8,
			NbListToGet > 0
		do
//			println("16x8");
			foreach int i in 0 .. 7
			do
				foreach int j in 0 .. 15
				do
					ListInterp[i + 8*MbPartIdx][j] := InterpolationValues[16*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterp.Launch8x16: action
			Interp:[InterpolationValues] repeat 8*16
				==>
		guard
			SizeMb      = SZ_8x16,
			NbListToGet > 0
		do
//			println("8x16");
			foreach int i in 0 .. 15
			do
				foreach int j in 0 .. 7
				do
					ListInterp[i][j + 8*MbPartIdx] := InterpolationValues[8*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterp.Done: action ==>
		guard
			NbListToGet = 0
		do
			MbPartIdx := MbPartIdx + 1;
		end

	GetInterp.Launch8x8: action
			SubMbType :[ValSubMbType]
				==>
		guard
			SizeMb    = SZ_8x8,
			MbPartIdx < MbPartIdxMax
		do
			SubMbPartIdx    := 0;
			SubMbPartIdxMax := NumSubMbPart(mb_type,ValSubMbType);
			Size_SubMb       := SizeSubMbPart(mb_type,ValSubMbType);
		end

	GetListSel4SubMb: action
			SelectList:[list_selected]
				==>
		guard
			SubMbPartIdx < SubMbPartIdxMax
		do
			NbListToGet :=
				if(list_selected != BIPRED)then
					1
				else
					2
				end;
		end

	GetInterpSubMb.Launch8x8: action
			Interp:[InterpolationValues] repeat 8*8
				==>
		guard
			Size_SubMb   = SZ_8x8,
			NbListToGet > 0
		do
//			println("8x8");
			foreach int i in 0 .. 7
			do
				foreach int j in 0 .. 7
				do
					ListInterp[i + 8*(MbPartIdx>>1)][j + 8*(MbPartIdx &1)] := InterpolationValues[8*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterpSubMb.Launch8x4: action
			Interp:[InterpolationValues] repeat 8*4
				==>
		guard
			Size_SubMb   = SZ_8x4,
			NbListToGet > 0
		do
//			println("8x4");
			foreach int i in 0 .. 3
			do
				foreach int j in 0 .. 7
				do
					ListInterp[i + 8*(MbPartIdx>>1) + 4*SubMbPartIdx][j + 8*(MbPartIdx &1)] := InterpolationValues[8*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterpSubMb.Launch4x8: action
			Interp:[InterpolationValues] repeat 4*8
				==>
		guard
			Size_SubMb   = SZ_4x8,
			NbListToGet > 0
		do
//			println("4x8");
			foreach int i in 0 .. 7
			do
				foreach int j in 0 .. 3
				do
					ListInterp[i + 8*(MbPartIdx>>1)][j + 8*(MbPartIdx &1) + 4*SubMbPartIdx] := InterpolationValues[4*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterpSubMb.Launch4x4: action
			Interp:[InterpolationValues] repeat 4*4
				==>
		guard
			Size_SubMb   = SZ_4x4,
			NbListToGet > 0
		do
//			println("4x4");
			foreach int i in 0 .. 3
			do
				foreach int j in 0 .. 3
				do
					ListInterp[i + 8*(MbPartIdx>>1) + 4*(SubMbPartIdx>>1)][j + 8*(MbPartIdx &1) + 4*(SubMbPartIdx&1)] := InterpolationValues[4*i + j];
				end
			end
			NbListToGet := NbListToGet - 1;
		end

	GetInterpSubMb.Done: action ==>
		guard
			NbListToGet = 0
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetSubMbInfo.Done: action ==>
		guard
			SubMbPartIdx = SubMbPartIdxMax
		do
			MbPartIdx := MbPartIdx + 1;
		end

	SendParameters: action
				==>
			MbPred :[mb_pred] repeat 256
		guard
			MbPartIdx = MbPartIdxMax
		var
			List(type: int(size=16), size=256) mb_pred
		do
			foreach int i in 0 .. 15
			do
				foreach int j in 0 .. 15
				do
					mb_pred[16*i + j] := ListInterp[i][j];
				end
			end
		end

	schedule fsm GetMbType:
		GetMbType        (GetMbType                )--> GetListSel4Mb;

		GetListSel4Mb    (GetListSel4Mb            )--> GetMb;
		GetListSel4Mb    (GetInterp.Launch8x8      )--> GetListSel4SubMb;
		GetListSel4Mb    (SendParameters           )--> GetMbType;

		GetMb            (GetInterp.Launch16x16    )--> GetMb;
		GetMb            (GetInterp.Launch16x8     )--> GetMb;
		GetMb            (GetInterp.Launch8x16     )--> GetMb;
		GetMb            (GetInterp.Done           )--> GetListSel4Mb;

		GetListSel4SubMb (GetListSel4SubMb         )--> GetSubMb;
		GetListSel4SubMb (GetSubMbInfo.Done        )--> GetListSel4Mb;

		GetSubMb         (GetInterpSubMb.Launch8x8 )--> GetSubMb;
		GetSubMb         (GetInterpSubMb.Launch8x4 )--> GetSubMb;
		GetSubMb         (GetInterpSubMb.Launch4x8 )--> GetSubMb;
		GetSubMb         (GetInterpSubMb.Launch4x4 )--> GetSubMb;
		GetSubMb         (GetInterpSubMb.Done      )--> GetListSel4SubMb;
	end

end