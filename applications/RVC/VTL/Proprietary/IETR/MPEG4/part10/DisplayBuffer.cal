/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
//Modified by Damien de Saint Jorre IETR/INSA of Rennes
package Proprietary.IETR.MPEG4.part10;

import MPEG.Common.Imp_Math.*;
import MPEG.Common.Imp_PictureInfo.*;

actor DisplayBuffer ( int MB_WIDTH )
	uint(size=7)  MbLocation,
	uint          POC,
	int( size=32) POCtoDisplay,
	uint(size=8)  WD,
	bool          IsIDR,
	uint(size=2)  IsNewPicOrSlice
		==>
	int (size=9)  Display
		:

/*
*
* CONSTANTS
*
*/
	uint(size=2) IS_NEW_MB    = 0;
	uint(size=2) IS_NEW_PIC   = 2;

	uint(size=32) NB_PIC          = 17;
	uint(size=32) SZ_NBPIC        = 5; /* >= log2(NB_PIC) */
	//FIXME! number of MB per line of picture

	uint(size=8)  picture [NB_PIC][MAX_PICWIDTH_BLK * MAX_PICHEIGHT_BLK][256];
	uint(size=32) listPOC[NB_PIC]      := [ 0    :for int s in 0 .. NB_PIC-1];
	bool          picDisplayed[NB_PIC] := [true  :for int s in 0 .. NB_PIC-1];
	int           nbBlkWritten[NB_PIC];

	int (size=32) picCurrIdx      := 0;

	/*Display Information*/
	int nbBlkDisplayed;
	int(size=32)         nextPOCtoDisplay    := -1;
	int(size=SZ_NBPIC+1) idxNextPOCtoDisplay := -1;


	GetIsNewPic: action IsNewPicOrSlice :[is_new_mb_or_slice] ==>
	end

	read_ref_parameters: action POC :[Valpoc], IsIDR :[IsIDRPic] ==>
	var
		bool         idx_selected := false,
		int(size=32) i            := 0
	do
		picCurrIdx := -1;
		while((not idx_selected) and (i < NB_PIC))
		do
			if(picDisplayed[i] = true) then
				idx_selected    := true;
				picCurrIdx    := i;
				if(not IsIDRPic) then
					listPOC[i]      := Valpoc;
				else
					listPOC[i]      := 0;
				end
				picDisplayed[i] := false;
			end
			i := i + 1;
		end
		/*Fix Me!!! ==> exception*/
		if(picCurrIdx = -1) then
			picCurrIdx    := 0;
			listPOC[0]      := Valpoc;
			picDisplayed[0] := false;
		end
		nbBlkWritten[picCurrIdx] := 0;
	end

	get_writeAddr: action
		IsNewPicOrSlice :[is_new_pic_or_slice]
			==>
	guard
		is_new_pic_or_slice = IS_NEW_MB
	end

	write_data.Luma : action 
		MbLocation      :[MbLocxInPic , MbLocyInPic],
		WD :[wd] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
			==>
	guard 
		MB_WIDTH = MB_WIDTH_LUMA
	do
		foreach int i in 0 .. MB_WIDTH_LUMA * MB_WIDTH_LUMA - 1
		do
			picture[picCurrIdx][nbBlkWritten[picCurrIdx]][i] := wd[i];
		end
		nbBlkWritten[picCurrIdx] := nbBlkWritten[picCurrIdx] + 1;
	end

	write_data.Chroma : action
		MbLocation      :[MbLocxInPic , MbLocyInPic],
		WD :[wd] repeat  MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
			==>
	guard 
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		foreach int i in 0 .. MB_WIDTH_CHROMA * MB_WIDTH_CHROMA - 1
		do
			picture[picCurrIdx][nbBlkWritten[picCurrIdx]][i] := wd[i];
		end
		nbBlkWritten[picCurrIdx] := nbBlkWritten[picCurrIdx] + 1;
	end

	write_picture_done: action
		IsNewPicOrSlice :[is_new_mb_or_slice]
			==>
	guard 
		is_new_mb_or_slice = IS_NEW_PIC
	do
		nbBlkDisplayed := 0;
	end

	//write MB on the output display
	Display.chroma: action
			==>
		Display :[buff] repeat MB_WIDTH_CHROMA * MB_WIDTH_CHROMA
	guard
		idxNextPOCtoDisplay != -1,
		MB_WIDTH = MB_WIDTH_CHROMA
	var
		List(type:int(size=16),size = MB_WIDTH_CHROMA * MB_WIDTH_CHROMA + 1) buff := [ 0 :for int t in 0 .. MB_WIDTH_CHROMA*MB_WIDTH_CHROMA ] 
	do
		foreach int i in 0 .. MB_WIDTH_CHROMA * MB_WIDTH_CHROMA - 1
		do
			buff[i] := picture[idxNextPOCtoDisplay][nbBlkDisplayed][i];
		end
		nbBlkDisplayed := nbBlkDisplayed + 1;
	end

	//write MB on the output display
	Display.luma:action
			==>
		Display:[buff] repeat MB_WIDTH_LUMA * MB_WIDTH_LUMA
	guard
		idxNextPOCtoDisplay != -1,
		MB_WIDTH != MB_WIDTH_CHROMA
	var
		List(type:int(size=16),size = MB_WIDTH_LUMA * MB_WIDTH_LUMA + 1) buff := [ 0 :for int t in 0 .. MB_WIDTH_LUMA*MB_WIDTH_LUMA ] 
	do
		foreach int i in 0 .. MB_WIDTH_LUMA * MB_WIDTH_LUMA - 1
		do
			buff[i] := picture[idxNextPOCtoDisplay][nbBlkDisplayed][i];
		end
		nbBlkDisplayed := nbBlkDisplayed + 1;
	end

	Display.done: action ==>
	guard
		nbBlkWritten[picCurrIdx] = nbBlkDisplayed
	do
		picDisplayed[idxNextPOCtoDisplay] := true;
		nextPOCtoDisplay := -1;
		idxNextPOCtoDisplay := -1;
	end

	getNextPOCtoDisplay.launch: action POCtoDisplay :[poc2disp] ==>
	guard
		poc2disp         != -1
	do
		nextPOCtoDisplay := poc2disp;
	end

	getNextPOCtoDisplay.sync: action POCtoDisplay :[poc2disp] ==>
	guard
		poc2disp         = -1
	end
	
	getidxdisplay.launch: action ==>
	do
		idxNextPOCtoDisplay := -1;
		foreach int i in 0 .. NB_PIC - 1
		do
			if(listPOC[i] = nextPOCtoDisplay)then
				if(picDisplayed[i] = false) then
					idxNextPOCtoDisplay := i;
				end
			end
		end
		nbBlkDisplayed := 0;
	end
  
	schedule fsm  GetIsNewPic:
		GetIsNewPic         (GetIsNewPic                )--> read_ref_parameters;

		read_ref_parameters (read_ref_parameters        )--> getWriteAddr;

		getWriteAddr        (get_writeAddr              )--> WriteData;
		getWriteAddr        (write_picture_done         )--> getNextPOCtoDisplay;

		WriteData           (write_data                 )--> getWriteAddr;

		getNextPOCtoDisplay (getNextPOCtoDisplay.launch )--> getidxdisplay;
		getNextPOCtoDisplay (getNextPOCtoDisplay.sync   )--> read_ref_parameters;

		getidxdisplay       (getidxdisplay.launch       )--> Display;

		Display             (Display.luma               )--> Display;
		Display             (Display.chroma             )--> Display;
		Display             (Display.done               )--> getNextPOCtoDisplay;
	end
	priority
		write_picture_done         > get_writeAddr       > write_data;
		Display.done               > Display.chroma      > Display.luma;
		getNextPOCtoDisplay.launch > getNextPOCtoDisplay.sync;
	end
end