/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
//Modified by Damien de Saint Jorre, IETR/INSA of Rennes (France)
import Proprietary.IETR.MPEG4.part10.Common.Imp_MacroBlockInfo.*;

actor Proprietary.IETR.MPEG4.part10.Common.Algo_BlockSplit_AVC()
	int (size=12) Coeff,
	uint(size=6)  MbType
		==>
	int(size=16) Coeff_Y_DC,
	int(size=16) Coeff_Y_AC,
	int(size=16) Coeff_U_DC,
	int(size=16) Coeff_U_AC,
	int(size=16) Coeff_V_DC,
	int(size=16) Coeff_V_AC
		:


	bool DEBUG_INPUT = false;


	Block_16x16_Luma.Send_Y_DC: action
			MbType          :[mb_type],
			Coeff           :[ x ] repeat 16
				==>
			Coeff_Y_DC      :[ x ] repeat 16
		guard
			Is_Intra_16x16(mb_type)
		end


	Block_16x16_Luma.Send_Y_AC: action
			Coeff      :[ x ] repeat 16 * 16
				==>
			Coeff_Y_AC :[ x ] repeat 16 * 16
		end


	Block_4x4_Luma.Send_Y_AC: action
			MbType          :[mb_type],
			Coeff           :[ x ] repeat 16 * 16
				==>
			Coeff_Y_AC      :[ x ] repeat 16 * 16
		guard
			not Is_Intra_16x16(mb_type)
		end


	splitU_DC: action
			Coeff      :[ x ] repeat 4
				==>
			Coeff_U_DC :[ x ] repeat 4
		do
			if(DEBUG_INPUT)then
				foreach int i in 0 .. 3
				do
					println("Input BlockSplit Coeff:"+x[i]);
				end
			end	
		end


	splitV_DC: action
			Coeff      :[ x ] repeat 4
				==>
			Coeff_V_DC :[ x ] repeat 4
		do
			if(DEBUG_INPUT)then
				foreach int i in 0 .. 3
				do
					println("Input BlockSplit Coeff:"+x[i]);
				end
			end	
		end


	splitU_AC: action
			Coeff      :[ x ] repeat 8 * 8
				==>
			Coeff_U_AC :[ x ] repeat 8 * 8
		do
			if(DEBUG_INPUT)then
				foreach int i in 0 .. 63
				do
					println("Input BlockSplit Coeff:"+x[i]);
				end
			end	
		end


	splitV_AC: action
			Coeff      :[ x ] repeat 8 * 8
				==>
			Coeff_V_AC :[ x ] repeat 8 * 8
		end


	schedule fsm Check_Luma_MBSize :
		Check_Luma_MBSize (Block_4x4_Luma.Send_Y_AC   )--> splitU_DC;
		Check_Luma_MBSize (Block_16x16_Luma.Send_Y_DC )--> Send_Y_AC_16x16;

		Send_Y_AC_16x16   (Block_16x16_Luma.Send_Y_AC )--> splitU_DC;


		splitU_DC         (splitU_DC                  )--> splitV_DC;

		splitV_DC         (splitV_DC                  )--> splitU_AC;

		splitU_AC         (splitU_AC                  )--> splitV_AC;

		splitV_AC         (splitV_AC                  )--> Check_Luma_MBSize;
	end

	priority
		Block_4x4_Luma > Block_16x16_Luma;
	end
end
