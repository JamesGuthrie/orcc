/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package Proprietary.IETR.MPEG4.part10.Common;

import Proprietary.IETR.MPEG4.part10.Common.Imp_MacroBlockInfo.*;
import MPEG.Common.Imp_PictureInfo.*;

actor Algo_DemuxParserInfoForBlocks_Chroma()
	int (size=9)  Coef_ACR,
	uint(size=6)  MBType,
	uint(size=13) FirstMbInSlice,
	bool          ConstrainedIFlag,
	uint(size=7)  PicWidthInMb,
	uint(size=13) CurrMbAddr,
	bool          NeighbourAvail
	
		==>
	int (size=9)  Coef_ACR_Intra,
	bool          IsIntraFlag,
	bool          ConstrI_Intra,
	bool          NeighbourAvail_Intra,

	int (size=9)  Coef_ACR_Inter
		:


	bool AcrSent;
	bool FstMbSent;
	bool CstrISent;
	bool IsIntraSent;
	bool IsNeighbourSent;

	List( type:bool, size=MAX_PICWIDTH_BLK) is_intra := [false : for int i in 0 .. MAX_PICWIDTH_BLK-1];
	bool          intra_top_left := false;	
	uint(size=13) curr_pos       := 0;
	bool          CurrValIsIntra := false;

/*
*
* Actions
*
*/

	MBTypeIsPCM: action
			MBType           :[ValMBType],
			FirstMbInSlice   :[FirstMb],
			ConstrainedIFlag :[c_intra_flag]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_PCM
		do
			AcrSent         := true;
			FstMbSent       := true;
			CstrISent       := true;
			IsNeighbourSent := true;
			IsIntraSent := false;

			CurrValIsIntra := true;
		end


	MBTypeIsIntra: action
			MBType             :[ValMBType]
				==>
		guard
			ValMBType <= BLOCK_TYPE_INTRA_MAX,
			ValMBType != BLOCK_TYPE_I_PCM
		do
			AcrSent         := false;
			FstMbSent       := false;
			CstrISent       := false;
			IsIntraSent     := false;
			IsNeighbourSent := false;

			CurrValIsIntra := true;	
			
		end

	SendAcrIntra: action
			Coef_ACR           :[ValCoef] repeat 64
				==>
			Coef_ACR_Intra     :[ValCoef] repeat 64
		guard
			not AcrSent
		do
			AcrSent := true;
		end

	SendFstMbIntra: action
			FirstMbInSlice     :[FirstMb]
				==>
		guard
			not FstMbSent
		do
			FstMbSent := true;
		end

	SendConstrIFlagIntra: action
			ConstrainedIFlag :[c_intra_flag]
				==>
			ConstrI_Intra    :[c_intra_flag]
		guard
			not CstrISent
		do
			CstrISent := true;
		end

	SendIsIntra: action
			PicWidthInMb :[PicWidth],
			CurrMbAddr   :[CurrMb]
				==>
			IsIntraFlag        :[ is_intra[(curr_pos-1) & 0x3F] , is_intra[curr_pos & 0x3F] , intra_top_left ]
		guard
			not IsIntraSent
		do
			curr_pos    := CurrMb mod PicWidth;
			IsIntraSent := true;
		end

	SendNeighbourIntra: action
			NeighbourAvail :[NeighbourA , NeighbourB , NeighbourC , NeighbourD]
				==>
			NeighbourAvail_Intra  :[NeighbourA , NeighbourB , NeighbourC , NeighbourD]
		guard
			not IsNeighbourSent
		do
			IsNeighbourSent := true;
		end

	SendInfosDone: action ==>
		guard
			AcrSent,
			FstMbSent,
			CstrISent,
			IsIntraSent,
			IsNeighbourSent
		do
			intra_top_left     := is_intra[curr_pos];
			is_intra[curr_pos] := CurrValIsIntra;
		end

	MBTypeIsInter: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType > BLOCK_TYPE_INTRA_MAX
		do
			AcrSent         := false;
			FstMbSent       := false;
			CstrISent       := false;
			IsIntraSent     := false;
			IsNeighbourSent := true;

			CurrValIsIntra := false;
		end

	SendAcrInter: action
			Coef_ACR       :[ValCoef] repeat 64
				==>
			Coef_ACR_Inter :[ValCoef] repeat 64
		guard
			not AcrSent
		do
			AcrSent := true;
		end

	GetConstrIAndFstMbInter: action
			FirstMbInSlice   :[FirstMb],
			ConstrainedIFlag :[c_intra_flag]	
				==>
		guard
			not FstMbSent
		do
			FstMbSent := true;	
			CstrISent := true;	
		end	

	UpdateIsIntra: action
			PicWidthInMb   :[PicWidth],
			CurrMbAddr     :[CurrMb],
			NeighbourAvail :[NeighbourA , NeighbourB , NeighbourC , NeighbourD]
				==>
		guard
			not IsIntraSent
		do
			curr_pos    := CurrMb mod PicWidth;
			IsIntraSent := true;
		end	

	schedule fsm CheckMbType:
		CheckMbType    (MBTypeIsInter           )--> SendInterInfos;
		CheckMbType    (MBTypeIsPCM             )--> SendPCMInfos;
		CheckMbType    (MBTypeIsIntra           )--> SendIntraInfos;

		SendIntraInfos (SendAcrIntra            )--> SendIntraInfos;
		SendIntraInfos (SendFstMbIntra          )--> SendIntraInfos;
		SendIntraInfos (SendConstrIFlagIntra    )--> SendIntraInfos;
		SendIntraInfos (SendIsIntra             )--> SendIntraInfos;
		SendIntraInfos (SendNeighbourIntra      )--> SendIntraInfos;
		SendIntraInfos (SendInfosDone           )--> CheckMbType;

		SendInterInfos (SendAcrInter            )--> SendInterInfos;
		SendInterInfos (GetConstrIAndFstMbInter )--> SendInterInfos;
		SendInterInfos (UpdateIsIntra           )--> SendInterInfos;
		SendInterInfos (SendInfosDone           )--> CheckMbType;

		SendPCMInfos   (UpdateIsIntra           )--> SendPCMInfos;
		SendPCMInfos   (SendInfosDone           )--> CheckMbType;
	end
end