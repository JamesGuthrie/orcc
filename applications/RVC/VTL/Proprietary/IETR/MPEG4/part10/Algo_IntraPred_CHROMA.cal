/*************************************************************************
This software module was originally developed by 
Kenji Otoi, Yoshihisa Yamada and Kohtaro Asai (Mitsubishi Electric Corporation), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

Mitsubishi Electric Corporation grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that Mitsubishi Electric 
Corporation owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, Mitsubishi 
Electric Corporation will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

Mitsubishi Electric Corporation retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2007.
*************************************************************************/

/********************************************************************************

This software module was modified by Endri Bezati <endri.bezati@insa-rennes.fr> IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/

package Proprietary.IETR.MPEG4.part10;

import MPEG.Common.Imp_Math.*;

actor Algo_IntraPred_CHROMA ()
		int(size=16) C_LEFT,     // List
		int(size=16) C_UP,       // List
		int(size=16) C_UP_LEFT,  // point
		uint(size=1) AVAIL,              // up, left, up_left availability List
		uint(size=4) PredMode
				==> 
				int(size=16) MPR:

  int res;

  procedure Sum(List(type:int ( size = 16 ), size = 16) list, int n)
  begin
 	res := 0;
 	if n > 0 then   	
 	   	foreach int i in 0 .. n-1 do
      		res := res + list[i]; 
     	end
    end
  end

  uint(size=1) left_avail;
  uint(size=1) up_avail;
  uint(size=1) up_left_avail;

  List(type:int(size=16), size=8) c_left;
  List(type:int(size=16), size=8) c_up;
  int(size=16)       c_up_left:= 0 ;
  List( type:int(size=16), size=8*8 ) mpr := [ 0 : for int i in 0 .. 63 ];
  
  read.avail: action AVAIL:[avail] repeat 3 ==>
  do
    left_avail    := avail[0];
    up_avail      := avail[1];
    up_left_avail := avail[2];
    //println("read.avail "+avail);
  end

  readpix.l.av: action C_LEFT:[x] repeat 8 ==>
  guard left_avail = 1
  do
    c_left:=[ x[i]: for int i in 0 .. 7 ];
    //println("c_left "+c_left);
  end
  readpix.u.av: action C_UP:[x] repeat 8 ==>
  guard up_avail = 1
  do
    c_up:=[ x[i]: for int i in 0 .. 7 ];
    //println("c_up "+c_up);
  end
  readpix.ul.av: action C_UP_LEFT:[x] ==>
  guard up_left_avail = 1
  do
    c_up_left:=x;
    //println("c_up_left "+c_up_left);
  end

  readpix.l.no: action ==>
  guard 
    left_avail = 0
  end
  readpix.u.no: action ==>
  guard 
    up_avail = 0
  end
  readpix.ul.no: action ==>
  guard 
    up_left_avail = 0
  end

  write.mode0: action PredMode:[mode] ==>
    MPR:[[mpr[8*j+i]: for int i in  0 .. 7, for int j in 0 .. 7]] repeat 8*8
  guard
 	mode = 0
  var
    // mode 0 variables
    //   +-s0-+-s1-+
    //  s2 m0 | m1 |
    //   +----+----+
    //  s3 m2 | m3 |
    //   +----+----+
    int s0 := 0, int s1 := 0, int s2 := 0, int s3 := 0,
    int m0 := 128, int m1 := 128, int m2 := 128, int m3 := 128,
    List(type: int(size = 16), size = 7) sum_list
  	do
  		if up_avail = 1 then
    		/*	
    			s0 := sum([c_up[i]:for int i in 0 .. 3],4);
    		*/
    		sum_list := [c_up[i]:for int i in 0 .. 3];//todo
    		Sum(sum_list,4);
    		s0 := res;
    		
    		/*
    			s1 := sum([c_up[i]:for int i in 4 .. 7],4);
    		*/
    		sum_list := [c_up[i]:for int i in 4 .. 7];
    		Sum(sum_list,4);
    		s1 := res;
    	end
    	
    	if left_avail = 1 then
          	/*
          		s2 := sum([c_left[i]:for int i in 0 .. 3],4);
          		s3 := sum([c_left[i]:for int i in 4 .. 7],4);
          	*/
          	sum_list := [c_left[i]:for int i in 0 .. 3];
    		Sum(sum_list,4);
    		s2 := res;
    		
    		sum_list := [c_left[i]:for int i in 4 .. 7];
    		Sum(sum_list,4);
    		s3 := res;
          	
      	end
      	
      	if left_avail = 1 and up_avail = 1 then
          	m0 := rshift( s0 + s2 + 4, 3);
          	m1 := rshift( s1 + 2, 2);
          	m2 := rshift( s3 + 2, 2);
         	m3 := rshift( s1 + s3 + 4, 3);
      	else 
      		if left_avail = 1 then
          	m0 := rshift( s2 + 2, 2);
          	m1 := rshift( s2 + 2, 2);
          	m2 := rshift( s3 + 2, 2);
          	m3 := rshift( s3 + 2, 2);
      		else 
      			if up_avail = 1  then
          			m0 := rshift( s0 + 2, 2);
          			m1 := rshift( s1 + 2, 2);
          			m2 := rshift( s0 + 2, 2);
          			m3 := rshift( s1 + 2, 2);
      			end 
      		end 
		end
     mpr := [if j<4 then
                if i<4 then m0 else m1 end
              else
                if i<4 then m2 else m3 end
              end: for int i in  0 .. 7, for int j in 0 .. 7];
  end

  write.mode1: action PredMode:[mode] ==>
    MPR:[[mpr[8*j+i]: for int i in  0 .. 7, for int j in 0 .. 7]] repeat 8*8
  guard
 	mode = 1
  do
    mpr := [c_left[j]: for int i in  0 .. 7, for int j in 0 .. 7];
  end
 
  write.mode2: action PredMode:[mode] ==>
    MPR:[[mpr[8*j+i]: for int i in  0 .. 7, for int j in 0 .. 7]] repeat 8*8
  guard
 	mode = 2
  do
    mpr := [c_up[i]  : for int i in  0 .. 7, for int j in 0 .. 7];
  end

  write.mode3: action PredMode:[mode] ==>
    MPR:[[mpr[8*j+i]: for int i in  0 .. 7, for int j in 0 .. 7]] repeat 8*8
  guard
	mode = 3
  var
    int H, int V, int a, int b, int c,
    List(type: int(size = 16), size = 3) sum_list
  do
    sum_list := [(i+1)*(c_up[4+i]  - c_up[2-i]  ):for int i in 0 .. 2];
    Sum(sum_list,3);
    H := res + (3+1)*(c_up[4+3]  - c_up_left);
      
    sum_list := [(j+1)*(c_left[4+j] - c_left[2-j]):for int j in 0 .. 2];
    Sum(sum_list,3);
    V := res + (3+1)*(c_left[4+3] - c_up_left);
      
    a:= 16*(c_left[7] + c_up[7]);
    b:= rshift( 34*H + 32, 6);
    c:= rshift( 34*V + 32, 6);

    mpr := [clip( rshift(a + b*(i-3) + c*(j-3) + 16, 5) , 0 , 255 ): for int i in  0 .. 7, for int j in 0 .. 7];
  end


  schedule fsm start:
    start    ( read.avail ) --> readpix0;
    readpix0 ( readpix.l  ) --> readpix1;
    readpix1 ( readpix.u  ) --> readpix2;
    readpix2 ( readpix.ul ) --> pixdone;
    pixdone  ( write      ) --> start;
  end

end
