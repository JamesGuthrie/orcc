/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

Buffer store edge value from current macrobloc and provide edge for intra-decoding
Edge are provided from bottom to top, then corner, then left to right 
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/
package Proprietary.IETR.MPEG4.part10;

import MPEG.MPEG4.part10.Common.Imp_MacroBlockInfo.* ;
import MPEG.Common.Imp_PictureInfo.*;

actor Buffer_Neighbour_FullMb ( int MB_WIDTH , bool IsChroma)
	uint(size=6)  Mb_Type,
	uint(size=7)  MbLocation,
	uint(size=8) MB_IN
		==> 
		uint(size=SAMPLE_SZ) EDGE 
		:
		
  // Port size declaration
  int SAMPLE_SZ       = 16;
  int MB_WIDTH_MAX    = 16;

  	// Index of the macroblock in the current line
  	uint(size=13) mb_Index := 0;
  	uint(size=6)  mb_type  :=0;
  	
	//List containing edge pixel value 
	List( type:uint(size=SAMPLE_SZ), size=MAX_PICWIDTH_BLK * MB_WIDTH_MAX) top_edge := [0 : for int i in 0 .. MAX_PICWIDTH_BLK * MB_WIDTH_MAX-1];
	List( type:uint(size=SAMPLE_SZ), size=MB_WIDTH_MAX ) left_edge := [ 0 : for int i in 0 .. MB_WIDTH_MAX-1];
	uint(size=SAMPLE_SZ) topLeft_edge := 0;
	
	//FIXME! PICWIDTH used
	List( type:uint(size=SAMPLE_SZ), size=MAX_PICWIDTH_BLK * MB_WIDTH_MAX) result := [0 : for int i in 0 .. MAX_PICWIDTH_BLK * MB_WIDTH_MAX-1];
	
  
  	//Mb_Type_OK : Send value of edge needed and store the edge of macroblock decoded
  	Read_Mb_Type: action Mb_Type:[MbType], MbLocation:[MbxInPic , MbyInPic] ==>
   	do 
  		// position of the current macroblock in the line
  		mb_Index := MbxInPic; 
  		mb_type  := MbType; // mb_type is equal to 1  		
  	end  
  
  	//Receive pixel value from current decoded macroblock
  	Mb_Neighbour_LUMA: action MB_IN:[v] repeat MB_WIDTH_LUMA * MB_WIDTH_LUMA ==> 
  	guard
  		MB_WIDTH = MB_WIDTH_LUMA
  	do
  		//Store bottom , right and bottom right edge
  		topLeft_edge := top_edge[MB_WIDTH-1+ mb_Index*MB_WIDTH];
  		foreach int s in 0 .. MB_WIDTH-1
  		do
  			top_edge[s+ mb_Index *MB_WIDTH]:= v[s+(MB_WIDTH-1)*MB_WIDTH];
  		end
  		left_edge :=  [v[s*MB_WIDTH-1]:for int s in 1 .. MB_WIDTH_LUMA];
  	end
  
  	//Receive pixel value from current decoded macroblock
  	Mb_Neighbour_CHROMA: action MB_IN:[v] repeat MB_WIDTH_CHROMA * MB_WIDTH_CHROMA ==> 
  	guard
  		MB_WIDTH = MB_WIDTH_CHROMA
  	do
  		//Store bottom , right and bottom right edge
  		topLeft_edge := top_edge[MB_WIDTH-1+ mb_Index*MB_WIDTH];
  		foreach int s in 0 .. MB_WIDTH-1
  		do
  			top_edge[s+ mb_Index *MB_WIDTH]:= v[s+(MB_WIDTH-1)*MB_WIDTH];
  		end
  		left_edge :=  [v[s*MB_WIDTH-1]:for int s in 1 .. MB_WIDTH_CHROMA];
  	end
  
  	EDGE_CALC_LUMA: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2*MB_WIDTH_LUMA]	] repeat 2*MB_WIDTH_LUMA+1
  	guard
  		   (mb_type >= BLOCK_TYPE_INTRA_16x16_MIN and mb_type <= BLOCK_TYPE_INTRA_16x16_MAX)
  		or (mb_type = BLOCK_TYPE_I_NxN            and IsChroma),
  		MB_WIDTH = MB_WIDTH_LUMA
  	do
		
		foreach int s in 0 .. MB_WIDTH-1
		do
  			result[s]:= left_edge[s];
  		end
  		result[MB_WIDTH]:= topLeft_edge;
  		
  		foreach int s in 0 .. MB_WIDTH-1 
		do
  			result[MB_WIDTH+1+s]:= top_edge [s+ mb_Index *MB_WIDTH];
  		end

  	end
  
  	EDGE_CALC_CHROMA: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2*MB_WIDTH_CHROMA]	] repeat 2*MB_WIDTH_CHROMA+1
  	guard
  		   (mb_type >= BLOCK_TYPE_INTRA_16x16_MIN and mb_type <= BLOCK_TYPE_INTRA_16x16_MAX)
  		or (mb_type = BLOCK_TYPE_I_NxN            and IsChroma),
  		MB_WIDTH = MB_WIDTH_CHROMA
  	do
		
		foreach int s in 0 .. MB_WIDTH-1
		do
  			result[s]:= left_edge[s];
  		end
  		result[MB_WIDTH]:= topLeft_edge;
  		
  		foreach int s in 0 .. MB_WIDTH-1 
		do
  			result[MB_WIDTH+1+s]:= top_edge [s+ mb_Index *MB_WIDTH];
  		end

  	end

  	NOT_EDGE_CALC: action ==>
  	guard
  		not(
  			   (mb_type >= BLOCK_TYPE_INTRA_16x16_MIN and mb_type <= BLOCK_TYPE_INTRA_16x16_MAX)
  			or (mb_type = BLOCK_TYPE_I_NxN            and IsChroma)
  		)
   	end

	schedule fsm Mb_Type:
		Mb_Type     (Read_Mb_Type             )--> EDGE_CALC;
		EDGE_CALC   (EDGE_CALC_LUMA      )--> Mb_Neighbour;
		EDGE_CALC   (EDGE_CALC_CHROMA    )--> Mb_Neighbour;
		EDGE_CALC   (NOT_EDGE_CALC       )--> Mb_Neighbour;
		Mb_Neighbour(Mb_Neighbour_LUMA   )--> Mb_Type;
		Mb_Neighbour(Mb_Neighbour_CHROMA )--> Mb_Type;
	end
end