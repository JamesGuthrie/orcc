/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
package Proprietary.IETR.MPEG4.part10;

import MPEG.Common.Imp_Math.*;

actor Algo_Interp_SeparableSixTapQuarterPelAVC ()
	int (size=16) Mv,
	uint(size=8)  ReadResult,
	uint(size=6)  PartSZ
		==>
	uint(size=8)  Interp
		:

	int (size=32) x ;
	int (size=32) y ;
	int (size=32) xFrac;
	int (size=32) yFrac;
	int (size=32) xMax;
	int (size=32) yMax;
	int (size=32) width;
	int (size=32) height;
	uint(size=8)  tabPix[21*4][21*4];
	int (size=32) tabIntermPix[21*4][21*4];

	function sixTapFilter(int a1, int b1, int c1, int c2, int b2, int a2)
				-->
			int
		:
			a1 - (5 * b1) + (20 * c1) + (20 * c2) - (5 * b2) + a2
		end

	function computeHalfPixel(int a1, int b1, int c1, int c2, int b2, int a2)
				-->
			int
		:
			clip(
				( sixTapFilter(a1,b1,c1,c2,b2,a2) + 16 ) >> 5,
				0,255
			)
		end

	function computeQuarterPixel(int HalfPixel1, int HalfPixel2)
				-->
			int
		:
			clip(
				(HalfPixel1 + HalfPixel2 + 1) >> 1,
				0,255
			)
		end

	procedure computeHalfPix()
	var
		uint(size=32) xMin,
		uint(size=32) xMax,
		uint(size=32) yMin,
		uint(size=32) yMax,
		int valIntermPix
	begin
		if(xFrac = 0 or xFrac = 1 or xFrac = 3)then
			if(xFrac = 3 and yFrac != 0)then
				xMin := 0 + 3;
				xMax := width - 1 + 3;
			else
				xMin := 0 + 2;
				xMax := width - 1 + 2;
			end
			foreach int x in xMin .. xMax
			do
				foreach int y in 0 .. height - 1
				do
					tabPix[4*x][4*(2 + y) + 2] :=
					    computeHalfPixel(tabPix[4*x][4*y],       tabPix[4*x][4*(1 + y)] ,
					                     tabPix[4*x][4*(2 + y)], tabPix[4*x][4*(3 + y)] ,
					                     tabPix[4*x][4*(4 + y)], tabPix[4*x][4*(5 + y)]);
				end
			end
		end
		if(yFrac=0 or (xFrac!=0 and yFrac=1) or (xFrac!=0 and yFrac=3))then
			if(xFrac != 0 and yFrac = 3)then
				yMin := 0 + 3;
				yMax := height - 1 + 3;
			else
				yMin := 0 + 2;
				yMax := height - 1 + 2;
			end
			foreach int x in 0 .. width - 1
			do
				foreach int y in yMin .. yMax
				do
					tabPix[4*(2 + x) + 2][4*y] :=
					    computeHalfPixel(tabPix[4*x][4*y],       tabPix[4*(1 + x)][4*y],
					                     tabPix[4*(2 + x)][4*y], tabPix[4*(3 + x)][4*y],
					                     tabPix[4*(4 + x)][4*y], tabPix[4*(5 + x)][4*y]);
				end
			end
		end

		if((xFrac=2 and yFrac != 0) or ((xFrac=1 or xFrac=3) and yFrac = 2))then
			foreach int x in 0 .. width - 1
			do
				foreach int y in 0 .. height + 4
				do
					tabIntermPix[4*(2 + x) + 2][4*y] :=
						sixTapFilter(tabPix[4*x][4*y]      , tabPix[4*(1 + x)][4*y],
						             tabPix[4*(2 + x)][4*y], tabPix[4*(3 + x)][4*y],
						             tabPix[4*(4 + x)][4*y], tabPix[4*(5 + x)][4*y]);
				end
			end
			foreach int x in 0 + 2 .. width - 1 + 2
			do
				foreach int y in 0  .. height - 1
				do
					valIntermPix :=
						sixTapFilter(tabIntermPix[4*x+2][4*y]    , tabIntermPix[4*x+2][4*(1+y)] ,
						             tabIntermPix[4*x+2][4*(2+y)], tabIntermPix[4*x+2][4*(3+y)] ,
						             tabIntermPix[4*x+2][4*(4+y)], tabIntermPix[4*x+2][4*(5+y)]);
					valIntermPix := (valIntermPix + 512) >> 10;
					tabPix[4*x+2][4*(y + 2) + 2] := clip(valIntermPix , 0, 255);
				end
			end
		end
	end

	procedure computeQuarterPix()
	var
		uint pix1,
		uint pix2
	begin
		if(    not(xFrac=0 and yFrac=2)
		   and not(xFrac=2 and yFrac=0)
		   and not(xFrac=2 and yFrac=2)) then
			foreach int x_idx in 0 .. width - 1
			do
				foreach int y_idx in 0 .. height - 1
				do

					pix1 :=
						if(   (xFrac=1 and yFrac<2) or(xFrac=2 and yFrac=1)
						   or (xFrac=3 and yFrac=0))then
							tabPix[4*(2 + x_idx)+2][4*(2 + y_idx)]

						else if(xFrac!= 0 and yFrac=3)then
							tabPix[4*(2 + x_idx) + 2][4*(3 + y_idx)]

						else if(  (xFrac=1 and yFrac=2)
						       or (xFrac=3 and yFrac=2))then
							tabPix[4*(2 + x_idx)+2][4*(2 + y_idx) + 2]

						else if(xFrac=0)then
							if(yFrac=1)then
								tabPix[4*(2 + x_idx)][4*(2 + y_idx)]
							else
								tabPix[4*(2 + x_idx)][4*(3 + y_idx)]
							end

						else
							tabPix[4*(2 + x_idx) + 2][4*(2 + y_idx)]
						end end end end;

					pix2 :=
						if(xFrac=0 or (xFrac=1 and yFrac!=0))then
							tabPix[4*(2 + x_idx)][4*(2 + y_idx) + 2]
	
						else if(xFrac=3 and yFrac!=0)then
							tabPix[4*(3 + x_idx)][4*(2 + y_idx) + 2]
	
						else if(xFrac=2)then
							tabPix[4*(2 + x_idx)+2][4*(2 + y_idx) + 2]
	
						else if(xFrac=1 and yFrac=0)then
							tabPix[4*(2 + x_idx)][4*(2 + y_idx)]
	
						else
							tabPix[4*(3 + x_idx)][4*(2 + y_idx)]
						end end end end;

					tabPix[4*(2 + x_idx) + xFrac][4*(2 + y_idx) + yFrac] :=
						computeQuarterPixel(pix1,pix2);
				end
			end
		end
	end

	getMv: action Mv:[Mv_x , Mv_y] ==>
	do
		xFrac := Mv_x & 3;
		yFrac := Mv_y & 3;
	end

	getSize: action PartSZ:[PartWidth, PartHeight] ==>
	do
		width  := PartWidth;
		height := PartHeight;
		x := 0;
		y := 0;
		xMax   := 4*(width+5);
		yMax   := 4*(height+5);
	end

	getPixVal.launch: action ReadResult:[d] ==>
	guard
		y < yMax
	do
		tabPix[x][y] := d;
		x := x + 4;
		if x >= xMax then
			x := 0;
			y := y + 4;
		end
	end

	getPixVal.done: action ==>
	guard
		y >= yMax
	do
		if(xFrac != 0 or yFrac != 0) then
			computeHalfPix();
			computeQuarterPix();
		end
		x    := xFrac + 8;
		y    := yFrac + 8;
		xMax := width*4 + 8;
		yMax := height*4 + 8;
	end

	sendInterpolation.launch: action ==> Interp:[interpVal]
	guard
		y < yMax
	var 
		uint(size=8) interpVal
	do
		interpVal := tabPix[x][y];

		x := x + 4;
		if x >= xMax then
			x := xFrac + 8;
			y := y + 4;
		end
	end

	sendInterpolation.done: action ==>
	end

  schedule fsm GetMv:
    GetMv             (getMv                    )--> GetSize;
    GetSize           (getSize                  )--> GetValue;

	GetValue          (getPixVal.launch         )--> GetValue;
	GetValue          (getPixVal.done           )--> SendInterpolation;

    SendInterpolation (sendInterpolation.launch )--> SendInterpolation;
    SendInterpolation (sendInterpolation.done   )--> GetMv;
  end
  priority
 	 getPixVal.launch         > getPixVal.done;
 	 sendInterpolation.launch > sendInterpolation.done;
  end
end