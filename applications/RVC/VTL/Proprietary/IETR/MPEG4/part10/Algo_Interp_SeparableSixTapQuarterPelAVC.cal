/**
 * This software module was originally developed by 
 * He-Yuan Lin (NCKU), 
 * in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
 * for reference purposes and its performance may not have been optimized. 
 * This software module is an implementation of one or more tools as 
 * specified by the ISO/IEC 23002-4.
 * 
 * ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
 * license to copy, distribute, and make derivative works of this software 
 * module or modifications thereof for use in implementations of the 
 * ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
 * 
 * Those intending to use this software module in products are advised that 
 * its use may infringe existing patents. ISO/IEC have no liability for use 
 * of this software module or modifications thereof.
 * 
 * Copyright is not released for products that do not conform to audiovisual 
 * and image-coding related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * Assurance that the originally developed software module can be used 
 * (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
 * (2) to develop the ISO/IEC 23002-4: 
 *
 *
 * NCKU grants ISO/IEC all rights necessary to 
 * include the originally developed software module or modifications thereof 
 * in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
 * worldwide, non-exclusive, copyright license to copy, distribute, and make 
 * derivative works for use in implementations of the ISO/IEC 23002-4 in 
 * products that satisfy conformance criteria (if any), and to the extent 
 * that such originally developed software module or portions of it are 
 * included in the ISO/IEC 23002-4.  To the extent that NCKU
 * owns patent rights that would be required to make, use, or 
 * sell the originally developed software module or portions thereof 
 * included in the ISO/IEC 23002-4 in a conforming product, NCKU
 * Rennes will assure the ISO/IEC that it is willing to 
 * negotiate licenses under reasonable and non-discriminatory terms and 
 * conditions with applicants throughout the world.
 *
 * ISO/IEC gives You a free license to this software module or modifications 
 * thereof for the sole  purpose of developing the ISO/IEC 23002-4.
 * 
 * NCKU Rennes retains full right to modify and use the 
 * code for its own purpose, assign or donate the code to a third party and 
 * to inhibit third parties from using the code for products that do not 
 * conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
 * Standards. 
 * 
 * This copyright notice must be included in all copies or derivative works. 
 * Copyright (c) ISO/IEC 2006-2010.
 */
// Algo_Interp_SeparableSixTapQuarterPeAVC.cal
//
// Author: He-Yuan Lin
//
// Fractional luma sample interpolation for motion compensation of AVC

//Modified by Damien de Saint Jorre ; IETR/INSA of Rennes (France)

package Proprietary.IETR.MPEG4.part10;
import MPEG.Common.Imp_Math.*;

actor Algo_Interp_SeparableSixTapQuarterPelAVC ()
	int (size=16) Mv,
	uint(size=8)  ReadResult,
	uint(size=6)  PartSZ
		==>
	uint(size=8)  Interp
		:

  int(size=32) x ;
  int(size=32) y ;
  int(size=32) o_x ;
  int(size=32) o_y ;
  int(size=32) xFrac;
  int(size=32) yFrac;
  int width;
  int height;
  int temp;
  int temp2;
  uint(size=8) TabPix[21*4][21*4];
  List( type:int(size=32), size=6 ) half_pel := [ 0 : for int i in 0 .. 5 ];

	function SixTapFilter(int a1, int b1, int c1, int c2, int b2, int a2)
				-->
			int
		:
			a1 - (5 * b1) + (20 * c1) + (20 * c2) - (5 * b2) + a2
		end

	function ComputeHalfPixel(int a1, int b1, int c1, int c2, int b2, int a2)
				-->
			int
		:
			clip(
				( SixTapFilter(a1,b1,c1,c2,b2,a2) + 16 ) >> 5,
				0,255
			)
		end

	function ComputeQuarterPixel(int HalfPixel1, int HalfPixel2)
				-->
			int
		:
			clip(
				(HalfPixel1 + HalfPixel2 + 1) >> 1,
				0,255
			)
		end

	procedure compensate2(uint(size=5)x_idx, uint(size=5)y_idx)
		begin
			if(xFrac = 0)then
				if yFrac != 0 then 
					if yFrac = 1 then
						temp := ComputeQuarterPixel(TabPix[4*(2 + x_idx)][4*(2 + y_idx)+2],TabPix[4*(2 + x_idx)][4*(2 + y_idx)]);
					end
					if yFrac = 3 then
						temp := ComputeQuarterPixel(TabPix[4*(2 + x_idx)][4*(2 + y_idx)+2],TabPix[4*(2 + x_idx)][4*(3 + y_idx)]);
					end
				end
			end
			if(xFrac = 2)then
				foreach int n in 0 .. 5
				do
					half_pel[n] := SixTapFilter( TabPix[4*x_idx][4*(n + y_idx)]     , TabPix[4*(1 + x_idx)][4*(n + y_idx)] , TabPix[4*(2 + x_idx)][4*(n + y_idx)],
					                             TabPix[4*(3 + x_idx)][4*(n + y_idx)] , TabPix[4*(4 + x_idx)][4*(n + y_idx)] , TabPix[4*(5 + x_idx)][4*(n + y_idx)]);
				end
				temp := SixTapFilter(half_pel[0] , half_pel[1] , half_pel[2] , half_pel[3] , half_pel[4] , half_pel[5]);
				temp := (temp + 512) >> 10;
				temp := clip(temp , 0,255);
				if yFrac = 1 then 
					temp := ComputeQuarterPixel(temp,TabPix[4*(2 + x_idx) + 2][4*(2 + y_idx)]);
				end
				if yFrac = 3 then
					temp2 := ComputeHalfPixel( TabPix[4*x_idx][4*(3 + y_idx)]     , TabPix[4*(1 + x_idx)][4*(3 + y_idx)] , TabPix[4*(2 + x_idx)][4*(3 + y_idx)] ,
					                           TabPix[4*(3 + x_idx)][4*(3 + y_idx)] , TabPix[4*(4 + x_idx)][4*(3 + y_idx)] , TabPix[4*(5 + x_idx)][4*(3 + y_idx)]);
					temp  := ComputeQuarterPixel(temp,temp2);
				end
			end
			if xFrac = 1 then
				if yFrac = 0 then
					temp := ComputeQuarterPixel(TabPix[4*(2 + x_idx)+2][4*(2 + y_idx)],TabPix[4*(2 + x_idx)][4*(2 + y_idx)]);
				else
					temp2 := ComputeHalfPixel( TabPix[4*(2 + x_idx)][4*y_idx]     , TabPix[4*(2 + x_idx)][4*(1 + y_idx)] , TabPix[4*(2 + x_idx)][4*(2 + y_idx)],
					                           TabPix[4*(2 + x_idx)][4*(3 + y_idx)] , TabPix[4*(2 + x_idx)][4*(4 + y_idx)] , TabPix[4*(2 + x_idx)][4*(5 + y_idx)]);
					if yFrac = 2 then
						foreach int n in 0 .. 5
						do
							half_pel[n] := SixTapFilter( TabPix[4*x_idx][4*(n + y_idx)]     , TabPix[4*(1 + x_idx)][4*(n + y_idx)] , TabPix[4*(2 + x_idx)][4*(n + y_idx)],
							                             TabPix[4*(3 + x_idx)][4*(n + y_idx)] , TabPix[4*(4 + x_idx)][4*(n + y_idx)] , TabPix[4*(5 + x_idx)][4*(n + y_idx)]);
						end
						temp  := SixTapFilter( half_pel[0] , half_pel[1] , half_pel[2] , half_pel[3] , half_pel[4] , half_pel[5]);
						temp  := (temp + 512) >> 10;
						temp  := clip(temp , 0,255);
						temp  := ComputeQuarterPixel(temp,temp2);
					end
					if yFrac = 1 then
						temp  := ComputeQuarterPixel(TabPix[4*(2 + x_idx) + 2][4*(2 + y_idx)],temp2);
					end
					if yFrac = 3 then
						temp := ComputeHalfPixel( TabPix[4*x_idx][4*(3 + y_idx)]     , TabPix[4*(1 + x_idx)][4*(3 + y_idx)] , TabPix[4*(2 + x_idx)][4*(3 + y_idx)],
						                          TabPix[4*(3 + x_idx)][4*(3 + y_idx)] , TabPix[4*(4 + x_idx)][4*(3 + y_idx)] , TabPix[4*(5 + x_idx)][4*(3 + y_idx)]);
						temp  := ComputeQuarterPixel(temp,temp2);
					end
				end
			end
			if xFrac = 3 then
				if yFrac = 0 then
					temp := ComputeQuarterPixel(TabPix[4*(2 + x_idx)+2][4*(2 + y_idx)],TabPix[4*(3 + x_idx)][4*(2 + y_idx)]);
				else
					temp2 := ComputeHalfPixel( TabPix[4*(3 + x_idx)][4*y_idx]     , TabPix[4*(3 + x_idx)][4*(1 + y_idx)] , TabPix[4*(3 + x_idx)][4*(2 + y_idx)] ,
					                           TabPix[4*(3 + x_idx)][4*(3 + y_idx)] , TabPix[4*(3 + x_idx)][4*(4 + y_idx)] , TabPix[4*(3 + x_idx)][4*(5 + y_idx)]);
					if yFrac = 2 then
						foreach int n in 0 .. 5
						do
							half_pel[n] := SixTapFilter( TabPix[4*x_idx][4*(n + y_idx)]     , TabPix[4*(1 + x_idx)][4*(n + y_idx)] , TabPix[4*(2 + x_idx)][4*(n + y_idx)],
							                             TabPix[4*(3 + x_idx)][4*(n + y_idx)] , TabPix[4*(4 + x_idx)][4*(n + y_idx)] , TabPix[4*(5 + x_idx)][4*(n + y_idx)]);
						end
						temp  := SixTapFilter( half_pel[0] , half_pel[1] , half_pel[2] , half_pel[3] , half_pel[4] , half_pel[5]);
						temp  := (temp+512) >> 10;
						temp  := clip(temp , 0,255);
						temp  := ComputeQuarterPixel(temp,temp2);
					end
					if yFrac = 1 then
						temp := ComputeHalfPixel( TabPix[4*x_idx][4*(2 + y_idx)]     , TabPix[4*(1 + x_idx)][4*(2 + y_idx)] , TabPix[4*(2 + x_idx)][4*(2 + y_idx)],
						                          TabPix[4*(3 + x_idx)][4*(2 + y_idx)] , TabPix[4*(4 + x_idx)][4*(2 + y_idx)] , TabPix[4*(5 + x_idx)][4*(2 + y_idx)]);
						temp  := ComputeQuarterPixel(temp,temp2);
					end
					if yFrac = 3 then
						temp  := ComputeHalfPixel( TabPix[4*x_idx][4*(3 + y_idx)]     , TabPix[4*(1 + x_idx)][4*(3 + y_idx)] , TabPix[4*(2 + x_idx)][4*(3 + y_idx)],
						                           TabPix[4*(3 + x_idx)][4*(3 + y_idx)] , TabPix[4*(4 + x_idx)][4*(3 + y_idx)] , TabPix[4*(5 + x_idx)][4*(3 + y_idx)]);
						temp  := ComputeQuarterPixel(temp,temp2);
					end
				end
			end
			if xFrac != 0 or yFrac != 0 then
				TabPix[4*(2 + x_idx) + xFrac][4*(2 + y_idx) + yFrac] := temp;
			end
		end

	procedure compensate()
	var
		uint(size=32) xMin,
		uint(size=32) xMax,
		uint(size=32) yMin,
		uint(size=32) yMax
	begin
		if(    xFrac = 0
		   or (xFrac = 1 and yFrac = 0)
		   or (xFrac = 3 and yFrac = 0))then
			xMin := 0 + 2;
			xMax := width - 1 + 2;
			yMin := 0;
			yMax := height - 1;
			foreach int x in xMin .. xMax
			do
				foreach int y in yMin .. yMax
				do
					TabPix[4*x][4*(2 + y) + 2] :=
					    ComputeHalfPixel(TabPix[4*x][4*y],       TabPix[4*x][4*(1 + y)] ,
					                     TabPix[4*x][4*(2 + y)], TabPix[4*x][4*(3 + y)] ,
					                     TabPix[4*x][4*(4 + y)], TabPix[4*x][4*(5 + y)]);
				end
			end
		end
		if(yFrac = 0
		   or (xFrac = 1 and yFrac = 1)
		   or (xFrac = 2 and yFrac = 1))then
			xMin := 0;
			xMax := width - 1;
			yMin := 0 + 2;
			yMax := height - 1 + 2;
			foreach int x in xMin .. xMax
			do
				foreach int y in yMin .. yMax
				do
					TabPix[4*(2 + x) + 2][4*y] :=
					    ComputeHalfPixel(TabPix[4*x][4*y],       TabPix[4*(1 + x)][4*y],
					                     TabPix[4*(2 + x)][4*y], TabPix[4*(3 + x)][4*y],
					                     TabPix[4*(4 + x)][4*y], TabPix[4*(5 + x)][4*y]);
				end
			end
		end
	end

	GetMv: action Mv:[ Mv_x , Mv_y ] ==>
	do
		x := 0;
		y := 0;
		xFrac := Mv_x & 3;
		yFrac := Mv_y & 3;
	end

	GetSize: action PartSZ:[ PartWidth, PartHeight ] ==>
	do
		width  := PartWidth;
		height := PartHeight;
	end

	GetPixVal.Launch: action
			ReadResult:[d]
				==>
		guard
			y < (height+5)
		do
			TabPix[4*x][4*y] := d;
			x := x + 1;
			if x >= (width+5) then
				x := 0;
				y := y + 1;
			end
		end

	GetPixVal.Done: action ==>
		guard
			y >= height +5
		do
			if(xFrac != 0 or yFrac != 0) then
				compensate();
				if(    not(xFrac=0 and yFrac=2)
				   and not(xFrac=2 and yFrac=0)) then
					foreach int x in 0 .. width - 1
					do
						foreach int y in 0 .. height - 1
						do
							compensate2(x,y);
						end
					end
				end
			end
			o_x := xFrac;
			o_y := yFrac;
			height := height * 4;
			width := width * 4;
		end

	Interpolate.Launch: action ==> Interp:[ p ]
		guard
			o_y < height
		var 
			uint(size=8) p
		do
			p:= TabPix[o_x + 8][o_y + 8];
			o_x := o_x + 4;
			if o_x >= width then
				o_x := xFrac;
				o_y := o_y + 4;
			end
		end

	Interpolate.Done: action ==>
		guard
			o_y >= height
		end

  schedule fsm GetMv:
    GetMv       (GetMv              )--> GetSize;

    GetSize     (GetSize            )--> GetValue;

	GetValue    (GetPixVal.Launch   )--> GetValue;
	GetValue    (GetPixVal.Done     )--> Interpolate;

    Interpolate (Interpolate.Launch )--> Interpolate;
    Interpolate (Interpolate.Done   )--> GetMv;
  end
  priority
 	 GetPixVal.Launch > GetPixVal.Done;
  end
end