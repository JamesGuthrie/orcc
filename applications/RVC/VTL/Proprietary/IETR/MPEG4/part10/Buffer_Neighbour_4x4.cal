/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

Buffer store edge value from current macrobloc and provide edge for intra-decoding
Edge are provided from bottom to top, then corner, then left to right 
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/
package Proprietary.IETR.MPEG4.part10;

import Proprietary.IETR.MPEG4.part10.Common.Imp_MacroBlockInfo.* ;

actor Buffer_Neighbour_4x4()
	uint(size=6) Mb_Type,
	uint(size=13) CurrMbAddr,
	int(size=9) MB_IN,
	uint(size=7) PicWidthInMb
		==>
	uint(size=16) EDGE :
	//FIXME! Maximum size of a line in macroclock
	uint(size=7) PICWIDTH = 45;
	// Index of the macroblock in the current line
	uint(size=13) mb_Index := 0;

	uint(size=6) mb_type := 0;
	//List containing edge pixel value 
	List(type: uint(size=16), size=PICWIDTH * 16) top_edge := [ 0 : for int i in 0
	.. PICWIDTH * 16 - 1 ];

	List(type: uint(size=16), size=16) left_edge := [ 0 : for int i in 0 .. 16 - 1
	];

	uint(size=16) topLeft_edge := 0;

	List(type: uint(size=16), size=PICWIDTH * 16) result := [ 0 : for int i in 0
	.. PICWIDTH * 16 - 1 ];
	//Mb_Type_OK : Send value of edge needed and store the edge of macroblock decoded
	Mb_Type_OK: action Mb_Type:[ MbType ], PicWidthInMb:[ b ], CurrMbAddr:[ c ] ==>
	do
	//println("4 :Mb_Type_OK : "+ c); 		

	// position of the current macroblock in the line
		mb_Index := c mod b;
		mb_type := MbType;
	end
	//Receive pixel value from current decoded macroblock
	Mb_Neighbour: action MB_IN:[ v ] repeat 16 * 16 ==>
	do
	//Store bottom , right and bottom right edge
		topLeft_edge := top_edge[16 - 1 + mb_Index * 16];
		foreach int s in 0 .. 16 - 1 do
			top_edge[s + mb_Index * 16] := v[s + (16 - 1) * 16];
		end
		left_edge := [ v[s * 16 - 1] : for int s in 1 .. 16 ];
	end
	//Send the edge needed to process the intra prediction of the current macroblock
	CALCEDGE1: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2 * 16 + 5 - 1 ] ]
		repeat 2 * 16 + 5
	guard
		mb_type = BLOCK_TYPE_I_NxN,
		mb_Index < PICWIDTH - 1
	do
		foreach int s in 0 .. 16 - 1 do
			result[s] := left_edge[s];
		end
		result[16] := topLeft_edge;
		foreach int s in 0 .. 16 + 5 do
			result[16 + 1 + s] := top_edge[s + mb_Index * 16];
		end
	end

	CALCEDGE2: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2 * 16 + 5 - 1 ]
		] repeat 2 * 16 + 5
	guard
		mb_type = BLOCK_TYPE_I_NxN,
		mb_Index = PICWIDTH - 1
	do
		foreach int s in 0 .. 16 - 1 do
			result[s] := left_edge[s];
		end
		result[16] := topLeft_edge;
		foreach int s in 0 .. 16 - 1 do
			result[16 + 1 + s] := top_edge[s + mb_Index * 16];
		end
		foreach int s in 0 .. 3 do
			result[2 * 16 + 1 + s] := top_edge[16 - 1 + mb_Index * 16];
		end
	end

	NOT_EDGE_CALC: action ==>
	guard
		mb_type != BLOCK_TYPE_I_NxN
	end

	schedule fsm Mb_Type :
		Mb_Type ( Mb_Type_OK ) --> EDGE_CALC;
		EDGE_CALC ( NOT_EDGE_CALC ) --> Mb_Neighbour;
		EDGE_CALC ( CALCEDGE1 ) --> Mb_Neighbour;
		EDGE_CALC ( CALCEDGE2 ) --> Mb_Neighbour;
		Mb_Neighbour ( Mb_Neighbour ) --> Mb_Type;
	end

end
