/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package Proprietary.IETR.MPEG4.part10.Svc;

import Proprietary.IETR.MPEG4.part10.Common.Imp_DecodingFunctions.*;

actor MgntSps()
	uint(size=5)  TypeOfVLDFromSps,
	int (size=32) VLDParamFromSps,

	uint(size=5)  TypeOfVLDFromSubSps,
	int (size=32) VLDParamFromSubSps,

	uint(size=5)  TypeOfVLDFromSpsSvcExt,
	int (size=32) VLDParamFromSpsSvcExt,

	int (size=32) ValVLD,

	uint(size=5) NalUnitType
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLDParam,

	int (size=32) ValVLD4DecodeSps,

	int (size=32) ValVLD4DecodeSubSps,

	int (size=32) ValVLD4DecodeSpsSvcExt,

	bool          AskSpsInfoForSubSps
		:


	uint(size=5) NAL_SPS           =  7;
	uint(size=5) NAL_SUBSET_SPS    = 15;

	DecodeSps.GetVLDVal: action
			ValVLD           :[VLDecoding]
				==>
			ValVLD4DecodeSps :[VLDecoding]
		end

	DecodeSps.FunctionWithoutParam: action
			TypeOfVLDFromSps :[ValTypeOfVLD]
				==>
			TypeOfVLD        :[ValTypeOfVLD]
		guard
			NbParamForFunction(ValTypeOfVLD) = 0,
			ValTypeOfVLD  != SKIP_NAL
		end

	DecodeSps.FunctionWith1Param: action
			TypeOfVLDFromSps :[ValTypeOfVLD],
			VLDParamFromSps  :[Param]
				==>
			TypeOfVLD        :[ValTypeOfVLD],
			VLDParam         :[Param]
		guard
			NbParamForFunction(ValTypeOfVLD) = 1
		end

	EndDecodeSps: action
			TypeOfVLDFromSps :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	NaluType.IsSpsNalUnit : action
			NalUnitType :[nal_unit_type]
				==>
		guard
			nal_unit_type = NAL_SPS
		end

	NaluType.IsSubsetSpsNalUnit : action
			NalUnitType :[nal_unit_type]
				==>
			AskSpsInfoForSubSps :[true]
		guard
			nal_unit_type = NAL_SUBSET_SPS
		end


	DecodeSubSps.GetVLDVal: action
			ValVLD           :[VLDecoding]
				==>
			ValVLD4DecodeSubSps :[VLDecoding]
		end

	DecodeSubSps.FunctionWithoutParam: action
			TypeOfVLDFromSubSps :[ValTypeOfVLD]
				==>
			TypeOfVLD        :[ValTypeOfVLD]
		guard
			NbParamForFunction(ValTypeOfVLD) = 0,
			ValTypeOfVLD  != SKIP_NAL
		end

	DecodeSubSps.FunctionWith1Param: action
			TypeOfVLDFromSubSps :[ValTypeOfVLD],
			VLDParamFromSubSps  :[Param]
				==>
			TypeOfVLD        :[ValTypeOfVLD],
			VLDParam         :[Param]
		guard
			NbParamForFunction(ValTypeOfVLD) = 1
		end

	EndDecodeSubSps: action
			TypeOfVLDFromSubSps :[Function]
				==>
		guard
			Function = SKIP_NAL
		end


	EndOfNal: action
				==>
			TypeOfVLD :[SKIP_NAL]
		end

	schedule fsm LaunchDecodeSps:
		LaunchDecodeSps    (DecodeSps                   )--> LaunchDecodeSps;
		LaunchDecodeSps    (EndDecodeSps                )--> CheckNaluType;

		CheckNaluType      (NaluType.IsSpsNalUnit       )--> EndOfNal;
		CheckNaluType      (NaluType.IsSubsetSpsNalUnit )--> LaunchDecodeSubSps;

		LaunchDecodeSubSps (DecodeSubSps                )--> LauchDecodeSubSps;
		LaunchDecodeSubSps (EndDecodeSubSps             )--> EndOfNal;

		EndOfNal           (EndOfNal                    )--> LaunchDecodeSps;
	end
end