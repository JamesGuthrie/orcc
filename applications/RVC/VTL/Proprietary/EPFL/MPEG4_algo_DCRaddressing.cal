
package Proprietary.EPFL;

actor MPEG4_algo_DCRaddressing (int NEWVOP,
	int INTRA) int(size=BTYPE_SZ) BTYPE ==> int(size=MB_COORD_SZ + 3) A,
int(size=MB_COORD_SZ + 3) B, int(size=MB_COORD_SZ + 3) C :

// Port size declaration
	int BTYPE_SZ = 12;

	int MB_COORD_SZ = 8;

	int MAXW_IN_MB = 121;

	int(size=MB_COORD_SZ) mbx := 0;

	// Current macroblock x position
	bool top_edge := true;

	// Top edge macroblock flag
	bool left_edge;

	// Left edge macroblock flag
	int(size=4) comp := 0;

	// 8x8 block component in macroblock index // JWJ: increased size
	int(size=MB_COORD_SZ) mbwidth := 0;

	// Macroblock width of current vop
	int BUF_SIZE = (MAXW_IN_MB + 2);

	List(type: bool, size=BUF_SIZE * 8) coded := [ false : for int i in 1 .. BUF_SIZE * 8 ];

	int(size=MB_COORD_SZ) ptr;

	int(size=MB_COORD_SZ) ptr_left;

	int(size=MB_COORD_SZ) ptr_above;

	int(size=MB_COORD_SZ) ptr_above_left;

	// Buffer pointer wrap, skipping over address 0
	function decrement(int(size=MB_COORD_SZ) p) --> int(size=MB_COORD_SZ) :
		if p = 1 then
			BUF_SIZE - 1
		else
			p - 1
		end
	end

	function access(int(size=MB_COORD_SZ) p, int(size=4) c) -->
		int(size=MB_COORD_SZ + 3) :
		// JWJ: increased size of c
		bitor(lshift(p, 3), c)
	end

	// New VOP
	start: action BTYPE:[ cmd ] ==>
	guard
		bitand(cmd, NEWVOP) != 0
	do
		mbx := 0;
		top_edge := true;
		left_edge := true;
		comp := 0;
	end

	getw: action BTYPE:[ w ] ==>
	do
		mbwidth := w;
		ptr := 1;
		ptr_left := 2;
		ptr_above := 1 + w;
		ptr_above_left := 2 + w;
	end

	geth: action BTYPE:[ h ] ==>
	end

	read.intra: action BTYPE:[ btype ] ==>
	guard
		bitand(btype, INTRA) != 0
	do
		coded[access(ptr, comp)] := true;
	end

	read.other: action BTYPE:[ btype ] ==>
	do
		coded[access(ptr, comp)] := false;
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			mbx := mbx + 1;
			left_edge := false;
			if mbx = mbwidth then
				mbx := 0;
				top_edge := false;
				left_edge := true;
			end
			ptr := decrement(ptr);
			ptr_left := decrement(ptr_left);
			ptr_above := decrement(ptr_above);
			ptr_above_left := decrement(ptr_above_left);
		end
	end

	predict.b0: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 0
	var
		int(size=MB_COORD_SZ + 3) a := 0 , int(size=MB_COORD_SZ + 3) b := 0 ,
		int(size=MB_COORD_SZ + 3) c := 0
	do
		if not left_edge then
		// left-neighbor is block 1 from previous macroblock
			a := access(ptr_left, 1);
			if not coded[a] then
				a := 0;
			end
			if not top_edge then
			// above-left-neighbor is block 3 from previous row, col macroblock
				b := access(ptr_above_left, 3);
				if not coded[b] then
					b := 0;
				end
			end
		end
		// above-neighbor is block 2 from previous row macroblock
		if not top_edge then
			c := access(ptr_above, 2);
			if not coded[c] then
				c := 0;
			end
		end
	end

	// Locate prediction indices for block 1
	predict.b1: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 1
	var
		int(size=MB_COORD_SZ + 3) a := access(ptr, 0) , // left-neighbor is block 0 from this macroblock
		int(size=MB_COORD_SZ + 3) b := 0 , int(size=MB_COORD_SZ + 3) c := 0
	do
		if not coded[a] then
			a := 0;
		end
		if not top_edge then
		// above-left-neighbor is block 2 from previous row macroblock
			b := access(ptr_above, 2);
			if not coded[b] then
				b := 0;
			end
			// above-neighbor is block 3 from previous row macroblock
			c := access(ptr_above, 3);
			if not coded[c] then
				c := 0;
			end
		end
	end

	predict.b2: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 2
	var
		int(size=MB_COORD_SZ + 3) a := 0 , int(size=MB_COORD_SZ + 3) b := 0 ,
		int(size=MB_COORD_SZ + 3) c := access(ptr, 0) // above-neighbor is block 0 from this macroblock

	do
		if not left_edge then
		// left-neighbor is block 3 from previous macroblock
			a := access(ptr_left, 3);
			if not coded[a] then
				a := 0;
			end
			// above-left-neighbor is block 1 from previous macroblock
			b := access(ptr_left, 1);
			if not coded[b] then
				b := 0;
			end
		end
		if not coded[c] then
			c := 0;
		end
	end

	predict.b3: action ==> A:[ a ], B:[ b ], C:[ c ]
	guard
		comp = 3
	var
		int(size=MB_COORD_SZ + 3) a := access(ptr, 2) , // left-neighbor is block 2 from this macroblock
		int(size=MB_COORD_SZ + 3) b := access(ptr, 0) , // above-left-neighbor is block 0 from this macroblock
		int(size=MB_COORD_SZ + 3) c := access(ptr, 1) // above-neighbor is block 1 from this macroblock

	do
		if not coded[a] then
			a := 0;
		end
		if not coded[b] then
			b := 0;
		end
		if not coded[c] then
			c := 0;
		end
	end

	// Locate prediction indices for blocks 4, 5
	predict.b45: action ==> A:[ a ], B:[ b ], C:[ c ]
	var
		int(size=MB_COORD_SZ + 3) a := 0 , int(size=MB_COORD_SZ + 3) b := 0 ,
		int(size=MB_COORD_SZ + 3) c := 0
	do
		if not left_edge then
			a := access(ptr_left, comp);
			if not coded[a] then
				a := 0;
			end
			if not top_edge then
				b := access(ptr_above_left, comp);
				if not coded[b] then
					b := 0;
				end
			end
		end
		if not top_edge then
			c := access(ptr_above, comp);
			if not coded[c] then
				c := 0;
			end
		end
	end

	schedule fsm read :
		read ( start ) --> getw;
		getw ( getw ) --> geth;
		geth ( geth ) --> read;
		read ( read.intra ) --> predict;
		read ( read.other ) --> advance;
		predict ( predict ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.intra > read.other;
		predict.b0 > predict.b45;
		predict.b1 > predict.b45;
		predict.b2 > predict.b45;
		predict.b3 > predict.b45;
	end

end