/* MPEG4_algo_Interpolation_halfpel.cal
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
*
* Modified by: Carl von Platen (carl.von.platen@ericsson.com) 
*              Ericsson AB, 2009
*              Now uses repeats and separate actions for the
*              different interpolation modes
*
* Copyright (c) 2004-2005 Xilinx Inc.
* All Rights Reserved
*
* Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
*              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
*              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
*              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
* Interpolation for motion compensation
*/

package Proprietary.E__;

actor E___Algo_Interpolation_halfpel
() int(size=9) RD, int(size=4) halfpel ==> int(size=PIX_SZ) MOT :

	int PIX_SZ = 9;

	none: action halfpel:[ flags ], RD:[ rd ] repeat 81 ==> MOT:[ 
		[ rd[9*j+k] : for int j in 0 .. 7, for int k in 0 .. 7] ] repeat 64
	guard
		rshift(flags, 1) = 0
	end

	row: action halfpel:[ flags ], RD:[ rd ] repeat 81 ==> MOT:[ 
		[ rshift(rd[9 * j + k] + rd[9 * (j + 1) + k] + round, 1) : 
		for int j in 0 .. 7, for int k in 0 .. 7 ] ] repeat 64
	guard
		rshift(flags, 1) = 1
	var
		int round := 1 - bitand(flags, 1)
	end

	col: action halfpel:[ flags ], RD:[ rd ] repeat 81 ==> MOT:[ 
		[ rshift(rd[9 * j + k] + rd[9 * j + k + 1] + round, 1) : 
		for int j in 0 .. 7, for int k in 0 .. 7 ] ] repeat 64
	guard
		rshift(flags, 1) = 2
	var
		int round := 1 - bitand(flags, 1) 
	end

	both: action halfpel:[ flags ], RD:[ rd ] repeat 81 ==> MOT:[ 
		[ rshift(rd[9 *j + k] + rd[9 * j + k + 1] + 
		rd[9 * (j + 1) + k] + rd[9 * (j + 1) + k + 1] +round, 2) : 
		for int j in 0 .. 7, for int k in 0 .. 7 ]  ] repeat 64 
   /*
   * otherwise: rshift(flags,1) = 3
   */
	var
		int round := 2 - bitand(flags, 1)
	end

	priority
		none > col > row > both;
	end

end
