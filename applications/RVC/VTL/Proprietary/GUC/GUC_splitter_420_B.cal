// splitter_420_B
//
// Author: Andrew Kinane (kinanea@eeng.dcu.ie)
// 
// Description: This module splits a 4:2:0 chroma subsampled serial macroblock (YYYYUV)
//              into its respective Y, U and V components.
//

actor GUC_splitter_420_B () int(size=SAMPLE_SZ) B, bool AC_CODED, int (size=2) BTYPE ==> int(size=SAMPLE_SZ) Y ,
int(size=SAMPLE_SZ) U , int(size=SAMPLE_SZ) V
 :

// Port size declaration

	int SAMPLE_SZ = 13;

	int BLOCK_SZ = 64;



	int(size=4) comp := 0;

	//         comp layout
	//      Y         U       V
	//  +---+---+   +---+   +---+
	//  | 0 | 1 |   | 4 |   | 5 |
	//  +---+---+   +---+   +---+
	//  | 2 | 3 | 
	//  +---+---+  

	
	skip_uncoded: action AC_CODED:[ac_coded], BTYPE:[btype] ==>
	guard
		btype=1,
		// An INTER block
		not ac_coded 
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
		end
	end

	skip_other: action AC_CODED:[ac_coded], BTYPE:[btype] 
	==>
	guard
		// Not an INTER or INTRA block
		btype=0
		
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
		end
	end

	splitY: action AC_CODED:[ac_coded], BTYPE:[btype], B:[ x ] repeat BLOCK_SZ ==>Y:[ x ] repeat BLOCK_SZ 
	guard
		comp < 4
	do
		comp := comp + 1;
	end

	splitU: action  AC_CODED:[ac_coded], BTYPE:[btype], B:[ x ] repeat BLOCK_SZ ==>U:[ x ] repeat BLOCK_SZ
	guard
		comp = 4
	do
		comp := comp + 1;
	end

	splitV: action  AC_CODED:[ac_coded], BTYPE:[btype],  B:[ x ] repeat BLOCK_SZ ==> V:[ x ] repeat BLOCK_SZ
	guard
		comp = 5
	do
		comp := 0;
	end

	// 4:2:0 schedule.
	schedule fsm READ :
		READ ( skip_uncoded ) --> READ;
		READ ( skip_other ) --> READ;
		READ ( splitY ) --> READ;
		READ ( splitU ) --> READ;
		READ ( splitV ) --> READ;
	end

	priority
		skip_uncoded > skip_other > splitY > splitU > splitV;
	end

end
