
// splitter_BTYPE

//

// Author: Christophe Lucarz (christophe.lucarz@epfl.ch) 

// 

// Description: the sequence of BTYPE token is not homogeneous, there is fist a NEW VOP command, then, the width and height of this VOP, then the  corresponding 8x8 blocks of texture, motion or mixed tex/mot. This actor will delete the tokens concerning the information of the VOP and redistribute the tokens to the Y, U and V components. So that the adder have directly the token intra, accoded or mixed.
package Proprietary.GUC;

actor GUC_splitter_BTYPE () bool NEW_VOP, bool AC_CODED, bool MOT, int (size=2) BTYPE, bool AC_PRED
==> bool NEW_VOP_Y, bool NEW_VOP_U, bool NEW_VOP_V, bool AC_Y, bool AC_U, bool AC_V, bool MOT_Y, bool MOT_U, bool MOT_V, int (size=2)BTYPE_Y, int (size=2)BTYPE_U, int (size=2)BTYPE_V, 
bool ACP_Y, bool ACP_U, bool ACP_V:
// Port size declaration
	// to send the newvop token to the address and add block (arrggg) 
	cmd.newVop: action NEW_VOP:[ newvop ] ==> NEW_VOP_Y:[ true ], NEW_VOP_U:[ true
		], NEW_VOP_V:[ true ]
	guard
		newvop
	end
	// to split the tokens 
	cmd.split: action NEW_VOP:[ lnewvop ] repeat 6, AC_CODED:[ac] repeat 6, AC_PRED:[acp] repeat 6, MOT:[mot] repeat 6, BTYPE:[btype] repeat 6 ==>
	    NEW_VOP_Y:[ false, false, false, false ],
		NEW_VOP_U:[ false ], NEW_VOP_V:[ false ], AC_Y:[ac [0], ac[1], ac[2], ac[3]], AC_U:[ac[4]], AC_V:[ac[5]], 
		MOT_Y:[mot [0], mot[1], mot[2], mot[3]], MOT_U:[mot[4]], MOT_V:[mot[5]], 
		BTYPE_Y:[ btype[0], btype[1], btype[2], btype[3] ], BTYPE_U:[ btype[4] ], BTYPE_V:[ btype[5] ],
		ACP_Y:[ acp[0], acp[1], acp[2], acp[3] ], ACP_U:[ acp[4] ], ACP_V:[ acp[5] ]
	guard
		not (lnewvop[0])
	end
	
	priority
		cmd.newVop > cmd.split;
	end

end

