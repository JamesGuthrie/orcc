// MPEG4_algo_Add.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// Add motion and texture to produce pixels

actor GUC_Algo_Add () int(size=PIX_SZ) MOT, int(size=PIX_SZ) TEX, int(size=BTYPE_SZ) BLOCKTYPE, bool AC_CODED, int (size=2)TYPE
==> int(size=PIX_SZ) VID 
:

// Port size declaration
	int BTYPE_SZ = 12;

	int PIX_SZ = 9;

	int NEWVOP = 2048;

	int INTRA = 1024;

	// Pure texture
	cmd.textureOnly: action BLOCKTYPE:[cmd], AC_CODED:[ac_coded], TYPE:[btype]==> 
	guard
		btype =2
	end

	// Pure motion
	cmd.motionOnly: action BLOCKTYPE:[cmd], AC_CODED:[ac_coded], TYPE:[btype] ==> 
	guard
		not ac_coded
	end

	// Mixed texture and motion
	// (Also used to skip vop w,h)
	cmd.other: action BLOCKTYPE:[cmd], AC_CODED: [ac_coded],TYPE:[btype]==>
	end
	
texture: action TEX:[ tex ] repeat 64 ==> VID:[ tex ] repeat 64
	end

	motion: action  MOT:[ mot ] repeat 64 ==> VID:[ mot ] repeat 64
	end

	combine: action MOT:[ mot ] repeat 64, TEX:[ tex ] repeat 64 ==> VID:[ [ if tex[i] + mot[i] < 0 then
			0
		else
			if tex[i] + mot[i] > 255 then
				255
			else
				tex[i] + mot[i]
			end
		end : for int i in 0 .. 63 ] ] repeat 64
	end

	schedule fsm cmd :
		cmd ( cmd.textureOnly ) --> texture;
		cmd ( cmd.motionOnly ) --> motion;
		cmd ( cmd.other ) --> combine;
		texture ( texture ) --> cmd;
		motion ( motion ) --> cmd;
		combine ( combine ) --> cmd;
	end

	priority
		cmd.textureOnly > cmd.motionOnly > cmd.other;
	end

end