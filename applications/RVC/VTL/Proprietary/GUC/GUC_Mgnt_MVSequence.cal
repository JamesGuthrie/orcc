// Mgnt_MVSequence
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2006 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

package Proprietary.GUC;

actor GUC_Mgnt_MVSequence () 
	bool NEW_VOP, int(size=16) WIDTH, bool MOT, int (size=2) BTYPE, bool FOUR_MV ==> int(size=MB_COORD_SZ + 3) A:

	// Port size declaration

	int MB_COORD_SZ = 8;

	int MAXW_IN_MB = 121;

	// Generate indices into the stream history to locate
	//   comp         A          B             C
	//    0         left->1   above->2    above_right->3
	//    1           0       above->3    above_right->2
	//    2         left->3       0            1
	//    3           2           0            1
	//         comp layout
	//      Y         U       V
	//  +---+---+   +---+   +---+
	//  | 0 | 1 |   | 4 |   | 5 |
	//  +---+---+   +---+   +---+
	//  | 2 | 3 | 
	//  +---+---+
	int(size=MB_COORD_SZ) mbx := 0;

	// Current macroblock x position
	bool top_edge := true;

	// Top edge macroblock flag
	bool right_edge := false;

	int(size=4) comp := 0;

	int(size=MB_COORD_SZ) mbwidth := 0;

	// Macroblock width of current vop
	// Use A0, A1 for component index, A2 to select Y buffer
	// Also, locations 0-7 are reserved for all blocks without motion vectors. This protocol
	// must be identical to the buffer addressing in MVReconstruct.cal.
	int BUF_SIZE = MAXW_IN_MB;

	int(size=MB_COORD_SZ) ptr;

	int(size=MB_COORD_SZ) ptr_left;

	int(size=MB_COORD_SZ) ptr_above;

	int(size=MB_COORD_SZ) ptr_above_right;

	// buffer pointer wrap, skipping over address 0
	function decrement(int(size=MB_COORD_SZ) p) --> int(size=MB_COORD_SZ) :
		if p = 1 then
			BUF_SIZE - 1
		else
			p - 1
		end
	end

	// Access pointer into history
	// mb  - macroblock offset
	// c   - component to be accessed
	function access(int(size=MB_COORD_SZ) mbptr, int(size=4) c) --> int(size=MB_COORD_SZ +
		3) :
		bitor((mbptr << 3), (c & 3))
	end

	// New VOP
	start: action NEW_VOP:[ newvop ] ==>
	guard
		newvop
	do
		mbx := 0;
		top_edge := true;
		right_edge := false;
		comp := 0;
	end

	getw: action WIDTH:[ w ] ==>
	do
		mbwidth := w;
		// Reset pointers - no need to check wrap since line buffer is sized for max VOP width
		ptr := 1;
		// Start at 8, since 0-7 are reserved
		ptr_left := 2;
		ptr_above := w + 1;
		ptr_above_right := w;
	end


	read.noPredict: action NEW_VOP:[newvop], MOT:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==>
	guard
		not(newvop),
		comp > 3 
		or btype!=1
		or not mot 
		or (comp != 0 and 
		not(four_mv))
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			mbx := mbx + 1;
			ptr := decrement(ptr);
			ptr_left := decrement(ptr_left);
			ptr_above := decrement(ptr_above);
			ptr_above_right := decrement(ptr_above_right);
			if right_edge then
				mbx := 0;
				right_edge := false;
				top_edge := false;
			else
				if mbx = (mbwidth - 1) then
					right_edge := true;
				end
			end
		end
	end

	// Locate prediction indices:
	// block 0 left->1   above->2    above_right->3
	read.predict.y0: action NEW_VOP:[newvop], MOT:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==> A:[ access(pl, 1), access(pa, 2), access(par, 2) ]
	guard
		not(newvop),
		btype=1,
		mot,
		comp = 0
	var
		int(size=MB_COORD_SZ) pl = if mbx = 0 then
			0
		else
			ptr_left
		end , int(size=MB_COORD_SZ) pa = if top_edge then
			0
		else
			ptr_above
		end , int(size=MB_COORD_SZ) par = if top_edge or right_edge then
			0
		else
			ptr_above_right
		end
	do
		comp := comp + 1;
	end

	// block 1    0      above->3    above_right->2
	read.predict.y1: action NEW_VOP:[newvop], MOT:[mot] ,BTYPE:[btype], FOUR_MV:[four_mv]==> A:[ access(ptr, 0), access(pa, 3), access(par, 2) ]
	guard
		not(newvop),
		btype=1,
		mot,
		four_mv,
		comp = 1
	var
		int(size=MB_COORD_SZ) pa = if top_edge then
			0
		else
			ptr_above
		end , int(size=MB_COORD_SZ) par = if top_edge or right_edge then
			0
		else
			ptr_above_right
		end
	do
		comp := comp + 1;
	end

	// block 2 left->3       0            1
	read.predict.y2: action NEW_VOP:[newvop], MOT:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==> A:[ access(pl, 3), access(ptr, 0), access(ptr, 1) ]
	guard
		not(newvop),
		btype=1,
		mot,
		four_mv,
		comp = 2
	var
		int(size=MB_COORD_SZ) pl = if mbx = 0 then
			0
		else
			ptr_left
		end
	do
		comp := comp + 1;
	end

	// block 3    2          0            1
	read.predict.y3: action NEW_VOP:[newvop], MOT:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==> A:[ access(ptr, 2), access(ptr, 0), access(ptr, 1)
		]
	guard
		not(newvop),
		btype=1,
		mot,
		four_mv,
		comp = 3
	do
		comp := comp + 1;
	end

	schedule fsm read :
		read ( start ) --> getw;
		getw ( getw ) --> read;
		read ( read.predict ) --> read;
		read ( read.noPredict ) --> read;
	end

	priority
		start > read;
		read.noPredict > read.predict;
		read.predict.y0 > read.predict.y1 > read.predict.y2 > read.predict.y3;
	end

end