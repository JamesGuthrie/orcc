/**
 * This FU generates sequence of sample plain bytes, the key and the golden response bytes for stream ciphers.
 * For ARC4, test key vectors and their corresponding golden response keystreams are being taken from 
 * https://www.cosic.esat.kuleuven.be/nessie/testvectors/sc/arcfour/Rc4-arcfour-128.verified.test-vectors
 * 
 * FU ID: Source_ARC4
 * Three output ports:
 *   1) uint(size=8) OP1_Key: key (the first byte is the key size)
 *   2) uint(size=8) OP2_PT: plaintext
 *   3) uint(size=8) OP3_GR: golden response 
 * 
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

actor Source_ARC4 () ==> uint(size=8) OP1_Key, uint(size=8) OP2_PT, uint(size=8) OP3_GR :

	// Test vectors for ARC4.
	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE+1) key = [ // Key
		KEY_SIZE,
		0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	];
	int TEXT_SIZE = 64;
	List(type:uint(size=8), size=TEXT_SIZE) p = [ // Plaintext:
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,		
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (RC4 PRNG stream)
		0x4A,0xBC,0x7C,0x31,0x6D,0x52,0xE3,0xFF,0x0D,0xF7,0x37,0x05,0x39,0xEB,0x7B,0xD3,
	    0xED,0xB3,0x8B,0x1D,0xD7,0x43,0x3C,0xB1,0xA5,0xB8,0x5D,0x73,0xC1,0x88,0x87,0xED,
	    0xB2,0xA2,0x8D,0x72,0x95,0x31,0x90,0xA9,0xA1,0x1D,0xAA,0x8C,0x51,0x5F,0x20,0x33,
	    0x21,0x53,0xED,0x40,0x1C,0x31,0x57,0x18,0x9F,0xF4,0xD4,0x9B,0x75,0x45,0x4F,0xD4
	];

	// Due to the lack of support by ORCC on #, we cannot send the whole key alone as a token to the next FU. 
	int keyCounter := 0;
	action ==> OP1_Key:[key[keyCounter-1]]
	guard keyCounter<KEY_SIZE+1
	do
		keyCounter := keyCounter + 1;
	end
	
	int pCounter := 0;
	action ==> OP2_PT:[p[pCounter-1]]
	guard pCounter<TEXT_SIZE
	do
		pCounter := pCounter + 1;
	end

	int grCounter := 0;
	action ==> OP3_GR:[gr[grCounter-1]]
	guard grCounter<TEXT_SIZE
	do
		grCounter := grCounter + 1;
	end
end
