/**
 * This FU generates sequence of sample plain bytes, the key, the IV and the golden response PRNG for Rabbit.
 * For Rabbit, test key vectors and their corresponding golden response keystreams are being taken from 
 * http://www.cryptico.com/Files/Filer/WP_Rabbit_Specification.pdf
 * 
 * FU ID: Source_Rabbit_IV
 * Five output ports:
 *   1) uint(size=8) OP1_Key: key (the first byte is the key size)
 *   2) uint(size=8) OP2_IV: the IV (optional in Rabbit)
 *   3) uint(size=8) OP3_TextSize: the text of size to be encrypted/decypted
 *   4) uint(size=8) OP4_Text: the plaintext/ciphertext
 *   5) uint(size=8) OP5_GR: golden response (Rabbit PRNG stream)
 * 
 * Developers: Junaid Jamee Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

package Stream_Ciphers.Rabbit;

actor Source_Rabbit_IV () ==> uint(size=8) OP1_Key, uint(size=8) OP2_IV, uint(size=8) OP3_TextSize, uint(size=8) OP4_Text, uint(size=8) OP5_GR:

	// Test vectors for Rabbit.
	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE) key = [ // Key
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	];
	int TEXT_SIZE = 48;
	List(type:uint(size=8), size=TEXT_SIZE) text = [ // text:
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,		
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	];
	int IV_SIZE = 8;

	/*List(type:uint(size=8), size=KEY_SIZE) iv = [ // IV
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Rabbit PRNG stream)
		0xED,0xB7,0x05,0x67,0x37,0x5D,0xCD,0x7C,0xD8,0x95,0x54,0xF8,0x5E,0x27,0xA7,0xC6, 
		0x8D,0x4A,0xDC,0x70,0x32,0x29,0x8F,0x7B,0xD4,0xEF,0xF5,0x04,0xAC,0xA6,0x29,0x5F, 
		0x66,0x8F,0xBF,0x47,0x8A,0xDB,0x2B,0xE5,0x1E,0x6C,0xDE,0x29,0x2B,0x82,0xDE,0x2A
	];*/

	/*List(type:uint(size=8), size=KEY_SIZE) iv = [ // IV
		0x59,0x7E,0x26,0xC1,0x75,0xF5,0x73,0xC3
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Rabbit PRNG stream)
		0x6D,0x7D,0x01,0x22,0x92,0xCC,0xDC,0xE0,0xE2,0x12,0x00,0x58,0xB9,0x4E,0xCD,0x1F, 
		0x2E,0x6F,0x93,0xED,0xFF,0x99,0x24,0x7B,0x01,0x25,0x21,0xD1,0x10,0x4E,0x5F,0xA7, 
		0xA7,0x9B,0x02,0x12,0xD0,0xBD,0x56,0x23,0x39,0x38,0xE7,0x93,0xC3,0x12,0xC1,0xEB
	];*/

	List(type:uint(size=8), size=KEY_SIZE) iv = [ // IV
		0x27,0x17,0xF4,0xD2,0x1A,0x56,0xEB,0xA6
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Rabbit PRNG stream)
		0x4D,0x10,0x51,0xA1,0x23,0xAF,0xB6,0x70,0xBF,0x8D,0x85,0x05,0xC8,0xD8,0x5A,0x44, 
		0x03,0x5B,0xC3,0xAC,0xC6,0x67,0xAE,0xAE,0x5B,0x2C,0xF4,0x47,0x79,0xF2,0xC8,0x96, 
		0xCB,0x51,0x15,0xF0,0x34,0xF0,0x3D,0x31,0x17,0x1C,0xA7,0x5F,0x89,0xFC,0xCB,0x9F
	];

	bool keySent := false;
	sendKey:
	action ==> OP1_Key:[key] repeat KEY_SIZE
	guard not keySent 
	do
		keySent := true;
	end

	bool ivSent := false;
	sendIV:
	action ==> OP2_IV:[iv] repeat IV_SIZE
	guard not ivSent
	do
		ivSent := true;
	end

	bool textSent := false;
	sendText:
	action ==> OP3_TextSize:[TEXT_SIZE], OP4_Text:[text] repeat TEXT_SIZE 
	guard not textSent
	do
		textSent := true;
	end

	bool grSent := false;
	sendGR:
	action ==> OP5_GR:[gr] repeat TEXT_SIZE
	guard not grSent
	do
		grSent := true;
	end
end
