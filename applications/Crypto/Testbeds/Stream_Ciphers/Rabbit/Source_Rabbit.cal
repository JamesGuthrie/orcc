/**
 * This FU generates sequence of sample plain bytes, the key and the golden response PRNG for Rabbit.
 * For Rabbit, test key vectors and their corresponding golden response keystreams are being taken from 
 * http://www.cryptico.com/Files/Filer/WP_Rabbit_Specification.pdf
 * 
 * FU ID: Source_Rabbit_IV
 * Five output ports:
 *   1) uint(size=8) OP1_Key: key (the first byte is the key size)
 *   2) uint(size=8) OP2_IV: the IV (optional in Rabbit)
 *   3) uint(size=8) OP3_TextSize: the text of size to be encrypted/decypted
 *   4) uint(size=8) OP4_Text: the plaintext/ciphertext
 *   5) uint(size=8) OP5_GR: golden response (Rabbit PRNG stream)
 * 
 * Developers: Junaid Jamee Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

package Stream_Ciphers.Rabbit;

actor Source_Rabbit () ==> uint(size=8) OP1_Key, uint(size=8) OP2_IV, uint(size=8) OP3_TextSize, uint(size=8) OP4_Text, uint(size=8) OP5_GR:

	// Test vectors for Rabbit.
	int TEXT_SIZE = 48;
	List(type:uint(size=8), size=TEXT_SIZE) text = [ // text:
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,		
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	];
	int KEY_SIZE = 16;

	List(type:uint(size=8), size=KEY_SIZE) key = [ // Key
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Rabbit PRNG stream)
		0x02,0xF7,0x4A,0x1C,0x26,0x45,0x6B,0xF5,0xEC,0xD6,0xA5,0x36,0xF0,0x54,0x57,0xB1,	
		0xA7,0x8A,0xC6,0x89,0x47,0x6C,0x69,0x7B,0x39,0x0C,0x9C,0xC5,0x15,0xD8,0xE8,0x88,
		0x96,0xD6,0x73,0x16,0x88,0xD1,0x68,0xDA,0x51,0xD4,0x0C,0x70,0xC3,0xA1,0x16,0xF4
	];
/*
	List(type:uint(size=8), size=KEY_SIZE) key = [ // Key
		0xAC,0xC3,0x51,0xDC,0xF1,0x62,0xFC,0x3B,0xFE,0x36,0x3D,0x2E,0x29,0x13,0x28,0x91
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Rabbit PRNG stream)
		0x9C,0x51,0xE2,0x87,0x84,0xC3,0x7F,0xE9,0xA1,0x27,0xF6,0x3E,0xC8,0xF3,0x2D,0x3D,
		0x19,0xFC,0x54,0x85,0xAA,0x53,0xBF,0x96,0x88,0x5B,0x40,0xF4,0x61,0xCD,0x76,0xF5, 
		0x5E,0x4C,0x4D,0x20,0x20,0x3B,0xE5,0x8A,0x50,0x43,0xDB,0xFB,0x73,0x74,0x54,0xE5		
	];*/

	bool keySent := false;
	sendKey:
	action ==> OP1_Key:[key] repeat KEY_SIZE
	guard not keySent 
	do
		keySent := true;
	end

	bool textSent := false;
	sendText:
	action ==> OP3_TextSize:[TEXT_SIZE], OP4_Text:[text] repeat TEXT_SIZE 
	guard not textSent
	do
		textSent := true;
	end

	bool grSent := false;
	sendGR:
	action ==> OP5_GR:[gr] repeat TEXT_SIZE
	guard not grSent
	do
		grSent := true;
	end
end
