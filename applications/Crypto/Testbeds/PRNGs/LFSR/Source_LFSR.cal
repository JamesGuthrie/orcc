/**
 * This FU generates sequence of test parameters (a, b, m), initial seed, output stream size required 
 * and the golden response stream for validation. Test parameters are taken from [1] and their corresponding 
 * golden response streams are generated from [2].
 * [1] BRUCE SCHNEIER "Applied Cryptography: Protocols, Algorithms, and Source Code in C," 2nd Edition, ISBN: 0471128457, 
 *     John Wiley & Sons, Inc., 1996. 
 * [2] LFSR's matlab implementation available at
       http://www.mathworks.com/matlabcentral/fileexchange/22716-kasami-sequences-m-sequences-linear-feedback-shift-registers
 * 
 * FU ID: Source_LFSR
 * One output port
 *   1) uint(size=64) OP1_Params: the output to send the initialization parameters in the order: mask, 
 *                                initial seed, number of tokens required in generated by LFSR.
 *   2) uint OP2_StreamSize: the output to send required PRNB stream size to validator.
 *   3) uint(size=1) OP3_GR: the output to send PRNB golden stream to validator.
 * 
 * Developers: Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */
 
actor Source_LFSR() ==> uint(size=64) OP1_Params, uint OP2_StreamSize, uint(size=1) OP3_GR:
	
/*	// Test parameters for LFSR taken from [1].
	uint(size=64) mask = 0x8E; // Primitve polynomial (8, 4, 3, 2, 0).)
	uint(size=64) seed = 0x1F;
	uint OP_TOKENS = 510;
	List(type:uint(size=1),size=OP_TOKENS) gr := [ // Golden response (LFSR bit stream) generated from [2].
			1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,
			0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,
			0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,
			1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,
			1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,
			0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,
			0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,
			1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0
		];*/

	// Test parameters for LFSR taken from [1].
	uint(size=64) mask = 0x8016; // Primitve polynomial (16, 5, 3, 2, 0).
	uint(size=64) seed = 0x1F;
	uint OP_TOKENS = 510;
	List(type:uint(size=1),size=OP_TOKENS) gr := [ // Golden response (LFSR bit stream) generated from [2].
			1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,1,
			1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,
			0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,
			0,0,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,
			0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,
			1,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,
			1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,
			1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0
		];
	
	bool paramsSent := false;
	sendParameters:
	action ==> OP1_Params:[mask,seed,OP_TOKENS], OP2_StreamSize:[OP_TOKENS]
	guard not paramsSent
	do
		paramsSent := true;
	end

	bool grSent := false;
	sendGR:
	action ==> OP3_GR:[gr] repeat OP_TOKENS
	guard not grSent
	do
		grSent := true;
	end
end
