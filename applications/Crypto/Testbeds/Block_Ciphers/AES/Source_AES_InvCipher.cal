/**
 * This FU is part of the testbed of a CAL implementation of AES (Rijndael).
 * It sends a key, a sequence of plaintext and the golden response (ciphertext) to the AES decipher for testing purpose.
 * 
 * FU ID: Source_AES_InvCipher
 * Three output ports:
 * 1) OP1_CT: the ciphertext
 * 2) OP2_Key: the key (the first byte is the key size)
 * 3) OP3_GR: the golden response
 *
 * Developer: Shujun Li @ Uni-Konstanz 2010
 */

actor Source_AES_InvCipher () ==> uint(size=8) OP1_CT, uint(size=8) OP2_Key, uint(size=8) OP3_GR :

	// Test vectors for AES-128 (taken from FIPS 197).
/*	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE+1) k = [ // Key
		KEY_SIZE,
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	];
	int TEXT_SIZE = 16;
	List(type:uint(size=8), size=TEXT_SIZE) c = [ // Ciphertext: Single block
		0x69,0xc4,0xe0,0xd8,0x6a,0x7b,0x04,0x30,0xd8,0xcd,0xb7,0x80,0x70,0xb4,0xc5,0x5a
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Plaintext)
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	]; */
	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE+1) k = [ // Key
		KEY_SIZE,
		0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
	];
	int TEXT_SIZE = 48;
	List(type:uint(size=8), size=TEXT_SIZE) c = [ // Ciphertext: Multiple blocks
		0x39,0x25,0x84,0x1d,0x02,0xdc,0x09,0xfb,0xdc,0x11,0x85,0x97,0x19,0x6a,0x0b,0x32,
		0x8d,0xf4,0xe9,0xaa,0xc5,0xc7,0x57,0x3a,0x27,0xd8,0xd0,0x55,0xd6,0xe4,0xd6,0x4b,
		0xf2,0x96,0x8d,0x6e,0xc2,0xcf,0x00,0x9a,0x0a,0xdb,0x51,0xd1,0x41,0x05,0xd9,0x61
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Plaintext)
		0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
		0x1b,0x7d,0x62,0xfd,0x6b,0x71,0x81,0xb9,0xa4,0x49,0xd1,0x4f,0xaf,0xe0,0x5a,0x15
	];

	// Test vectors for AES-192.	
/*	int KEY_SIZE = 24;
	List(type:uint(size=8), size=KEY_SIZE+1) k = [ // Key
		KEY_SIZE,
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,
		0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17
	];
	int TEXT_SIZE = 16;
	List(type:uint(size=8), size=TEXT_SIZE) c = [ // Ciphertext: Single block
		0xdd,0xa9,0x7c,0xa4,0x86,0x4c,0xdf,0xe0,0x6e,0xaf,0x70,0xa0,0xec,0x0d,0x71,0x91
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Plaintext)
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	]; */

	// Test vectors for AES-256.	
/*	int KEY_SIZE = 32;
	List(type:uint(size=8), size=KEY_SIZE+1) k = [ // Key
		KEY_SIZE,
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
		0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
	];
	int TEXT_SIZE = 16;
	List(type:uint(size=8), size=TEXT_SIZE) c = [ // Ciphertext: Single block
		0x8e,0xa2,0xb7,0xca,0x51,0x67,0x45,0xbf,0xea,0xfc,0x49,0x90,0x4b,0x49,0x60,0x89
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Plaintext)
		0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
	]; */

	// Due to the lack of support by ORCC on #, we cannot send the whole key alone as a token to the next FU. 
	int kCounter := 0;
	action ==> OP2_Key:[k[kCounter-1]]
	guard kCounter<KEY_SIZE+1
	do
		kCounter := kCounter + 1;
	end
	
	int cCounter := 0;
	action ==> OP1_CT:[c[cCounter-1]]
	guard cCounter<TEXT_SIZE
	do
		cCounter := cCounter + 1;
	end

	int grCounter := 0;
	action ==> OP3_GR:[gr[grCounter-1]]
	guard grCounter<TEXT_SIZE
	do
		grCounter := grCounter + 1;
	end

end
