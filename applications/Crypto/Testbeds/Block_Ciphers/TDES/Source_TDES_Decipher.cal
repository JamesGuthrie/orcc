/**
 * This FU is part of the testbed of a CAL implementation of TDES (FIPS 46-3).
 * It sends a key, a sequence of ciphertext and the golden response (plaintext) to the TDES decipher for testing purpose.
 * 
 * FU ID: Source_TDES_Decipher
 * Five output ports:
 * 	 1) uint(size=8) OP1_PT: plaintext
 *   2) uint(size=8) OP2_Key1: Key 1
 *   3) uint(size=8) OP3_Key2: Key 2
 *   4) uint(size=8) OP4_Key3: Key 3
 * 	 5) uint(size=8) OP5_GR: golden response
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

package Block_Ciphers.TDES;

actor Source_TDES_Decipher () ==>
	uint(size=8) OP1_CT, 
	uint(size=8) OP2_Key1, uint(size=8) OP3_Key2, uint(size=8) OP4_Key3,
	uint(size=8) OP5_GR :

	// Test vectors for TDES (taken from NIST SP 800-67).
	int KEY_SIZE = 24;
	List(type:uint(size=8), size=KEY_SIZE) KEY = [ // Key bundle: Key1 != Key2 != Key3 != Key1
		0x45,0x67,0x89,0xAB,0xCD,0xEF,0x01,0x23,
		0x23,0x45,0x67,0x89,0xAB,0xCD,0xEF,0x01,
		0x01,0x23,0x45,0x67,0x89,0xAB,0xCD,0xEF
	];
	int TEXT_SIZE = 24;
	List(type:uint(size=8), size=TEXT_SIZE) c = [ // Ciphertext: Multiple blocks
		0xA8,0x26,0xFD,0x8C,0xE5,0x3B,0x85,0x5F,
		0xCC,0xE2,0x1C,0x81,0x12,0x25,0x6F,0xE6,
		0x68,0xD5,0xC0,0x5D,0xD9,0xB6,0xB9,0x00
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Plaintext)
		0x54,0x68,0x65,0x20,0x71,0x75,0x66,0x63,
		0x6B,0x20,0x62,0x72,0x6F,0x77,0x6E,0x20,
		0x66,0x6F,0x78,0x20,0x6A,0x75,0x6D,0x70
	];

	bool key3Sent := false;
	sendKey3:
	action ==> OP4_Key3:[[KEY[i]: for int i in 0 .. 7]] repeat 8
	guard not key3Sent 
	do
		key3Sent := true;
	end

	bool key2Sent := false;
	sendKey2:
	action ==> OP3_Key2:[[KEY[i]: for int i in 8 .. 15]] repeat 8
	guard not key2Sent 
	do
		key2Sent := true;
	end

	bool key1Sent := false;
	sendKey1:
	action ==> OP2_Key1:[[KEY[i]: for int i in 16 .. 23]] repeat 8
	guard not key1Sent 
	do
		key1Sent := true;
	end
	
	bool ctSent := false;
	sendCT:
	action ==> OP1_CT:[c] repeat TEXT_SIZE
	guard not ctSent 
	do
		ctSent := true;
	end

	bool grSent := false;
	sendGR:
	action ==> OP5_GR:[gr] repeat TEXT_SIZE
	guard not grSent 
	do
		grSent := true;
	end
end
