/**
 * This FU is part of the testbed of a CAL implementation of AES (Rijndael) running at OFB mode.
 * It sends a key, an inialization vector, a sequence of plaintext and the golden response (ciphertext) for the enciphers in CFB mode.
 * The test vectors and golden responses are taken from the following reference:
 * Morris Dworkin, "Recommendation for Block Cipher Modes of Operation: Methods and Techniques,"
 *  				NIST Special Publication 800-38A, December 2001
 * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
 * 
 * FU ID: Source_AES_OFB_Encipher
 * Five output ports:
 *   1) uint(size=8) OP1_IV: the initialization vector (counter)
 *   2) uint(size=8) OP2_KeySize: the key size
 *   3) uint(size=8) OP3_Key: the key
 *   4) uint(size=8) OP4_PT: the plaintext
 *   5) uint(size=8) OP5_GR: the golden response
 *
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

package Block_Ciphers.Modes;

actor Source_AES_OFB_Encipher () ==> uint(size=8) OP1_IV, uint(size=8) OP2_KeySize, uint(size=8) OP3_Key, uint(size=8) OP4_PT, uint(size=8) OP5_GR:

	// Test vectors for AES-128 (F.4.1 OFB-AES128.Encrypt).
	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector: One block
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	];
	
	int TEXT_SIZE = 32;
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,
		0x77,0x89,0x50,0x8d,0x16,0x91,0x8f,0x03,0xf5,0x3c,0x52,0xda,0xc5,0x4e,0xd8,0x25
	];

	// Test vectors for AES-192 (F.4.3 OFB-AES192.Encrypt).
/*	int KEY_SIZE = 24;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector: One block
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	];
	
	int TEXT_SIZE = 32;
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0xcd,0xc8,0x0d,0x6f,0xdd,0xf1,0x8c,0xab,0x34,0xc2,0x59,0x09,0xc9,0x9a,0x41,0x74,
		0xfc,0xc2,0x8b,0x8d,0x4c,0x63,0x83,0x7c,0x09,0xe8,0x17,0x00,0xc1,0x10,0x04,0x01
	]; */

	// Test vectors for AES-256 (F.4.5 OFB-AES256.Encrypt).
/*	int KEY_SIZE = 32;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
		0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector: One block
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	];
	
	int TEXT_SIZE = 32;	
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,
		0x4f,0xeb,0xdc,0x67,0x40,0xd2,0x0b,0x3a,0xc8,0x8f,0x6a,0xd8,0x2a,0x4f,0xb0,0x8d
	]; */

	bool dataSent := false;
	sendData:
	action ==> OP1_IV:[iv] repeat BLOCK_SIZE,
               OP2_KeySize:[KEY_SIZE],
               OP3_Key:[k] repeat KEY_SIZE,
               OP4_PT:[pt] repeat TEXT_SIZE,               
               OP5_GR:[gr] repeat TEXT_SIZE
    guard not dataSent
    do
    	dataSent := true;	
    end
end
