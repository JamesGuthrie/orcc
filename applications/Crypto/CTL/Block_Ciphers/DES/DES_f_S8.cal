/**
 * This FU is part of a CAL implementation of DES (FIPS 46-3).
 * It serves as selection function (S-Box) S8 inside DES cipher function 'f'.
 * 
 * FU ID: DES_f_S8
 * One input port:
 * 	 1) uint(size=1) IP: the input (block size: 6 bit tokens)
 * One output port:
 * 	 1) uint(size=1) OP: the output (block size: 4 bit tokens)
 *
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

 package Block_Ciphers.DES;

actor DES_f_S8 () uint(size=1) IP ==> uint(size=1) OP:
	
	// S-Box S8.
/*	List(type:uint(size=4), size=64) S =
	[
		13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
		1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
		7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
		2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11
	]; */
	// Use 2-D list to avoid complicated num2bits conversion.
	List(type:List(type:uint(size=1), size=4), size=64) S :=
	[
		// 13         2         8         4         6        15        11         1
		[1,1,0,1],[0,0,1,0],[1,0,0,0],[0,1,0,0],[0,1,1,0],[1,1,1,1],[1,0,1,1],[0,0,0,1],
		// 10         9         3        14         5         0        12         7
		[1,0,1,0],[1,0,0,1],[0,0,1,1],[1,1,1,0],[0,1,0,1],[0,0,0,0],[1,1,0,0],[0,1,1,1],
		//  1        15        13         8        10         3         7         4
		[0,0,0,1],[1,1,1,1],[1,1,0,1],[1,0,0,0],[1,0,1,0],[0,0,1,1],[0,1,1,1],[0,1,0,0],
		// 12         5         6        11         0        14         9         2
		[1,1,0,0],[0,1,0,1],[0,1,1,0],[1,0,1,1],[0,0,0,0],[1,1,1,0],[1,0,0,1],[0,0,1,0],
		//  7        11         4         1         9        12        14         2
		[0,1,1,1],[1,0,1,1],[0,1,0,0],[0,0,0,1],[1,0,0,1],[1,1,0,0],[1,1,1,0],[0,0,1,0],
		//  0         6        10        13        15         3         5         8
		[0,0,0,0],[0,1,1,0],[1,0,1,0],[1,1,0,1],[1,1,1,1],[0,0,1,1],[0,1,0,1],[1,0,0,0],
		//  2         1        14         7         4        10         8        13
		[0,0,1,0],[0,0,0,1],[1,1,1,0],[0,1,1,1],[0,1,0,0],[1,0,1,0],[1,0,0,0],[1,1,0,1],
		// 15        12         9         0         3         5         6        11
		[1,1,1,1],[1,1,0,0],[1,0,0,1],[0,0,0,0],[0,0,1,1],[0,1,0,1],[0,1,1,0],[1,0,1,1]
	];

	DES_f_S8:
	// Orcc has a bug to handle 2-D list, so that the following code does not work.
	// action IP:[bits] repeat 6 ==> OP:[ S[v] ] repeat 4
	action IP:[bits] repeat 6 ==> OP:[ [S[v][i]: for int i in 0 .. 3] ] repeat 4 
	var 
		int v
	do
		// Avoid using foreach and multiplfications to enhance efficiency.
		if bits[0]>0 then
			v := 32;
		else
			v := 0;
		end
		if bits[5]>0 then
			v := v + 16;
		end
		if bits[1]>0 then
			v := v + 8;
		end
		if bits[2]>0 then
			v := v + 4;
		end
		if bits[3]>0 then
			v := v + 2;
		end
		if bits[4]>0 then
			v := v + 1;
		end
	end

end
