/**
 * This FU is part of a CAL implementation of DES (FIPS 46-3).
 * It serves as selection function (S-Box) S3 inside DES cipher function 'f'.
 * 
 * FU ID: DES_f_S3
 * One input port:
 * 	 1) uint(size=1) IP: the input (block size: 6 bit tokens)
 * One output port:
 * 	 1) uint(size=1) OP: the output (block size: 4 bit tokens)
 *
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

 actor DES_f_S3 () uint(size=1) IP ==> uint(size=1) OP:
	
	// S-Box S3.
/*	List(type:uint(size=4), size=64) S =
	[
		10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
		13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
		13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
		1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12
	]; */
	// Use 2-D list to avoid complicated num2bits conversion.
	List(type:List(type:uint(size=1), size=4), size=64) S :=
	[
		// 10         0         9        14         6         3        15         5
		[1,0,1,0],[0,0,0,0],[1,0,0,1],[1,1,1,0],[0,1,1,0],[0,0,1,1],[1,1,1,1],[0,1,0,1],
		//  1        13        12         7        11         4         2         8
		[0,0,0,1],[1,1,0,1],[1,1,0,0],[0,1,1,1],[1,0,1,1],[0,1,0,0],[0,0,1,0],[1,0,0,0],
		// 13         7         0         9         3         4         6        10
		[1,1,0,1],[0,1,1,1],[0,0,0,0],[1,0,0,1],[0,0,1,1],[0,1,0,0],[0,1,1,0],[1,0,1,0],
		//  2         8         5        14        12        11        15         1
		[0,0,1,0],[1,0,0,0],[0,1,0,1],[1,1,1,0],[1,1,0,0],[1,0,1,1],[1,1,1,1],[0,0,0,1],
		// 13         6         4         9         8        15         3         0
		[1,1,0,1],[0,1,1,0],[0,1,0,0],[1,0,0,1],[1,0,0,0],[1,1,1,1],[0,0,1,1],[0,0,0,0],
		// 11         1         2        12         5        10        14         7
		[1,0,1,1],[0,0,0,1],[0,0,1,0],[1,1,0,0],[0,1,0,1],[1,0,1,0],[1,1,1,0],[0,1,1,1],
		//  1        10        13         0         6         9         8         7
		[0,0,0,1],[1,0,1,0],[1,1,0,1],[0,0,0,0],[0,1,1,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],
		//  4        15        14         3        11         5         2        12
		[0,1,0,0],[1,1,1,1],[1,1,1,0],[0,0,1,1],[1,0,1,1],[0,1,0,1],[0,0,1,0],[1,1,0,0]
	];

	DES_f_S1:
	// Orcc has a bug to handle 2-D list, so that the following code does not work.
	// action IP:[bits] repeat 6 ==> OP:[ S[v] ] repeat 4
	action IP:[bits] repeat 6 ==> OP:[ [S[v][i]: for int i in 0 .. 3] ] repeat 4 
	var 
		int v
	do
		// Avoid using foreach and multiplfications to enhance efficiency.
		if bits[0]>0 then
			v := 32;
		else
			v := 0;
		end
		if bits[5]>0 then
			v := v + 16;
		end
		if bits[1]>0 then
			v := v + 8;
		end
		if bits[2]>0 then
			v := v + 4;
		end
		if bits[3]>0 then
			v := v + 2;
		end
		if bits[4]>0 then
			v := v + 1;
		end
	end

end
