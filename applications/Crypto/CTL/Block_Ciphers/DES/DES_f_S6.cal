/**
 * This FU is part of a CAL implementation of DES (FIPS 46-3).
 * It serves as selection function (S-Box) S6 inside DES cipher function 'f'.
 * 
 * FU ID: DES_f_S6
 * One input port:
 * 	 1) uint(size=1) IP: the input (block size: 6 bit tokens)
 * One output port:
 * 	 1) uint(size=1) OP: the output (block size: 4 bit tokens)
 *
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

 actor Block_Ciphers.DES.DES_f_S6 () uint(size=1) IP ==> uint(size=1) OP:
	
	// S-Box S6.
/*	List(type:uint(size=4), size=64) S =
	[
		12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
		10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
		9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
		4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13
	]; */
	// Use 2-D list to avoid complicated num2bits conversion.
	List(type:List(type:uint(size=1), size=4), size=64) S :=
	[
		// 12         1        10        15         9         2         6         8
		[1,1,0,0],[0,0,0,1],[1,0,1,0],[1,1,1,1],[1,0,0,1],[0,0,1,0],[0,1,1,0],[1,0,0,0],
		//  0        13         3         4        14         7         5        11
		[0,0,0,0],[1,1,0,1],[0,0,1,1],[0,1,0,0],[1,1,1,0],[0,1,1,1],[0,1,0,1],[1,0,1,1],
		// 10        15         4         2         7        12         9         5
		[1,0,1,0],[1,1,1,1],[0,1,0,0],[0,0,1,0],[0,1,1,1],[1,1,0,0],[1,0,0,1],[0,1,0,1],
		//  6         1        13        14         0        11         3         8
		[0,1,1,0],[0,0,0,1],[1,1,0,1],[1,1,1,0],[0,0,0,0],[1,0,1,1],[0,0,1,1],[1,0,0,0],
		//  9        14        15         5         2         8        12         3
		[1,0,0,1],[1,1,1,0],[1,1,1,1],[0,1,0,1],[0,0,1,0],[1,0,0,0],[1,1,0,0],[0,0,1,1],
		//  7         0         4        10         1        13        11         6
		[0,1,1,1],[0,0,0,0],[0,1,0,0],[1,0,1,0],[0,0,0,1],[1,1,0,1],[1,0,1,1],[0,1,1,0],
		//  4         3         2        12         9         5        15        10
		[0,1,0,0],[0,0,1,1],[0,0,1,0],[1,1,0,0],[1,0,0,1],[0,1,0,1],[1,1,1,1],[1,0,1,0],
		// 11        14         1         7         6         0         8        13
		[1,0,1,1],[1,1,1,0],[0,0,0,1],[0,1,1,1],[0,1,1,0],[0,0,0,0],[1,0,0,0],[1,1,0,1]
	];

	DES_f_S6:
	// Orcc has a bug to handle list of lists, so that the following code does not work.
	// action IP:[bits] repeat 6 ==> OP:[ S[v] ] repeat 4
	action IP:[bits] repeat 6 ==> OP:[ [S[v][i]: for int i in 0 .. 3] ] repeat 4 
	var 
		int v
	do
		// Avoid using foreach and multiplfications to enhance efficiency.
		if bits[0]>0 then
			v := 32;
		else
			v := 0;
		end
		if bits[5]>0 then
			v := v + 16;
		end
		if bits[1]>0 then
			v := v + 8;
		end
		if bits[2]>0 then
			v := v + 4;
		end
		if bits[3]>0 then
			v := v + 2;
		end
		if bits[4]>0 then
			v := v + 1;
		end
	end

end
