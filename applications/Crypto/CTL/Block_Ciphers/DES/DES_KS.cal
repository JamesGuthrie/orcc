/**
 * This FU is part of a CAL implementation of DES (FIPS 46-3).
 * It performs the Key Scheduling (KS) calculations (derive subkeys for each round from KEY) and forwards
 * the generated keys to the DES round function 'f'.
 * 
 * FU ID: DES_KS
 * One FU parameters:
 * 		1) bool IS_ENCIPHER: true = encipher (default), false = decipher
 * One input port:
 * 		1) uint(size=1) IP: the key (composed of 64 bit tokens)
 * One output port:
 * 		1) uint(size=1) OP: list of derived keys (subkeys)
 *
 * Note: The key is also read from an input port because it is possible that key can be dynamically changed.
 *       Currently the key is read only once, so it is fixed for the whole encryption/decryption process.
 *       Support to dynamically updated keys are to be added when necessary.
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

actor DES_KS (bool IS_ENCIPHER = true) uint(size=1) IP ==> uint(size=1) OP: 

	// Flag controlling firing of action.
	bool keysScheduled := false;

	// Permuted Choice 1
	List(type:uint(size=8), size=56) PC1 = [
		57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,
		63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4 ];
	// Permuted Choice 2
	List(type:uint(size=8), size=48) PC2 = [
		14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,
		41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32 ];	
	// Number of left shifts for each round.
	List(type:uint(size=8), size=16) numLShifts = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];

	keyScheduler:
	action IP:[Key] repeat 64 ==> OP:[K] repeat 768
	guard not keysScheduled
	var
		// Sub-blocks C and D in KS.
		List(type:uint(size=1), size=56) CD := [0 : for int i in 1 .. 56],
		// A list for storing derived keys for all rounds.
		List(type:uint(size=1), size=768) K := [0 : for int i in 1 .. 768], // 48 bits * 16 keys = 768 bits		
		// Temporary variable to hold dropping bits while circulary left shift of C and D.
		List(type:uint(size=1), size=4) dropBits := [0,0,0,0],
		// Index of round key's starting point inside K.
		int numLShift,
		int roundKeyIndex
	do
		if IS_ENCIPHER then
			roundKeyIndex := 0;
		else
			roundKeyIndex := 720;
		end	
		// Generate initial C and D by performing Permuted Choice 1.
		foreach int i in 0 .. 55 do
			CD[i] :=  Key[PC1[i]-1];
		end
		foreach int round in 0 .. 15 do
			numLShift := numLShifts[round];
			// Circular Left Shift of C and D is performed in the follwing 3 steps.
			// Step 1: Save bits to be dropped from left ends of C and D.
			foreach	int i in 0 .. numLShift-1 do
				dropBits[i] := CD[i];
				dropBits[i+2] := CD[28+i];
			end			
			// Step 2: Left shift bits of C and D.
			foreach int i in numLShift .. 27 do
				CD[i-numLShift] := CD[i];
				CD[28+i-numLShift] := CD[28+i];
			end	
			// Step 3: Copy dropped bits from left ends of C and D to the right ends.
			foreach	int i in 0 .. numLShift-1 do
				CD[28-numLShift+i] := dropBits[i];
				CD[56-numLShift+i] := dropBits[i+2];
			end

			// Generate round key by performing Permuted Choice 2.
			foreach int i in 0 .. 47 do
				K[roundKeyIndex+i] :=  CD[PC2[i]-1];
			end
			// Update roundKeyIndex for next round key.
			if IS_ENCIPHER then
				roundKeyIndex := roundKeyIndex + 48;
			else
				roundKeyIndex := roundKeyIndex - 48;			
			end
		end
		keysScheduled := true;
	end
end
