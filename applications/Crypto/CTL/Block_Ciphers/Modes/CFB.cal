/**
 * This FU gives implementation of CFB (Cipher Feedback Mode) mode of block ciphers in RVC-CAL.
 * To ease implementation, we separately implement byte-based and bit-based CFB mode.
 * This FU implements the byte-based CFB mode.
 * 
 * FU ID: CFB
 * Three FU parameters:
 *   1) uint BLOCK_SIZE_CIPHER: Block size of the underlying block cipher in bytes (default: 16 = 128 bits)
 *   2) uint BLOCK_SIZE_MODE: Size of the input plaintext/ciphertext in bytes (default: 1 = 8 bits)
 *   3) bool IS_ENCIPHER: true = encipher mode (default), false = decipher mode
 * Three inputs ports:
 *   1) uint(size=8) IP1_IV: Initialization Vector
 *   2) uint(size=8) IP2_IT: Input plaintext/ciphertext 
 *   3) uint(size=8) IP3_OB: Output block of the block cipher
 * Two output ports:
 *   1) uint(size=8) OP1_OT: Output ciphertext/plaintext
 *   2) uint(size=8) OP2_IB: Input block sent to the block cipher for encryption
 * 
 * How this FU should be connected with a block encipher to form a stream cipher:
 * CFB.OP2_IB ==> BlockEncipher.Plaintext
 * BlockEncipher.Ciphertext ==> CFB.IP3_OB 
 * Plaintext/Ciphertext (Text to be encrypted/decrypted) ==> CFB.IP2_IT 
 * CFB.OP1_OT ==> Ciphertext/Plaintext (Text encrypted/decrypted)
 * 
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010 
 */

actor Block_Ciphers.Modes.CFB(uint BLOCK_SIZE_CIPHER=16, uint BLOCK_SIZE_MODE=1, bool IS_ENCIPHER=true)
	uint(size=8) IP1_IV, uint(size=8) IP2_IT, uint(size=8) IP3_OB ==> uint(size=8) OP1_OT, uint(size=8) OP2_IB:
	
	uint BLOCK_SIZE_MAX = 32; // Maximum block size in bytes

	// An index to indicate the current step running.
	// The scheduling of the steps are as follows: 0 --> 1; 1 --> 2 --> 3 --> 1.
	int step_index := 0; // 0 = readIV, 1 = sendIB, 2 = readOB, 3 = handleIT

	List(type:uint(size=8), size=BLOCK_SIZE_MAX) inputBlock := [0: for int i in 1 .. BLOCK_SIZE_MAX];

	// Read the initial vector and store it in inputBlock.
	int ivCounter := 0;
	readIV: // Step 0 (initialization)
	action IP1_IV:[byte] ==>
	guard step_index=0
	do
		inputBlock[ivCounter] := byte;
		ivCounter := ivCounter + 1;
		if (ivCounter = BLOCK_SIZE_CIPHER) then
			step_index := 1;
		end
	end

	// Send the input block to the block cipher for encryption. 
	int ibCounter := 0;
	sendIB: // Step 1
	action ==> OP2_IB:[byte]
	guard step_index=1
	var uint(size=8) byte
	do
		byte := inputBlock[ibCounter];
		ibCounter := ibCounter + 1;
		if (ibCounter = BLOCK_SIZE_CIPHER) then
			ibCounter := 0;
			step_index := 2;
			// Shift BLOCK_SIZE_MODE bytes to the left.
			foreach int i in BLOCK_SIZE_MODE .. BLOCK_SIZE_CIPHER-1 do
				inputBlock[i-BLOCK_SIZE_MODE] := inputBlock[i];
			end
		end
	end

	List(type:uint(size=8), size=BLOCK_SIZE_MAX) outputBlock := [0: for int i in 1 .. BLOCK_SIZE_MAX];

	// Read the output block from the block encipher and save it in the state variable outputBlock.
	int obCounter := 0;
	readOB: // Step 2
	action IP3_OB:[byte] ==>
	guard step_index=2
	do
		outputBlock[obCounter] := byte;
		obCounter := obCounter + 1;
		if (obCounter = BLOCK_SIZE_CIPHER) then
			obCounter := 0;
			step_index := 3;
		end
	end

	// Read the next plaintext/ciphertext block and encrypt/decrypt it by XORing it with MSB of outputBlock.
	int itCounter := 0;
	handleIT: // Step 3
	action IP2_IT:[itByte] ==> OP1_OT:[otByte]
	guard step_index=3
	var uint(size=8) otByte
	do
		otByte := bitxor(itByte, outputBlock[itCounter]);
		if IS_ENCIPHER then // Encipher
			inputBlock[BLOCK_SIZE_CIPHER-BLOCK_SIZE_MODE+itCounter] := otByte;
		else // Decipher
			inputBlock[BLOCK_SIZE_CIPHER-BLOCK_SIZE_MODE+itCounter] := itByte;
		end
		itCounter := itCounter + 1;
		if (itCounter = BLOCK_SIZE_MODE) then
			itCounter := 0;
			step_index := 1;
		end
	end

end
