/**
 * This FU gives implementation of Cipher Block Chaining (CBC) mode of block ciphers in RVC-CAL.
 * 
 * FU ID: CBC
 * One actor parameter:
 *   1) uint BLOCK_SIZE: Block size of the underlying block cipher in bytes (default: 16 = 128 bits)
 * Three inputs ports:
 *   1) uint(size=8) IP1_IV: Initial vector
 *   2) uint(size=8) IP2_IT: Input text block
 *   3) uint(size=8) IP3_FT: Feedback text block
 * One output port:
 *   1) uint(size=8) OP: Output text block
 * 
 * How this FU should be connected with a block encipher:
 * CBC.OP ==> BlockEncipher.Plaintext
 * BlockEncipher.Ciphertext ==> CBC.IP3_FT 
 * Plaintext ==> CBC.IP2_IT 
 * BlockEncipher.Ciphertext ==> Ciphertext 
 * 
 * How this FU should be connected with a block decipher:
 * BlockDecipher.Plaintext ==> CBC.IP2_IT 
 * Ciphertext ==> BlockDecipher.Ciphertext
 *            ==> CBC.IP3_FT
 * CBC.OP ==> Plaintext 
 * 
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010 
 */

actor Block_Ciphers.Modes.CBC(uint BLOCK_SIZE=16) uint(size=8) IP1_IV, uint(size=8) IP2_IT, uint(size=8) IP3_FT 
	==> uint(size=8) OP:
	
	int BLOCK_SIZE_MAX = 32; // Maximum block size in bytes

	// Three flags controlling firings of different actions.
	bool readingIV := true;
	bool readingIT := false;
	bool readingFT := false;

	// Feedback text 
	List(type:uint(size=8), size=BLOCK_SIZE_MAX) feedText := [0: for int i in 1 .. BLOCK_SIZE_MAX];

	// Initialize the state variable feedText with the initial vector.
	int ivCounter := 0;
	readIV:
	action IP1_IV:[byte] ==> 
	guard readingIV
	do
		feedText[ivCounter] := byte;
		ivCounter := ivCounter + 1;
		if (ivCounter = BLOCK_SIZE) then
			readingIV := false;
			readingIT := true;
		end
	end
	
	// Read the input text, XOR it with the feedback text and output the result.
	int itCounter := 0;
	action IP2_IT:[byte] ==> OP:[byte]
	guard readingIT // and itCounter < BLOCK_SIZE
	do
		byte := bitxor(byte, feedText[itCounter]);
		itCounter := itCounter + 1;
		if (itCounter = BLOCK_SIZE) then
			itCounter := 0;
			readingIT := false;
			readingFT := true;
		end
	end

	// Read the feedback text and store it in the state variable feedText.
	int ftCounter := 0;	
	action IP3_FT:[byte] ==>
	guard readingFT // and ftCounter < BLOCK_SIZE
	do
		feedText[ftCounter] := byte;
		ftCounter := ftCounter + 1;
		if (ftCounter = BLOCK_SIZE) then
			ftCounter := 0;
			readingFT := false;
			readingIT := true;
		end
	end

end
