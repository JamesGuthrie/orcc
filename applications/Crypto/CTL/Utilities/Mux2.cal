/**
 * This FU is part of a CAL Cryptographic Tool Library (CTL) Utilities.
 * It sequentially merges (or multiplexes) two sequences of tokens into a single sequence.
 * The merger is done by first sending n1 tokens from the first input port to the output port, 
 *   and then send n2 tokens from the second input port to the output port.
 * The process is repeated blockwise, where the block size is n=(n1+n2).
 * 
 * FU ID: Mux2
 * Two constants:
 * Note: Constants are being used instead of FU parameters because FU parameters are currently not fully 
 *       supported by Orcc. These constants will become FU parameters later.  
 *	 1) int PORT_SIZE: port size in bits (default: 1) 
 *	 2) int IP1_NUM_TOKENS: number of tokens to be read from the first input port (default: 32)  
 *	 3) int IP2_NUM_TOKENS: number of tokens to be read from the second input port (default: IP1_NUM_TOKENS)  
 * Two input ports:
 * 	 1) uint(size=PORT_SIZE) IP1
*    2) uint(size=PORT_SIZE) IP2
 * One output port:
 * 	 1) uint(size=PORT_SIZE) OP
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */
 
actor Utilities.Mux2 () uint(size=PORT_SIZE) IP1, uint(size=PORT_SIZE) IP2 ==> uint(size=PORT_SIZE) OP:  
 	// Constants to reconfigure this FU.	  
 	int PORT_SIZE = 1; 
 	int IP1_NUM_TOKENS = 32;
 	int IP2_NUM_TOKENS = IP1_NUM_TOKENS;
 	
 	// Note that this actor can be dramatically simplified if Orcc support list concatenation.
 	// actor IP1:[bits1] repeat IP1_NUM_TOKENS IP2:[bits2] repeat IP2_NUM_TOKENS ==> 
 	//       OP:[bits1+bis2] repeat IP1_NUM_TOKENS+IP2_NUM_TOKENS end

	int step_index := 1; // Step flag: 1 = sendIP1 <-> 2 = sendIP2

	sendIP1:
 	action IP1:[bits] repeat IP1_NUM_TOKENS ==> OP:[bits] repeat IP1_NUM_TOKENS
 	guard step_index=1
 	do
 		step_index := 2;
	end

	sendIP2:
 	action IP2:[bits] repeat IP2_NUM_TOKENS ==> OP:[bits] repeat IP2_NUM_TOKENS
 	guard step_index=2
 	do
 		step_index := 1;
	end
 
end
