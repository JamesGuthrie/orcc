/**
 * This FU is part of a CAL Cryptographic Tool Library (CTL) Utilities.
 * It transforms a sequence of bit tokens into a sequence of byte/word/double-word/quad-word token.
 * 
 * FU ID: Bits2Any
 * One FU parameter:
 * 	 1) bool IS_BIG_ENDIAN: output bits in big-endian? (true = big-endian, false = little-endian)
 * Two Constants:
 * Note: Constants are being used instead of FU parameters because FU parameters are currently not fully 
 *       supported by Orcc. These constants will become FU parameters later. 
 *	 1) int OP_PORT_SIZE: output port size (default: 8; possible values: 8, 16, 32, 64)
 *	 2) int IP_NUM_BITS: number of bits read from the input port that will be sent to the output port (default: OP_PORT_SIZE)
 *                       this number must not be greater than OP_PORT_SIZE		
 * One input port:
 * 	 1) uint(size=1) IP: the input (sequence of bit tokens)
 * One output port:
 * 	 1) uint(size=OP_PORT_SIZE) OP: the output token
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

actor Utilities.Bits2Any (bool IS_BIG_ENDIAN = true) uint(size=1) IP ==> uint(size=OP_PORT_SIZE) OP:
	
	int OP_PORT_SIZE = 8;
	int IP_NUM_BITS = OP_PORT_SIZE; // must be <= OP_PORT_SIZE
	int IP_NUM_BITS_1 = IP_NUM_BITS-1;

	Bits2Any:
	action IP:[bits] repeat IP_NUM_BITS ==> OP:[v]
	var
		uint(size=OP_PORT_SIZE) v := 0
	do
		if IS_BIG_ENDIAN then
			foreach int i in 0 .. IP_NUM_BITS_1 do
				v := (v << 1) + bits[i];
			end
		else
			foreach int i in 0 .. IP_NUM_BITS_1 do
				if bits[i]>0 then
					v := v + (1 << i);
				// else
					// v := v + 0 * (1 << i);
				end
			end
		end
	end

end
