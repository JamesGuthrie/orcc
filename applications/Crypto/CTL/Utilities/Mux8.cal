/**
 * This FU is part of a CAL Cryptographic Tool Library (CTL) Utilities.
 * It sequentially merges (or multiplexes) eight sequences of tokens into a single sequence.
 * The merger is done by first sending n tokens from the first input port to the output port, 
 *   then send n tokens from the second input port to the output port, ..., 
 *   finally send n tokens from the 8th input port to the output port.
 * The process is repeated blockwise, where the block size is 8*n.
 * 
 * FU ID: Mux8
 * Two constants:
 * Note: Constants are being used instead of FU parameters because FU parameters are currently not fully 
 *       supported by Orcc. These constants will become FU parameters later.  
 *	 1) int PORT_SIZE: port size in bits 
 *	 2) int NUM_TOKENS: number of tokens to be read from each input port  
 * Eight input ports:
 * 	 1), ..., 8) uint(size=PORT_SIZE) IP1, ..., IP8: the eight inputs
 * One output port:
 * 	 1) uint(size=PORT_SIZE) OP: the output
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */
 
package Utilities;

actor Mux8 ()
	uint(size=PORT_SIZE) IP1, uint(size=PORT_SIZE) IP2, uint(size=PORT_SIZE) IP3, uint(size=PORT_SIZE) IP4, 
 	uint(size=PORT_SIZE) IP5, uint(size=PORT_SIZE) IP6, uint(size=PORT_SIZE) IP7, uint(size=PORT_SIZE) IP8
	==> uint(size=PORT_SIZE) OP:

 	// Constants to reconfigure this FU.	  
 	int PORT_SIZE = 1; 
 	int NUM_TOKENS = 4;	

	// State variable to control the firing of actions.
	int step_index := 1; // Scheduling of the actions: 1 --> 2 --> 3 ... --> 8 --> 1.

	forwardIP1:
	action IP1:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 1
	do  
		step_index := 2;
	end

	forwardIP2:
	action IP2:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 2
	do
		step_index := 3;
	end

	forwardIP3:
	action IP3:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 3
	do
		step_index := 4;
	end

	forwardIP4:
	action IP4:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 4
	do
		step_index := 5;
	end

	forwardIP5:
	action IP5:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 5
	do
		step_index := 6;
	end

	forwardIP6:
	action IP6:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 6
	do
		step_index := 7;
	end

	forwardIP7:
	action IP7:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 7
	do
		step_index := 8;
	end

	forwardIP8:
	action IP8:[bits] repeat NUM_TOKENS ==> OP:[bits] repeat NUM_TOKENS
	guard step_index = 8
	do
		step_index := 1;
	end

end
