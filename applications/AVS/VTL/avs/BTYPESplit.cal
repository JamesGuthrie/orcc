// splitter_BTYPE.cal
//
// Author: Christophe Lucarz (christophe.lucarz@epfl.ch) 
// 
// Description: the sequence of BTYPE token is not homogeneous, there is fist a NEW VOP command, then, the width and height of this VOP, then the  corresponding 8x8 blocks of texture, motion or mixed tex/mot. This actor will delete the tokens concerning the information of the VOP and redistribute the tokens to the Y, U and V components. So that the adder have directly the token intra, accoded or mixed.

// Modified by DandanDing(dandan2036@163.com)
// Data: 22.02.2008 10:18:52 


package avs;

actor BTYPESplit(
  /*
  int BTYPE_SZ, 
  int NEWVOP
  */
) 
  int(size=BTYPE_SZ) BTYPE 
  ==> 
  int(size=BTYPE_SZ) BTYPE_Y, 
  int(size=BTYPE_SZ) BTYPE_U, 
  int(size=BTYPE_SZ) BTYPE_V :
  
  int BTYPE_SZ = 12;
  int NEWVOP = 2048;
  
  /*
  function initList( v, size ) :
    [ v : for n in Integers(1,size) ]
  end
  */
  
  // to send the newvop token to the address and add block (arrggg) 
  cmd.newVop : action BTYPE:[cmd] ==> BTYPE_Y:[ cmd ] , BTYPE_U:[ cmd ], BTYPE_V:[ cmd ]
  guard
    (cmd & NEWVOP) != 0
  //do
    //println("BTYPESplit newVop ");
  end 
  
  // to delete the token relative to the width and the height
  skip_wh : action BTYPE:[cmd] repeat 2 ==> BTYPE_Y:[ cmd[0], cmd[1] ]  , BTYPE_U:[ cmd[0], cmd[1] ], BTYPE_V:[ cmd[0], cmd[1] ]
  //do
    //println("BTYPESplit skip cmd = "+cmd[0]);
    //println("BTYPESplit skip cmd = "+cmd[1]);
  end
  
  // to split the tokens 
  cmd.split: action BTYPE:[btype] repeat 6 ==> BTYPE_Y:[ btype[0], btype[1], btype[2], btype[3] ] , BTYPE_U:[ btype[4] ], BTYPE_V:[ btype[5] ]
  //do 
    //println("BTYPESplit split cmd ="+btype[0]);
    //println("BTYPESplit split cmd ="+btype[1]);
    //println("BTYPESplit split cmd ="+btype[2]);
    //println("BTYPESplit split cmd ="+btype[3]);
  end 
  
  schedule fsm cmd:
  cmd   (cmd.newVop)  --> skip_wh;
  cmd   (cmd.split )  --> cmd;
  skip_wh  (skip_wh  )  --> cmd;
  end 
  priority
  cmd.newVop > cmd.split;
  end
end