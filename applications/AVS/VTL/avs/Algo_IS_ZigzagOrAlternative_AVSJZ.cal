/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, Wen Gao

// Algo_IS_ZigzagOrAlternative_AVSJZ.cal
// Function:This module implements Inverse Scan(IS) of AVS Jizhun Profile.

/*******************************************************************************************************
 Input Ports:
 ============
 *int(size=1) BTYPE
 Offer control signal for scan mode.
 
 *int(size = SAMPLE_SZ) IS_IN
 A sequence of 64 coefficients in encoding order physically.
 
 Output Ports:
 =============
 *int(size=SAMPLE_SZ) IQ_IN
 A sequence of 64 coefficients in raster order physically. The output of IS is the input of IQ.
*******************************************************************************************************/
// don't support field IS in this version.

package avs;

actor Algo_IS_ZigzagOrAlternative_AVSJZ (
) 
  
  int(size=BTYPE_SZ) BTYPE,
  int(size=SAMPLE_SZ) IS_IN 
  ==> 
  int(size=SAMPLE_SZ) IQ_IN :

  int BTYPE_SZ = 12;
  int NEWVOP = 2048;
  int SAMPLE_SZ = 13;
  int COEFF_CODED = 2;
  
  List( type:int(size=7), size=128 ) Scanmode = 
  [    0,  1,  5,  6, 14, 15, 27, 28,  2,  4,  7, 13, 16, 26, 29, 42,	//0:63 zigzag for fame mode, IS_MODE=1
       3,  8, 12, 17, 25, 30, 41, 43,  9, 11, 18, 24, 31, 40, 44, 53,
      10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60,
      21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63,

       0, 43, 11, 16, 22, 32, 38, 55,  1,  6, 12, 20, 25, 33, 42, 57,	//64:127 Alternative for field mode,IS_MODE=0
       2,  7, 15, 21, 28, 37, 43, 58,  4, 10, 19, 27, 31, 39, 47, 59,
       5, 14, 24, 30, 36, 44, 50, 60,  8, 17, 26, 35, 41, 48, 52, 61,
       9, 18, 29, 40, 46, 51, 54, 62, 13, 23, 34, 45, 49, 53, 56, 63
  ];

  int BUF_SIZE = 128;
  int(size=8) count := 0 ;		//Holds number of coeffs read in or written out
  int(size=8) addr;			      //Inverse Scan base address from List Scanmode for current block of 64 Ac coeffs --> 0;64;1
  int(size=2) add_buf;		    //Inverse Scan for next block of 64 coeffs 0;1;2

  List(type: int(size=SAMPLE_SZ), size=BUF_SIZE) buf := [ 0 : for int k in 1 .. BUF_SIZE ];	//Stores incoming coeffs 128 divided to 64::64
  
  //bool half := false;		      //flag to change buffer

  function wa()--> int :
    (count & 63)
    //bitor( (count & 63), if half then 64 else 0 end )	//if half =0 writes to 0-63 else to 64-128
  end

  function ra( int address )--> int :
    (address & 63)
    //bitor( (addr & 63), if half then 0 else 64 end )	//if half =1 reads from 0-63 else from 64-128
  end

  //if it is a new frame, then next to skip width and height cmd.
  check_new_vop: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) != 0
  //do
    //println("IS:check_new_vop");
  end

  skip_wh: action BTYPE:[cmd] repeat 2==>
  end

  // if it is not a vop then check the coeff_coded signal.
  // if the coeff_coded = 0 then skip IS.
  check_coeff_ncoded: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) = 0,
    (COEFF_CODED & cmd) = 0
  //do
    //println("IS:Coeff_coded = 0. Skip IS!");
  end

  // if the coeff_coded = 1 then IS.
  check_coeff_coded: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) = 0,
    (COEFF_CODED & cmd) != 0
  //do
    //println("IS:Coeff_coded = 1");
  end						
  
  // set the start address of IS.
  // In this version, the initial add_buf was set to 0 (frame_mode).
  start: action ==>
  do
    add_buf := 0;
    //println("IS:start");
  end

  done: action ==>					//Done reading or writing 64 ac coeffs
  guard count = 64
  do
    count := 0;					    //reset count
    //half := not half;				//point to other hapl of the buffer
    addr := if add_buf = 0 then 0 else 64 end;   //List Scanmode pointer for current inv scan for current block
    //println("IS:done");
  end

  // If there is not a block in the buffer already, just read in the block
  read_only: action IS_IN:[s] ==>		
  do
    buf[ wa() ] := s;		//coeff in buffer
    count := count + 1;		        //increase count
    //println("IS:read_only:IS_IN="+s);
  end

// If there is a block in the buffer already but no new arrival, just write it out
  write_only: action ==> IQ_IN:[out]
  var
    int out
  do
    out := buf[ ra(Scanmode[addr] ) ];
    //println("IS:write_only:IQ_IN="+out);
    addr := addr+1;			//points to next ceffs address
    count := count + 1;    
  end

schedule fsm check:
 
  check   ( check_new_vop      ) --> skip_wh;
  skip_wh ( skip_wh            ) --> check;
  check   ( check_coeff_ncoded ) --> check;			
  check   ( check_coeff_coded  ) --> start;
  start   ( start              ) --> read;

  read    ( read_only          ) --> read;			
  read    ( done               ) --> write;
 
  write   ( write_only         ) --> write;
  write   ( done               ) --> check;
end
 
priority 
  done > read_only;
  done > write_only;
end  

end