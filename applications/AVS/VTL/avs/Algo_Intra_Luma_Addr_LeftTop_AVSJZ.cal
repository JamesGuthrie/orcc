/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_Intra_Luma_Addr_LeftTop_AVSJZ Mgnt_TwoAddr_LeftTop_LUMA_AVSJZ
// Function: This module calculates the addresses of the two neighbouring blocks for the current 8x8 block used for intra prediction.  

/********************************************************************************************************************************************
 Input Ports:
 ============
 *int(size=BTYPE_SZ) BTYPE
 This input token specifies the coding mode of the current 8x8 block. When executing, 
 the first 3 BTYPE tokens of a VOP relate to global parameters of the VOP. The first BTYPE 
 token indicates a new VOP, and the subsequent two BTYPE tokens indicate the width and the 
 height of the VOP in macroblocks respectively. All subsequent BTYPE tokens for the VOP 
 specify the coding mode of the current 8x8 block. For details on the structure of the
 BTYPE token, refer to ParseHeaders.cal

 Output Ports:
 =============
 *int(size=MB_COORD_SZ) A
 The address of the 8x8 block neighbour to the left of the current 8x8 block.

 *int(size=MB_COORD_SZ) B
 The address of the 8x8 block neighbour to the above of the current 8x8 block.

 Modifications:
 *
 *
 *
*********************************************************************************************************************************************/
//the buffer is used to store realted information of A and B block.
//the information includes 4 bits([3:0]):
//[0] indicates whether A/B is intra moded.
//[3:1] indicates the intra mode of A/B.

package avs;

actor Algo_Intra_Luma_Addr_LeftTop_AVSJZ (
  /*
  int MAXW_IN_MB, 
  int MB_COORD_SZ,
  int BTYPE_SZ,
  int NEWVOP,
  int INTRA
  */
)    

  int(size=BTYPE_SZ) BTYPE 
  ==> 
  int(size=MB_COORD_SZ+2) A, 
  int(size=MB_COORD_SZ+2) B: 
  
  int MAXW_IN_MB = 22;
  int MB_COORD_SZ = 8;
  int BTYPE_SZ = 12;
  int NEWVOP = 2048;
  int INTRA = 1024;
  
  // Generate indices into the stream history to locate
  //   A  neighbour to the left
  //   B  neighbour top
  

  // Layout of macroblock components (the variable 'comp')
  //  +---+---+ 
  //  | 0 | 1 | 
  //  +---+---+  
  //  | 2 | 3 | 
  //  +---+---+

  int(size=MB_COORD_SZ) mbx := 0;           // Current macroblock x position
  bool top_edge  := true;        // Top edge macroblock flag
  bool left_edge;                // Left edge macroblock flag
  uint(size=3) comp := 0;           // 8x8 block component in macroblock index
  int(size=MB_COORD_SZ) mbwidth := 0;           // Macroblock width of current vop
  int BUF_SIZE = (MAXW_IN_MB+2);
  List( type:bool, size=BUF_SIZE*4 ) coded := [ false : for int i in 1 .. BUF_SIZE*4 ];  // Buffer to record if 8x8 block is coded or not (i.e. are there DCT coeffs in the bitstream for this block?
  int(size=MB_COORD_SZ) ptr;                      // Pointer to current macroblock
  int(size=MB_COORD_SZ) ptr_left;                 // Pointer to left neighbour macroblock ('A')
  int(size=MB_COORD_SZ) ptr_above;                // Pointer to above neighbour macroblock ('B')

  // Buffer pointer wrap, skipping over address 0
  function decrement( int(size=MB_COORD_SZ) p ) --> int(size=MB_COORD_SZ) :
    if p = 1 then BUF_SIZE-1 else p - 1 end
  end

  // Fuse the macroblock address and the 8x8 block component address to get appropriate address of desired 8x8 block in memory
  function access( int(size=MB_COORD_SZ) p, int(size=3) c ) --> int(size=MB_COORD_SZ+2) :
    (p << 2) | c 
  end

  // New VOP
  start: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) != 0
  do
    mbx       := 0;
    top_edge  := true;
    left_edge := true;
    comp      := 0;
  end

  // Decode width of VOP and initialise flags
  getw: action BTYPE:[w] ==>
  do
    mbwidth        := w;
    ptr            := 1;
    ptr_left       := 2;
    ptr_above      := 1 + w;
  end

  // skip height of macroblock (not needed in this FU)
  geth: action BTYPE:[h] ==>
  end

  // Is an INTRA 8x8 block
  read.intra: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) = 0,
    (cmd & INTRA) != 0
  do
    coded[ access(ptr,comp) ] := true;
  end

  // Is not an INTRA 8x8 block
  read.other: action BTYPE:[ btype ] ==>
  do
    coded[ access(ptr,comp) ] := false;
  end

  // Move to the next 8x8 block and set flags appropriately
  advance: action ==>
  do
    comp := comp + 1;
    if comp = 4 then 
      comp := 0;
      mbx := mbx + 1;
      left_edge := false;
      if mbx = mbwidth then
        mbx := 0;
        top_edge := false;
        left_edge := true;
      end
      ptr := decrement( ptr );
      ptr_left := decrement( ptr_left );
      ptr_above := decrement( ptr_above );
    end
  end

  // Locate prediction indices for block 0
  predict.b0: action  ==>  A:[a], B:[b]
  guard comp = 0
  var
    int(size=MB_COORD_SZ+2) a := 0,
    int(size=MB_COORD_SZ+2) b := 0
  do
    if not left_edge then
      // left-neighbor is block 1 from previous macroblock
      a := access( ptr_left, 1 );
      if not coded[ a ] then
        a := 0;
      end
    end
    // above-neighbor is block 2 from previous row macroblock
    if not top_edge then
      b := access( ptr_above, 2 );
      if not coded[ b ] then
        b := 0;
      end
    end
    //println("predict.b0: a="+a+", "+"b="+b);
  end

  // Locate prediction indices for block 1
  predict.b1: action  ==>  A:[a], B:[b]
  guard comp = 1
  var
    int(size=MB_COORD_SZ+2) a := access( ptr, 0 ),     // left-neighbor is block 0 from this macroblock
    int(size=MB_COORD_SZ+2) b := 0
  do
    if not coded[ a ] then
      a := 0;
    end
    if not top_edge then
      // above-neighbor is block 3 from previous row macroblock
      b := access( ptr_above, 3 );
      if not coded[ b ] then
        b := 0;
      end
    end
    //println("predict.b1: a="+a+", "+"b="+b);
  end

  // Locate prediction indices for block 2
  predict.b2: action  ==>  A:[a], B:[b]
  guard comp = 2
  var
    int(size=MB_COORD_SZ+2) a := 0,
    int(size=MB_COORD_SZ+2) b := access( ptr, 0 )     // above-neighbor is block 0 from this macroblock
  do
    if not left_edge then
      // left-neighbor is block 3 from previous macroblock
      a := access( ptr_left, 3 );
      if not coded[ a ] then
        a := 0;
      end
    end
    if not coded[ b ] then
      b := 0;
    end
    //println("predict.b2: a="+a+", "+"b="+b);
  end

  // Locate prediction indices for block 3
  predict.b3: action  ==>  A:[a], B:[b]
  guard comp = 3
  var
    int(size=MB_COORD_SZ+2) a := access( ptr, 2 ),    // left-neighbor is block 2 from this macroblock
    int(size=MB_COORD_SZ+2) b := access( ptr, 1 )     // above-neighbor is block 1 from this macroblock
  do
    if not coded[ a ] then
      a := 0;
    end
    if not coded[ b ] then
      b := 0;
    end
    //println("predict.b3: a="+a+", "+"b="+b);
  end

  schedule fsm read :
    read     ( start       ) --> getw;
    getw     ( getw        ) --> geth;
    geth     ( geth        ) --> read;
    read     ( read.intra  ) --> predict;
    read     ( read.other  ) --> advance;
    predict  ( predict     ) --> advance;
    advance  ( advance     ) --> read;
  end

  priority
    start > read;
    read.intra > read.other;
  end

end