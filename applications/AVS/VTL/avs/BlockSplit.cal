// splitter_420_B.cal
//
// Author: Andrew Kinane (kinanea@eeng.dcu.ie)
// 
// Description: This module splits a 4:2:0 chroma subsampled serial macroblock (YYYYUV)
//              into its respective Y, U and V components.

// Modified by: DandanDing (dandan2036@163.com)
// Data : 22.02.2008 09:16:52

package avs;

actor BlockSplit (
  /*
  int BLOCK_SZ,
  int SAMPLE_SZ,
  int BTYPE_SZ,
  int NEWVOP,
  int INTRA,
  int INTER,
  int COEFF_CODED
  */
) 
  int(size=SAMPLE_SZ) Block, 
  int(size=BTYPE_SZ) BTYPE 
  ==> 
  int(size=SAMPLE_SZ) Block_Y, 
  int(size=SAMPLE_SZ) Block_U, 
  int(size=SAMPLE_SZ) Block_V :
  
  int BLOCK_SZ = 64;
  int SAMPLE_SZ = 13;
  int BTYPE_SZ = 12;
  int NEWVOP = 2048;
  int INTRA = 1024;
  int INTER = 512;
  int COEFF_CODED = 2;
  
  int(size=4) comp := 0;
  //         comp layout
  //      Y         U       V
  //  +---+---+   +---+   +---+
  //  | 0 | 1 |   | 4 |   | 5 |
  //  +---+---+   +---+   +---+
  //  | 2 | 3 | 
  //  +---+---+  
  
  // atsrt a new frame
  start: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) != 0
  end
  
  //skip the width and heigth in BTYPE
  skip_wh: action BTYPE:[ cmd ] repeat 2 ==>
  end
  
  //if the coefficients are all zero then skip the block and uncessary to decode it. 
  skip_uncoded: action BTYPE:[ cmd ] ==>
  guard
    //in AVS dc and ac are coded together
    //(cmd & INTER)  != 0, // An INTER block
    (cmd & COEFF_CODED) = 0  // Not COEFF_CODED

  do 
    comp := comp + 1;    
    if comp = 6 then
      comp := 0;
    end  
  end  
  
  // neither INTRA nor INTER
  skip_other: action BTYPE:[ cmd ] ==>
  guard
    (cmd & INTER) = 0,  // Not an INTER block
    (cmd & INTRA) = 0   // Not an INTRA block
  do
    comp := comp + 1;    
    if comp = 6 then
      comp := 0;
    end    
  end    
    
  splitY: action BTYPE:[ cmd ], Block:[ x ] repeat BLOCK_SZ ==> Block_Y:[ x ] repeat BLOCK_SZ 
  guard comp < 4
  do
    //println("block_Y_out");
    comp := comp + 1;
  end
  
  splitU: action BTYPE:[ cmd ], Block:[ x ] repeat BLOCK_SZ ==> Block_U:[ x ] repeat BLOCK_SZ 
  guard comp = 4
  do
    //println("block_U_out");
    comp := comp + 1;
  end  
  
  splitV: action BTYPE:[ cmd ], Block:[ x ] repeat BLOCK_SZ ==> Block_V:[ x ] repeat BLOCK_SZ 
  guard comp = 5
  do
    //println("block_V_out");
    comp := 0;
  end    
 
  // 4:2:0 schedule.
  schedule fsm READ :
    READ ( start   )      --> GETWH;
    GETWH( skip_wh )      --> READ; 
        
    READ ( skip_uncoded ) --> READ;    
    READ ( skip_other   ) --> READ;    
    READ ( splitY       ) --> READ;        
    READ ( splitU       ) --> READ;        
    READ ( splitV       ) --> READ;
  end
  
  priority
    start > skip_uncoded > skip_other > splitY > splitU > splitV;
  end

end