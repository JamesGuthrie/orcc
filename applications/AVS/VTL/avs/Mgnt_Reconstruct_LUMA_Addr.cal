/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Mgnt_Reconstruct_LUMA_Addr.cal
// Function: This module is to calculate write address in frame buffer for reconstruction for AVS Jizhun Profile.
// Note:

// BTYPE
actor avs.Mgnt_Reconstruct_LUMA_Addr (
 )
   int(size=PIX_SZ) RecData, 
   int(size=BTYPE_SZ) BTYPE 
   ==> 
   int(size=ADDR_SZ) WA, 
   int(size=PIX_SZ) WD,
   int(size=1) REC_DONE :
   
   int BTYPE_SZ = 12;
   int NEWVOP = 2048;
   int MB_COORD_SZ = 8;
   int PIX_SZ = 9;
   int ADDR_SZ = 24;
   //_CAL_tokenMonitor := true;
   
   uint(size=3) comp;
   
   int(size=MB_COORD_SZ) mb_width;
   int(size=MB_COORD_SZ) mb_height;
   int(size=MB_COORD_SZ) mbx;
   int(size=MB_COORD_SZ) mby;

   int(size=MB_COORD_SZ+4) pic_width;
   int(size=MB_COORD_SZ+4) pic_height;
   
   int(size=13) block_line;
   int(size=13) pix_in_block;

   int(size=ADDR_SZ) write_addr_b0;
   int(size=ADDR_SZ) write_addr_b1;
   int(size=ADDR_SZ) write_addr_b2;
   int(size=ADDR_SZ) write_addr_b3;

   uint(size=1) block_rec_done;

   get_new_vop: action BTYPE:[cmd] ==>
   guard
     bitand( NEWVOP, cmd ) != 0
   do
     write_addr_b0 := 0;
     write_addr_b1 := 0;
     write_addr_b2 := 0;
     write_addr_b3 := 0;

     pix_in_block := 0;
     block_line := 0;

     mbx := 0;
     mby := 0;

     comp := 0;
     //println("Mgnt_Reconstruct_LUMA_Addr:get_new_vop");
   end
   
   get_w: action BTYPE:[w] ==>
   do
     mb_width := w;
     pic_width := lshift(w,4);
     //println("Mgnt_Reconstruct_LUMA_Addr:get_w");
   end
   
   get_h: action BTYPE:[h] ==>
   do
     mb_height := h;
     pic_height := lshift(h,4);
     //println("Mgnt_Reconstruct_LUMA_Addr:get_h");
   end
   
   skip: action BTYPE:[cmd] ==>
   guard
     bitand(NEWVOP,cmd) = 0
   do
     //println("Mgnt_Reconstruct_LUMA_Addr:skip");
   end
   
   get_addr_b0: action RecData:[rec_data] ==> WA:[write_addr_b0], WD:[rec_data]
   guard
     comp = 0,
     not(block_line = 8)
   var
     int(size=ADDR_SZ) write_initial_addr = lshift(mby,4)*pic_width + lshift(mbx,4),
     int(size=ADDR_SZ) write_initial_addr_b0 = write_initial_addr
   do
     write_addr_b0 := write_initial_addr_b0 + pix_in_block + block_line * pic_width;
     pix_in_block := pix_in_block + 1;
     if(pix_in_block = 8) then
       pix_in_block := 0;
       block_line := block_line + 1;
     end
     //println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b0:write_addr_b0="+write_addr_b0);
     ////println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b0:write_addr_b0="+write_addr_b0);
     //println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b0:rec_data="+rec_data);
   end
   
   get_addr_b1: action RecData:[rec_data] ==> WA:[write_addr_b1], WD:[rec_data]
   guard
     comp = 1
   var
     int(size=ADDR_SZ) write_initial_addr = lshift(mby,4)*pic_width + lshift(mbx,4),
     int(size=ADDR_SZ) write_initial_addr_b1 = write_initial_addr+8
   do
     write_addr_b1 := write_initial_addr_b1 + pix_in_block + block_line * pic_width;
     pix_in_block := pix_in_block + 1;
     if(pix_in_block = 8) then
       pix_in_block := 0;
       block_line := block_line + 1;
     end
     //println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b1:write_addr_b1="+write_addr_b1);
   end
   
   get_addr_b2: action RecData:[rec_data] ==> WA:[write_addr_b2], WD:[rec_data]
   guard
     comp = 2
   var
     int(size=ADDR_SZ) write_initial_addr = lshift(mby,4)*pic_width + lshift(mbx,4),
     int(size=ADDR_SZ) write_initial_addr_b2 = write_initial_addr+lshift(pic_width,3)
   do
     write_addr_b2 := write_initial_addr_b2 + pix_in_block + block_line * pic_width;
     pix_in_block := pix_in_block + 1;
     if(pix_in_block = 8) then
       pix_in_block := 0;
       block_line := block_line + 1;
     end
     //println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b2:write_addr_b2="+write_addr_b2);
   end
   
   get_addr_b3: action RecData:[rec_data] ==> WA:[write_addr_b3], WD:[rec_data]
   guard
     comp = 3,
     not(block_line=8)
     
   var
     int(size=ADDR_SZ) write_initial_addr = lshift(mby,4)*pic_width + lshift(mbx,4),
     int(size=ADDR_SZ) write_initial_addr_b3 = write_initial_addr+lshift(pic_width,3)+8
   do
     write_addr_b3 := write_initial_addr_b3 + pix_in_block + block_line * pic_width;
     pix_in_block := pix_in_block + 1;
     if(pix_in_block = 8) then
       pix_in_block := 0;
       block_line := block_line + 1;
     end
     //println("Mgnt_Reconstruct_LUMA_Addr:get_addr_b3:write_addr_b3="+write_addr_b3);
   end
   

   block_done_0: action ==> REC_DONE:[block_rec_done]
   guard
     block_line = 8,
     comp = 0
   do
     block_line := 0;
     comp := comp + 1;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_LUMA_Addr:block_done_0");
     if (comp = 4) then
       comp := 0;
       mbx := mbx + 1;
       if(mbx = mb_width) then
         mbx := 0;
         mby := mby + 1;
       end
     end
   end
   
   block_done_1: action ==> REC_DONE:[block_rec_done]
   guard
     block_line = 8,
     comp = 1
   do
     block_line := 0;
     comp := comp + 1;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_LUMA_Addr:block_done_1");
     if (comp = 4) then
       comp := 0;
       mbx := mbx + 1;
       if(mbx = mb_width) then
         mbx := 0;
         mby := mby + 1;
       end
     end
   end
   block_done_2: action ==> REC_DONE:[block_rec_done]
   guard
     block_line = 8,
     comp = 2
   do
     block_line := 0;
     comp := comp + 1;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_LUMA_Addr:block_done_2");
     if (comp = 4) then
       comp := 0;
       mbx := mbx + 1;
       if(mbx = mb_width) then
         mbx := 0;
         mby := mby + 1;
       end
     end
   end
   block_done_3: action ==> REC_DONE:[block_rec_done]
   guard
     block_line = 8,
     comp = 3,
     not  (mbx = mb_width-1) or not (mby = mb_height-1)
   do
     block_line := 0;
     comp := comp + 1;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_LUMA_Addr:block_done_3");
     if (comp = 4) then
       comp := 0;
       mbx := mbx + 1;
       if(mbx = mb_width) then
         mbx := 0;
         mby := mby + 1;
       end
     end
   end
   
      //the last block is done.
   last_block_done: action ==>
   guard
     block_line = 8,
     mbx = mb_width-1,
     mby = mb_height-1,
     comp = 3
   do
     block_line := 0;
     comp := comp + 1;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_LUMA_Addr:last_block_done");
     if (comp = 4) then
       comp := 0;
       mbx := mbx + 1;
       if(mbx = mb_width) then
         mbx := 0;
         mby := mby + 1;
         if(mby=mb_height) then
           mby :=0;
         end
       end
     end
   end
   
   
  schedule fsm start:

    start        ( get_new_vop  ) --> get_w;
    get_w        ( get_w        ) --> get_h;
    get_h        ( get_h        ) --> start;
    start        ( skip         ) --> get_addr;
    /*
    get_addr     ( block_done       ) --> start;
    get_addr     ( last_block_done  ) --> start;
    get_addr     ( get_addr_b0      ) --> get_addr;
    
    get_addr     ( block_done       ) --> start;
    get_addr     ( last_block_done  ) --> start;
    get_addr     ( get_addr_b1      ) --> get_addr;
    
    get_addr     ( block_done       ) --> start;
    get_addr     ( last_block_done  ) --> start;
    get_addr     ( get_addr_b2      ) --> get_addr;
    
    get_addr     ( block_done       ) --> start;
    get_addr     ( last_block_done  ) --> start;
    get_addr     ( get_addr_b3      ) --> get_addr; 
    */
    
    get_addr     ( get_addr_b0      ) --> get_addr;    
    get_addr     ( get_addr_b1      ) --> get_addr;
    get_addr     ( get_addr_b2      ) --> get_addr;
    get_addr     ( get_addr_b3      ) --> get_addr; 
    get_addr     ( block_done_0     ) --> start;
    get_addr     ( block_done_1     ) --> start;
    get_addr     ( block_done_2     ) --> start;
    get_addr     ( block_done_3     ) --> start;
    get_addr     ( last_block_done  ) --> start;
    
  end

  priority
    get_new_vop >  skip;
   
    block_done_0 > get_addr_b0  >  block_done_1 > get_addr_b1 >  block_done_2 > get_addr_b2 > last_block_done > block_done_3 > get_addr_b3; 
  end


end