/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, Wen Gao

// Algo_IT8x8_1d_AVSJZ.cal
// Function: This module implements Integer Inverse Cosine Transform(IICT) of AVS Jizhun Profile.

/*******************************************************************************************************
 Input Port:
 ============
 *int(size=14) X
 A sequence of 64 coefficients before IICT. The coefficients is 14bits.
  
 Output Port:
 ============
 *int(size=9) Y
 A sequence of 64 coefficients after IICT. The coefficients is 9bits. 
*******************************************************************************************************/

package avs;

actor Algo_IT8x8_1d_AVSJZ( ) int (size=14) X ==> int Y :

  /*function Clip16( int N ) --> int
    var
      bool minus = N < -32768,
      bool plus  = N >  32767:
    if minus then -32768 else if plus then 32767 else N end end
  end
 */

  action X: [x] repeat 8 ==> Y:[ y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7] ]
    var
      List(type:int, size=32) b,
      List(type:int, size=14) t,
      List(type:int, size=32) z,
      List(type:int, size=32) y
      //uint(size=7) rnd = if ROW then 4 else 64 end
    do 
      //println("trans in x="+x[0]+" "+x[1]+" "+x[2]+" "+x[3]+" "+x[4]+" "+x[5]+" "+x[6]+" "+x[7]); 	
      t := [ x[0], x[4], x[2], x[6], x[1], x[3], x[5], x[7] ];
     
      b[0] := ((t[4] - t[7]) << 1) + t[4];
	  b[1] := ((t[5] + t[6]) << 1) + t[5];
	  b[2] := ((t[5] - t[6]) << 1) - t[6];
	  b[3] := ((t[4] + t[7]) << 1) + t[7];
    
	  b[4] := ((b[0] + b[1] + b[3]) << 1) + b[1];
	  b[5] := ((b[0] - b[1] + b[2]) << 1) + b[0];
	  b[6] := ((-b[1] - b[2] + b[3]) << 1) + b[3];
	  b[7] := ((b[0] - b[2] - b[3]) << 1) - b[2];
      
      //println("trans step 1  b="+b[0]+" "+b[1]+" "+b[2]+" "+b[3]+" "+b[4]+" "+b[5]+" "+b[6]+" "+b[7]); 	
      
	  z[3] := (t[2] << 2)-(t[3]*10);
      z[2] := (t[2]*10)+(t[3] << 2);
     
      z[1] := (t[0]-t[1])<<3;
      z[0] := ((t[0]+t[1]) << 3);
      //println("trans step 2  z="+z[0]+" "+z[1]+" "+z[2]+" "+z[3]);
     
    	 b[0] := z[0]+z[2];
     	 b[1] := z[1]+z[3];
     	 b[2] := z[1]-z[3];
     	 b[3] := z[0]-z[2];	 
     
      y :=[ b[0]+b[4], b[1]+b[5], b[2]+b[6], b[3]+b[7], b[3]-b[7], b[2]-b[6], b[1]-b[5], b[0]-b[4] ];
      //println("trans step 3  y="+y[0]+" "+y[1]+" "+y[2]+" "+y[3]+" "+y[4]+" "+y[5]+" "+y[6]+" "+y[7]); 	
      /*
      y := [  lshift( (x[0] + x[1]), 3), lshift( (x[0] - x[1]), 3), ( x[2] * 10 ) + lshift( x[3], 2 ), ( lshift( x[2], 2 ) - x[3] * 10 ), lshift( (x[4] - x[7]), 1 ) + x[4], lshift( (x[5] + x[6]), 1 ) + x[5], lshift( (x[5] - x[6]), 1 ) - x[6], lshift( (x[4] + x[7]), 1 ) + x[7] ];
      y := [ y[0] + y[2], y[1] + y[3], y[1] - y[3], y[0] - y[2], lshift( ( y[4] + y[5] + y[7] ), 1 ) + y[5], lshift( ( y[4] - y[5] + y[6] ), 1 ) + y[4], lshift( ( -y[5] - y[6] + y[7] ), 1 ) + y[7], lshift( ( y[4] - y[6] - y[7] ), 1 ) - y[6] ];
      y := [ y[0] + y[4], y[1] + y[5], y[2] + y[6], y[3] + y[7], y[3] - y[7], y[2] - y[6], y[1] - y[5], y[0] - y[4] ];	
      */
      //y := [ Clip16( y[i] + rnd ) : for int i in Integers(0,7) ];
      //y := [ rshift( y[i], if ROW then 3 else 7 end ) : for int i in Integers(0,7) ]; 
      //if not ROW then
        //println("Y="+y);
      //end        
    end

end