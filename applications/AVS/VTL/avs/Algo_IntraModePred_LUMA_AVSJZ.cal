/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_IntraModePred_LUMA_AVSJZ.cal
// Function: This module predict the intra mode of current block.  

/*******************************************************************************************************
 Input Ports:
 ============
 *int(size=BTYPE_SZ) BTYPE
 This input token specifies the coding mode of the current 8x8 block. When executing, 
 the first 3 BTYPE tokens of a VOP relate to global parameters of the VOP. The first BTYPE 
 token indicates a new VOP, and the subsequent two BTYPE tokens indicate the width and the 
 height of the VOP in macroblocks respectively. All subsequent BTYPE tokens for the VOP 
 specify the coding mode of the current 8x8 block. For details on the structure of the
 BTYPE token, refer to ParseHeaders.cal

 *int(size=MB_COORD_SZ+2) A
 The address of the 8x8 block neighbour to the left of the current 8x8 block.

 *int(size=MB_COORD_SZ+2) B
 The address of the 8x8 block neighbour to the above of the current 8x8 block.

 *int(size=SAMPLE_SZ) INTRA_INFO
 the related parameters decoded from bitstream.INTRA_INFO includes 4bits[3:0],[0]:pred_mode_flag, [3:1] intra_luma_pred_mode.
 
 Output Ports:
 =============
 *int(size=3) IntraLumaPredMode:
 0 --> Intra_8x8_Vertical
 1 --> Intra_8x8_Horizontal
 2 --> Intra_8x8_DC
 3 --> Intra_8x8_Down_Left
 4 --> Intra_8x8_Down_Right
*******************************************************************************************************/


actor avs.Algo_IntraModePred_LUMA_AVSJZ (
 /*int MAXW_IN_MB,
 int MB_COORD_SZ,
 int BTYPE_SZ,
 int NEWVOP,
 int INTRA,
 int INTER,
 int INTRA_INFO_SZ*/
) 
 int(size=BTYPE_SZ) BTYPE, 
 int(size=MB_COORD_SZ+2) A, 
 int(size=MB_COORD_SZ+2) B, 
 int(size=INTRA_INFO_SZ) INTRA_INFO 
 ==>
 int(size=3) IntraLumaPredMode :
  
 int MAXW_IN_MB = 22;
 int MB_COORD_SZ = 8;
 int BTYPE_SZ = 12;
 int NEWVOP = 2048;
 int INTRA = 1024;
 int INTER = 512;
 int INTRA_INFO_SZ = 3;
  
  int(size=MB_COORD_SZ) mbx := 0;       // Current macroblock x position
  int(size=MB_COORD_SZ) mby := 0;
  int(size=MB_COORD_SZ) mb_width := 0;   // Macroblock width of current vop
  int(size=MB_COORD_SZ) mb_height := 0;  // Macroblock height of current vop
   
  int BUF_SIZE = (MAXW_IN_MB + 2) * 4;  // Have 4 8x8 blocks per MB
  int ptr := 4;                         // Pointer to current 8x8 block on current row
                                        // using circular buffer addressing. Start at 4, since 0-3 are reserved.                                        
  bool top_edge := true;               // Top edge macroblock flag
  bool left_edge := true;                       // Left edge macroblock flag  
                                      
  uint(size=3) comp := 0;                // 8x8 block component in macroblock index
  int(size=3) pred_mode_flag;
  uint(size=2) intra_luma_pred_mode;
  uint(size=3) mode;
  // Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
  List( type:uint(size=4), size=BUF_SIZE ) intra_para_buf := [ 0 : for int k in 1 .. BUF_SIZE ];


  // Function to return absolute value
  function abs( int x ) --> int:
    if x < 0 then (-x) else x end
  end
  
  // Function to get the minimum
  function min(int a, int b)--> int:
    if a<b then a else b end
  end

  // Check for NEWVOP flag
  start: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, NEWVOP ) != 0
  do
    mbx := 0;
    mby := 0;
    top_edge := true;
    left_edge := true;
    comp := 0;
    ptr := 4; 
    
    //println("Algo_IntraModePred_LUMA_AVSJZ:start");
  end
  
  // get MB_width 
  getw: action BTYPE: [w] ==>
  do
    mb_width := w;
    //println("Algo_IntraModePred_LUMA_AVSJZ:getw");
  end
  
  // get MB_height
  geth: action BTYPE:[ h ] ==>
  do
    mb_height := h;
    //println("Algo_IntraModePred_LUMA_AVSJZ:geth");
  end
  
  // skip other BTYPE signal where necessary
  skip: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, NEWVOP ) = 0
  //do
    //println("Algo_IntraModePred_LUMA_AVSJZ:skip");
  end

  // read INTRA_INFO to predict the intra mode
  get_pred_mode_flag: action INTRA_INFO:[ intra_info ] ==>
  do
    pred_mode_flag := bitand(intra_info, 1);
    intra_luma_pred_mode := rshift(intra_info,1);
    
    //println("Algo_IntraModePred_LUMA_AVSJZ:pred_mode_flag="+pred_mode_flag);
    //println("pred_mode_flag="+pred_mode_flag);
    //println("intra_info_Y="+intra_info);
    
  end

  // predict an 8x8 INTRA block
  // the intra mode of A/B saved in the buffer includes 4bits[3:0]:
  // [0] indicates the A/B block is intra or not.
  // [3:1] indicates the intra mode of A/B.
  get_intra_mode: action A:[a], B:[b] ==> IntraLumaPredMode:[mode]
  var
    int(size=4) is_intra_A = bitand(intra_para_buf[a],1),
    int(size=4) is_intra_B = bitand(intra_para_buf[b],1),
    uint(size=3) intraPredModeA_tmp = rshift(intra_para_buf[a],1),
    uint(size=3) intraPredModeB_tmp = rshift(intra_para_buf[b],1),
    bool left_exist_and_intra = (not left_edge) and (is_intra_A=1),
    bool top_exist_and_intra = (not top_edge) and (is_intra_B=1),

    uint(size=3) intraPredModeA = if left_exist_and_intra then intraPredModeA_tmp else 7 end, 
    uint(size=3) intraPredModeB = if top_exist_and_intra then intraPredModeB_tmp else 7 end,

    uint(size=3) predIntraPredMode = if (intraPredModeA=7) or (intraPredModeB=7) then 2 else min(intraPredModeA,intraPredModeB) end
  do
    if pred_mode_flag=1 then
      mode := predIntraPredMode;
    else if (intra_luma_pred_mode < predIntraPredMode) then 
           mode := intra_luma_pred_mode;
         else
           mode := intra_luma_pred_mode + 1;
         end
    end
    /*
     
    println("Algo_IntraModePred_LUMA_AVSJZ:get_intra_mode");
    println("is_intra_A="+is_intra_A);
    println("is_intra_B="+is_intra_B);

    println("intraPredModeA_tmp="+intraPredModeA_tmp);
    println("intraPredModeB_tmp="+intraPredModeB_tmp);

    println("left_exist_and_intra="+left_exist_and_intra);
    println("top_exist_and_intra="+top_exist_and_intra);

    println("predIntraPredMode="+predIntraPredMode);
    println("IntraLumaPredMode="+mode);
    */
  end
  
  save_mode:action ==>
  do
    intra_para_buf [ bitor( ptr, comp) ] :=  bitor( lshift(mode,1), 1);
    //println("Algo_IntraModePred_LUMA_AVSJZ:save_mode");
  end

  advance: action ==> 
  do
    //println("Algo_IntraModePred_LUMA_AVSJZ:advance:comp="+comp);
    comp := comp + 1;
    if comp = 4 then   
      comp := 0;
      ptr := if ptr = 4 then BUF_SIZE-4 else ptr-4 end;
      mbx := mbx + 1;
      if mbx = mb_width then
        mbx := 0;
        mby := mby + 1;
      end      
    end

    top_edge := false;
    left_edge := false;
    
    if mbx=0 then
      if(comp = 0 or comp =2) then
        left_edge := true;
      else
        left_edge := false;
      end
    end

    if mby=0 then
      if(comp=0 or comp=1) then
        top_edge := true;
      else
        top_edge := false;
      end
    end

  end


  schedule fsm read :
    read               ( start              ) --> getw;
    getw               ( getw               ) --> geth;
    geth               ( geth               ) --> read;
    read               ( skip               ) --> get_pred_mode_flag;
                       
    get_pred_mode_flag ( get_pred_mode_flag ) --> predict;
    predict            ( get_intra_mode     ) --> save_mode;
    save_mode          ( save_mode          ) --> advance;
    advance            ( advance            ) --> read;
  end

  priority
    start > skip;
  end
end