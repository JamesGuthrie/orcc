/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, Wen Gao

// Algo_IT8x8_1d_AVSJZ.cal
// Function: This module implements Integer Inverse Cosine Transform(IICT) of AVS Jizhun Profile.

/*******************************************************************************************************
 Input Port:
 ============
 *int(size=14) X
 A sequence of 64 coefficients before IICT. The coefficients is 14bits.
  
 Output Port:
 ============
 *int(size=9) Y
 A sequence of 64 coefficients after IICT. The coefficients is 9bits. 
*******************************************************************************************************/

package avs;

actor Algo_IT_clip( bool ROW ) int X ==> int Y :

  function Clip16( int N ) --> int
    var
      bool minus = N < -32768,
      bool plus  = N >  32767:
    if minus then -32768 else if plus then 32767 else N end end
  end
 

  action X: [x] repeat 8 ==> Y:[ y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7] ]
    var
      List(type:int, size=8) y,
      uint(size=7) rnd = if ROW then 4 else 64 end
    do  	
      y := [ Clip16( x[i] + rnd ) : for int i in 0 .. 7 ];
      y := [ y[i] >> if ROW then 3 else 7 end : for int i in 0 .. 7 ]; 
      println("y="+y[0]+" "+y[1]+" "+y[2]+" "+y[3]+" "+y[4]+" "+y[5]+" "+y[6]+" "+y[7]);
    end

end