/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Mgnt_Reconstruct_CHROMA_Addr.cal
// Function: This module is to calculate write address in frame buffer for reconstruction for AVS Jizhun Profile.
// Note:

// BTYPE
actor avs.Mgnt_Reconstruct_CHROMA_Addr (
    /*
    int BTYPE_SZ,
    int NEWVOP,
    int MB_COORD_SZ,
    int PIX_SZ,
    int ADDR_SZ
    */
 )
   int(size=PIX_SZ) RecData, 
   int(size=BTYPE_SZ) BTYPE
   ==> 
   int(size=ADDR_SZ) WA, 
   int(size=PIX_SZ) WD,
   int(size=1) REC_DONE :
   
   int BTYPE_SZ = 12;
   int NEWVOP = 2048;
   int MB_COORD_SZ = 8;
   int PIX_SZ = 9;
   int ADDR_SZ = 24;
   
   int(size=MB_COORD_SZ) mb_width;
   int(size=MB_COORD_SZ) mb_height;
   int(size=MB_COORD_SZ) mbx;
   int(size=MB_COORD_SZ) mby;

   int(size=MB_COORD_SZ+4) pic_width;
   int(size=MB_COORD_SZ+4) pic_height;

   int(size=13) block_line;
   int(size=13) pix_in_block;

   uint(size=1) block_rec_done;

   int(size=ADDR_SZ) write_addr;
   
   get_new_vop: action BTYPE:[cmd] ==>
   guard
     bitand( NEWVOP, cmd ) != 0
   do
     write_addr := 0;

     block_line := 0;
     pix_in_block := 0;

     mbx := 0;
     mby := 0;
     //println("Mgnt_Reconstruct_CHROMA_Addr:get_new_vop!");
   end
   
   get_w: action BTYPE:[w] ==>
   do
     mb_width := w;
     pic_width := lshift(w,3);
     //println("Mgnt_Reconstruct_CHROMA_Addr:get_w!");
   end
   
   get_h: action BTYPE:[h] ==>
   do
     mb_height := h;
     pic_height := lshift(h,3);
     //println("Mgnt_Reconstruct_CHROMA_Addr:get_h!");
   end
   
   skip: action BTYPE:[cmd] ==>
   guard
     bitand(NEWVOP,cmd) = 0
   //do
     //println("Mgnt_Reconstruct_CHROMA_Addr:skip!");
   end
   
   get_addr: action RecData:[rec_data] ==> WA:[write_addr], WD:[rec_data]
   var 
     int(size=ADDR_SZ) write_initial_addr = lshift(mby,3)*pic_width + lshift(mbx,3)
   do
     write_addr := write_initial_addr + pix_in_block + block_line * pic_width;
     pix_in_block := pix_in_block + 1;
     if(pix_in_block = 8) then
       pix_in_block := 0;
       block_line := block_line + 1;
     end
     //println("Mgnt_Reconstruct_CHROMA_Addr:get_addr:write_addr="+write_addr);
     //println("Mgnt_Reconstruct_CHROMA_Addr:get_addr:rec_data="+rec_data);
   end
   
   last_block_done: action ==>
   guard
     block_line = 8,
     mbx = mb_width - 1,
     mby = mb_height -1
   do
     block_line := 0;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_CHROMA_Addr:last_block_done");
     mbx := mbx + 1;
     if(mbx = mb_width) then
       mbx := 0;
       mby := mby + 1;
       if(mby = mb_height) then
         mby := 0;
       end      
     end
   end
   
   block_done: action ==> REC_DONE:[block_rec_done]
   guard
     block_line = 8,
     not (mbx = mb_width - 1) or not (mby = mb_height -1)
   do
     block_line := 0;
     block_rec_done := 1;
     //println("Mgnt_Reconstruct_CHROMA_Addr:block_rec_done=1");
     mbx := mbx + 1;
     if(mbx = mb_width) then
       mbx := 0;
       mby := mby + 1;
       if(mby = mb_height) then
         mby := 0;
       end      
     end
   end
  schedule fsm start:

    start        ( get_new_vop       ) --> get_w;
    get_w        ( get_w             ) --> get_h;
    get_h        ( get_h             ) --> start;
    start        ( skip              ) --> get_addr;
    
    get_addr     ( block_done        ) --> start;
    get_addr     ( last_block_done   ) --> start;
    get_addr     ( get_addr          ) --> get_addr;
  end

  priority
    get_new_vop >  skip;
    last_block_done > block_done  >  get_addr;
    //last_block_done > block_done;
  end

end