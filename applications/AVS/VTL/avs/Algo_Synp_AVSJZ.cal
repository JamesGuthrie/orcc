/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_Synp_AVSJZ.cal
// Function: This module is Syntax Parsing for AVS Jizhun Profile.
// Note:
// --22.02.2008 10:22:35 : 
// modify BTYPE output
// add output INTRA_INFO(3bit)

actor Algo_Synp_AVSJZ(
  /*
  int INTRA,
  int INTER,
  int NEWVOP,
  int BTYPE_SZ,
  int INTRA_INFO_SZ,
  int QP_SZ,
  int QUANT_MASK,
  int COEFF_CODED,
  int CBP_SZ,
  int MV_SZ,
  int SAMPLE_COUNT_SZ,
  int SAMPLE_SZ,
  int MB_COORD_SZ
  */
) 
  bool bits 
  ==> 
  int(size=BTYPE_SZ) BTYPE, 
  int(size=INTRA_INFO_SZ) INTRA_INFO,
  //int(size=MV_SZ) MV, 
  int(size=SAMPLE_COUNT_SZ) RUN, 
  int(size=SAMPLE_SZ) VALUE, 
  int(size=16) WIDTH,
  int(size=16) HEIGHT,
  bool LAST :
  
  int INTRA = 1024;
  int INTER = 512;
  int NEWVOP = 2048;
  int BTYPE_SZ = 12;
  int INTRA_INFO_SZ = 3;
  int QP_SZ = 6;
  int QUANT_MASK = 63;
  int COEFF_CODED = 2;
  int CBP_SZ = 6;
  //int MV_SZ = 14;
  int SAMPLE_COUNT_SZ = 13;
  int SAMPLE_SZ = 13;
  int MB_COORD_SZ = 8;  
  
  
  int EXTRA_START_LENGTH = 8;
  int QUARTER_START_CODE_LENGTH = 8;
  int START_CODE_LENGTH = 32;
  int SEQUENCE_HEADER_CODE = 176;
  int SEQUENCE_END_CODE = 177;
  int PROFILE_ID_LENGTH =  8;
  int LEVEL_ID_LENGTH = 8;
  /*
  int PROGRESSIVE_SEQUENCE_LENGTH = 1;
  int PROGRESSIVE_SEQUENCE_LENGTH_HOR_SIZE = 15;
  */
  uint PROGRESSIVE_SEQUENCE_LENGTH = 1;
  int HORIZONTAL_SIZE_LENGTH = 14;
  int VERTICAL_SIZE_LENGTH = 14;
  
  
  int CHROMA_FORMAT_LENGTH = 2;
  int SAMPLE_PRECISION_LENGTH = 3;
  int ASPECT_RATIO_INFORMATION_LENGTH = 4;
  int FRAME_RATE_CODE_LENGTH = 4;
  int BIT_RATE_LOWER_LENGTH = 18;
  int BIT_RATE_UPPER_LENGTH = 12;
  int LOW_DELAY_LENGTH = 1;
  int BBV_BUFFER_SIZE_LENGTH = 18;
  int BBV_DEALY_LENGTH = 18; // TODO
  int MARKER_LENGTH = 1;
  
  //for extension data
  int EXTENSION_START_CODE = 181;
  int EXTENSION_ID_LENGTH = 4;
  int SEQUENCE_DISPLAY_EXTENSION = 2;
  int COPYRIGHT_EXTENSION = 4;
  int QUARTER_COPYRIGHT_EXTENSION_LENGTH = 21;
  int CAMERA_PARAMETERS_EXTENSION = 11;
  int CAMERA_PARAMETERS_EXTENSION_LENGTH = 31;
  int RESERVED_EXTENSION_DATA_BYPE_LENGTH = 32;
  
  //user_data
  int USER_DATA_START_CODE = 178;
  int USER_DATA_START_CODE_LENGTH_PRE = 24;
  int USER_DATA_START_CODE_LENGTH_TWO_BYTE = 16;
  
  int I_PICTURE_START_CODE = 179;
  int PB_PICTURE_START_CODE = 182;
  int PB_PICTURE_START_CODE = 182;
  int BBV_DELAY_LENGTH = 16;
  //int TIME_CODE_FLAG_LENGTH = 1; not used
  int TIME_CODE_LENGTH = 24;
  int PICTURE_DISTANCE = 8;
  int PROGRESSIVE_FRAME_LENGTH = 1;
  int PICTURE_STRUCTURE_LENGTH = 1;
  int TOP_FIELD_FIRST_LENGTH = 1;
  int REPEAT_FIRST_FIELD_LENGTH = 1;
  int FIXED_PICTURE_QP_LENGTH = 1;
  int PICTURE_QP_LENGTH = 6;
  int SKIP_MODE_FLAG_LENGTH = 1;
  int LOOP_FILTER_DISABLE_LENGTH = 1;
  //int LOOP_FILTER_PARAMETER_FLAG_LENGTH = 1; not used
  //int PICTURE_CODING_TYPE_LENGTH = 2; 
  //int NO_FORWARD_REFERENCE_FLAG_LENGTH = 1; not used

  int SLICE_VERTICAL_POSITION_LENGTH = 8;
  int FIXED_SLICE_QP_LENGTH = 1;
  int SLICE_QP_LENGTH = 6;
  
  function mask_bits( int(size=41)v, int(size=41)n ) --> int :
    bitand( v, lshift(1,n)-1 )
  end
  
  int MB_counter:=-1;
  int(size=8) bits_to_read_count := -1;
  int(size=32) read_result_in_progress;
  
  procedure set_bits_to_read( int count )
  begin
    bits_to_read_count := count - 1;
    read_result_in_progress := 0;
  end
  
  function done_reading_bits() --> bool : (bits_to_read_count < 0) end
  function read_result() --> int : read_result_in_progress end
  
  action bits:[ b ] ==>
  guard 
    not done_reading_bits()
  do
    read_result_in_progress := bitor( lshift( read_result_in_progress, 1), if b then 1 else 0 end );
    bits_to_read_count := bits_to_read_count - 1;
    bit_count := bit_count + 1;
    //println("bits="+b);
    //println("bits_to_read_count="+bits_to_read_count);
  end

  int(size=4) bit_count := 0;

/*************************************************************
 *************************************************************
 ********              SEQUENCE HEADER                ********
 *************************************************************
 *************************************************************/

  int (size=PROFILE_ID_LENGTH) profile_id;
  int (size=LEVEL_ID_LENGTH) level_id;
  uint (size=PROGRESSIVE_SEQUENCE_LENGTH) progressive_sequence;
  int (size=16) picture_width;
  int (size=16) picture_height;
  int (size=CHROMA_FORMAT_LENGTH) chroma_format;
  int (size=SAMPLE_PRECISION_LENGTH) sample_precision;
  int (size=ASPECT_RATIO_INFORMATION_LENGTH) aspect_ratio_information;
  int (size=FRAME_RATE_CODE_LENGTH) frame_rate_code;
  int (size=BIT_RATE_LOWER_LENGTH) bit_rate_lower;
  int (size=BIT_RATE_UPPER_LENGTH) bit_rate_upper;
  int (size=LOW_DELAY_LENGTH) low_delay;
  //int (size=MARKER_LENGTH) marker_one_bit;
  int (size=BBV_BUFFER_SIZE_LENGTH) bbv_buffer_size;
  
  int (size=BBV_DEALY_LENGTH) bbv_delay;
  int (size=TIME_CODE_LENGTH) time_code;
  int (size=PICTURE_DISTANCE) picture_distance;
  int BBV_check_times;
  uint (size=PROGRESSIVE_FRAME_LENGTH) progressive_frame;
  uint (size=PICTURE_STRUCTURE_LENGTH) picture_structure;
  uint (size=TOP_FIELD_FIRST_LENGTH) top_field_first;
  uint (size=REPEAT_FIRST_FIELD_LENGTH) repeat_first_field;
  uint (size=FIXED_PICTURE_QP_LENGTH) fixed_picture_qp;
  int (size=PICTURE_QP_LENGTH) picture_qp;
  //int (size=SKIP_MODE_FLAG_LENGTH) skip_mode_flag; not used
  //int (size=LOOP_FILTER_DISABLE_LENGTH) loop_filter_disable; not used
  //int (size=LOOP_FILTER_PARAMETER_FLAG_LENGTH) loop_filter_parameter_flag; not used
  int alpha_offset;
  int beta_offset;
  
  int(size=MB_COORD_SZ) MB_width;
  int(size=MB_COORD_SZ) MB_height;
  int(size=12) MB_NUM;
  int(size=MB_COORD_SZ) mbx;
  int(size=MB_COORD_SZ) mby;  
  
  //level_flag = 1 :level of escape < 0;
  //level_flag = 0 :level of escape > 0;
  int level_flag;

  look_for_Sequence_Header: action ==>
  do
    set_bits_to_read( START_CODE_LENGTH + EXTRA_START_LENGTH );
  end
  
  int(size=START_CODE_LENGTH) video_sequence_start_code;
  read_Sequence_Header_Profile_id: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = SEQUENCE_HEADER_CODE
    //read_result() = SEQUENCE_HEADER_CODE
  do
    video_sequence_start_code := mask_bits( read_result(), QUARTER_START_CODE_LENGTH );
    set_bits_to_read(PROFILE_ID_LENGTH);
    //println("********** AVS Decoder Configuration for RVC **********");
    //println("Video Sequence Start!");
    //println("video_sequence_start_code = "+video_sequence_start_code);
  end

  read_Sequence_Header_Level_id: action ==>
  guard
    done_reading_bits()
  do
    profile_id := mask_bits( read_result(), PROFILE_ID_LENGTH );
    set_bits_to_read( LEVEL_ID_LENGTH);
    //println("profile_id = "+profile_id);
  end
  
  read_Sequence_Header_Progress_sequence: action ==>
  guard
    done_reading_bits()
  do
    level_id := mask_bits( read_result(), LEVEL_ID_LENGTH );
    set_bits_to_read(PROGRESSIVE_SEQUENCE_LENGTH);
    //println("level_id = "+level_id);
  end
  
  read_Sequence_Header_Width_Height: action ==> 
  guard
    done_reading_bits()
  do
    progressive_sequence := mask_bits( read_result(), PROGRESSIVE_SEQUENCE_LENGTH );
    set_bits_to_read( HORIZONTAL_SIZE_LENGTH + VERTICAL_SIZE_LENGTH );
    //println("progressive = "+progressive_sequence);
  end
  
  read_Sequence_Header_Chroma_format: action ==> WIDTH:[MB_width], HEIGHT:[MB_height]
  guard
    done_reading_bits()
  do
    picture_height := mask_bits( read_result(), VERTICAL_SIZE_LENGTH );
    MB_height := rshift(picture_height, 4);
    picture_width := rshift( read_result(), HORIZONTAL_SIZE_LENGTH );
    MB_width := rshift(picture_width, 4);    
    if MB_width = 11 then
      MB_NUM := 99;
    else if MB_width = 22 then
      MB_NUM := 396;
    else
    	MB_NUM := 1620;
    end
    end
    set_bits_to_read( CHROMA_FORMAT_LENGTH );
    //println("MB_width = "+MB_width);
    //println("MB_height = "+MB_height);
  end
  
  read_Sequence_Header_Sample_precision: action ==>
  guard
    done_reading_bits()
  do
    chroma_format := mask_bits( read_result(), CHROMA_FORMAT_LENGTH );
    set_bits_to_read( SAMPLE_PRECISION_LENGTH );
    //println("chroma_format = "+chroma_format);
  end
  
  read_Sequence_Header_Aspect_ratio_information: action ==>
  guard
    done_reading_bits()
  do
    sample_precision := mask_bits( read_result(), SAMPLE_PRECISION_LENGTH );
    set_bits_to_read( ASPECT_RATIO_INFORMATION_LENGTH );
    //println("sample_precision = "+sample_precision);
  end
  
  read_Sequence_Header_Frame_rate_code: action ==>
  guard
    done_reading_bits()
  do
    aspect_ratio_information := mask_bits( read_result(), ASPECT_RATIO_INFORMATION_LENGTH );
    set_bits_to_read( FRAME_RATE_CODE_LENGTH );
    //println("aspect_ratio_information = "+aspect_ratio_information);
  end
  
  read_Sequence_Header_Bit_rate_lower_upper: action ==>
  guard
    done_reading_bits()
  do
    frame_rate_code := mask_bits( read_result(), FRAME_RATE_CODE_LENGTH );
    set_bits_to_read( BIT_RATE_LOWER_LENGTH + MARKER_LENGTH + BIT_RATE_UPPER_LENGTH );
    //println("frame_rate_code = "+frame_rate_code);
  end
  
  read_Sequence_Header_Low_delay: action ==>
  guard
    done_reading_bits()
  do
    bit_rate_upper := mask_bits( read_result(), BIT_RATE_UPPER_LENGTH );
    bit_rate_lower := rshift( read_result(),  MARKER_LENGTH + BIT_RATE_UPPER_LENGTH );
    set_bits_to_read( LOW_DELAY_LENGTH + MARKER_LENGTH );
    //println("bit_rate_upper = "+bit_rate_upper);
    //println("bit_rate_lower = "+bit_rate_lower);
  end
  
  read_Sequence_Header_BBV_Buffer_size: action ==>
  guard
    done_reading_bits()
  do
    low_delay := rshift( read_result(),  LOW_DELAY_LENGTH );
    set_bits_to_read( BBV_BUFFER_SIZE_LENGTH + 3 );
    //println("low_delay "+low_delay);
  end

/*************************************************************
 *************************************************************
 ********                start Picture                ********
 *************************************************************
 *************************************************************/

  int (size=3) picture_type;
  bool IS_I_pic;

  byte_align: action ==>
  guard
    done_reading_bits()
  var
    int stuff_bits := (8 - bitand( bit_count, 7 ))
  do
    //set_bits_to_read( 8 - bitand( bit_count, 7 ) );
    set_bits_to_read( stuff_bits );
    //println("byte_align:bit_count = " + bit_count);
    //println("stuff_bits = " + stuff_bits);
  end
  
  //for extension
  look_for_which_Header: action ==>
  guard
    done_reading_bits()
  do
    //bbv_buffer_size := rshift( read_result(), 3 );
    set_bits_to_read( START_CODE_LENGTH );
    //println("bbv_buffer_size = "+bbv_buffer_size);
    //println("look_for_which_Header");
  end
  
  look_for_Sequence_End: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = SEQUENCE_END_CODE
  //do
    //println("Video Sequence End!");    
  end
  
  look_for_extension_0_header :action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = EXTENSION_START_CODE
  do
    set_bits_to_read( EXTENSION_ID_LENGTH );
    //println("extension_header");
  end   
  
  //sequence_display_extension
  read_sequence_display_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = SEQUENCE_DISPLAY_EXTENSION
  do
    //vieo_format(3)+sample_range(1)
    set_bits_to_read(4);
    //println("sequence_display_extension:read next 4 bits");
  end
  
  read_sequence_display_extension_0: action bits:[b] ==>
  guard
    done_reading_bits(),
    b
  do
    //colour_primaries(8)+transfer_characteristics(8)+matrix_coefficients(8)+31
    set_bits_to_read(55);
    bit_count := bit_count + 1;
    //println("sequence_display_extension_0:read next 55 bits");
  end
  
  read_sequence_display_extension_1: action bits:[b] ==>
  guard
    done_reading_bits(),
    not b
  do
    //colour_primaries(8)+transfer_characteristics(8)+matrix_coefficients(8)
    set_bits_to_read(31);
    bit_count := bit_count + 1;
    //println("read_sequence_display_extension_1:read next 31 bits");
  end
  
  //copyright_extension
  read_copyright_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = COPYRIGHT_EXTENSION
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_1:read next 21 bits");
  end
  
  read_copyright_extension_1: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_1:read next 21 bits");
  end
  
  read_copyright_extension_2: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_2:read next 21 bits");
  end
  
  read_copyright_extension_3: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_3:read next 21 bits");
  end
  
  //camera_parameters_extension
  read_camera_parameters_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = CAMERA_PARAMETERS_EXTENSION
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("camera_parameters_extension:read next 31 bits");    
  end
  read_camera_parameters_extension_1: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_1:read next 31 bits");    
  end
  read_camera_parameters_extension_2: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_2:read next 31 bits");    
  end
  read_camera_parameters_extension_3: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_3:read next 31 bits");    
  end
  read_camera_parameters_extension_4: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_4:read next 31 bits");    
  end
  read_camera_parameters_extension_5: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_5:read next 31 bits");    
  end
  read_camera_parameters_extension_6: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_6:read next 31 bits");    
  end
  read_camera_parameters_extension_7: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_7:read next 31 bits");    
  end
  read_camera_parameters_extension_8: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_8:read next 31 bits");    
  end
  read_camera_parameters_extension_9: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_9:read next 31 bits");    
  end
  read_camera_parameters_extension_A: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_A:read next 31 bits");    
  end
  read_camera_parameters_extension_B: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_B:read next 31 bits");    
  end
  read_camera_parameters_extension_C: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(1);
    //println("read_camera_parameters_extension_C:read next 5 bits");    
  end

  //reserved_extension
  read_reserved_extension: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(RESERVED_EXTENSION_DATA_BYPE_LENGTH);
    //println("reserved_extension:read next 32 bits");
  end
  
  //user_extension
  look_for_user_data_header: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = USER_DATA_START_CODE
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_PRE );
    //println("user_extension");
  end 
  
  read_user_data_0: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), USER_DATA_START_CODE_LENGTH_PRE ) != lshift(1,23)
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_PRE);
    //println("read_user_data_0");
  end 

  read_user_data_1: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), USER_DATA_START_CODE_LENGTH_PRE ) = lshift(1,23)
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_TWO_BYTE );
    //println("read_user_data_1");
  end 
  
  bool I_picture_header;
  bool PB_picture_header;
  
  look_for_I_Picture_Header: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = I_PICTURE_START_CODE
    //read_result() = I_PICTURE_START_CODE
  do
    mbx := 0;
    mby := 0;
    picture_type := 0;
    IS_I_pic := true;
    I_picture_header := mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = I_PICTURE_START_CODE;
    set_bits_to_read( BBV_DELAY_LENGTH );    
    //println("Start I Frame!");
  end
  
  look_for_PB_Picture_Header: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = PB_PICTURE_START_CODE
    //read_result() = I_PICTURE_START_CODE
  do
    mbx := 0;
    mby := 0;
    //picture_type := 0;
    IS_I_pic := false;
    PB_picture_header := mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = PB_PICTURE_START_CODE;
    set_bits_to_read( BBV_DELAY_LENGTH );    
    println("Start PB Frame!");
  end
  //----------------------- I picture -----------------------------------//
  read_Picture_Header_Time_code: action bits:[b] ==>
  guard
    done_reading_bits()
  do
    bbv_delay :=  mask_bits( read_result(), BBV_DELAY_LENGTH );
    //println("bbv_delay = " + bbv_delay);
    //if b then  set_bits_to_read( TIME_CODE_LENGTH ); end
    set_bits_to_read (if b then TIME_CODE_LENGTH else 0 end);
    //time_code_flag
    //println("time code flag = " + b);
    bit_count := bit_count + 1;
  end

  read_Picture_Header_Picture_distance: action ==>
  guard
    done_reading_bits()
  do
    time_code :=  mask_bits( read_result(), TIME_CODE_LENGTH );
    set_bits_to_read( MARKER_LENGTH + PICTURE_DISTANCE );
    //println("read_Picture_Header_Picture_distance: time_code = "+time_code);
    //println("read_Picture_Header_Picture_distance: low_delay = "+low_delay);
end

  read_Picture_Header_BBV_check_times: action ==>
  guard
    done_reading_bits(),
    low_delay = 1
  do
    grad := 0;
    start_vld();
    //println("read_Picture_Header_BBV_check_times");
  end

  read_Picture_Header_BBV_check_times_one: action ==>
  guard
    vld_end()
  do
    //k=0
    BBV_check_times := vld_ue( lshift(vld_length(), 1), vld_result());
    //println("BBV_check_times = " + BBV_check_times);
  end

  read_Picture_Header_Progressive_frame: action ==>
  guard
    done_reading_bits()
  do
    picture_distance := mask_bits( read_result(), PICTURE_DISTANCE );
    //println("picture_distance = " + picture_distance);
    set_bits_to_read( PROGRESSIVE_FRAME_LENGTH );
  end
  
  read_Picture_Header_Picture_structure: action ==>
  guard
    done_reading_bits()
  do
    progressive_frame := mask_bits( read_result(), PROGRESSIVE_FRAME_LENGTH );
    //println("progressive_frame = " + progressive_frame);
    if progressive_frame = 1 then 
      picture_structure := 1;
    else  
      set_bits_to_read( PICTURE_STRUCTURE_LENGTH );
    end
  end

  read_Picture_Header_Top_field_first: action ==>
  guard
    done_reading_bits()
  do
    if progressive_frame = 0 then picture_structure :=  mask_bits( read_result(), PICTURE_STRUCTURE_LENGTH ); end
    set_bits_to_read( TOP_FIELD_FIRST_LENGTH );
    //println("picture_structure = " + picture_structure);
  end
  
  read_Picture_Header_Repeat_first_field: action ==>
  guard
    done_reading_bits()
  do
    top_field_first :=  mask_bits( read_result(), TOP_FIELD_FIRST_LENGTH );
    //println("top_field_first = " + top_field_first);
    set_bits_to_read( REPEAT_FIRST_FIELD_LENGTH );
  end
  
  read_Picture_Header_Fixed_picture_qp: action ==>
  guard
    done_reading_bits()
  do
    repeat_first_field :=  mask_bits( read_result(), REPEAT_FIRST_FIELD_LENGTH );
    //println("repeat_first_field=" + repeat_first_field);
    set_bits_to_read( FIXED_PICTURE_QP_LENGTH );
  end
  
  read_Picture_Header_Picture_qp: action ==>
  guard
    done_reading_bits()
  do
    fixed_picture_qp :=  mask_bits( read_result(), FIXED_PICTURE_QP_LENGTH );
    //println("fixed_picture_qp = " + fixed_picture_qp);
    set_bits_to_read( PICTURE_QP_LENGTH );
  end
  
  read_Picture_Header_Skip_mode_flag: action ==>
  guard
    IS_I_pic,
    done_reading_bits(),
    progressive_frame = 0,
    picture_structure = 0
  do
    set_bits_to_read( SKIP_MODE_FLAG_LENGTH );
    //println("read_Picture_Header_Skip_mode_flag");
  end
  
  read_Picture_Header_Loop_filter_disable: action ==>
  guard
    IS_I_pic,
    done_reading_bits()
  do
    if(IS_I_pic) then
        picture_qp :=  mask_bits( read_result(), PICTURE_QP_LENGTH );  
    //println("picture_qp = " + picture_qp);
    set_bits_to_read( 4 + LOOP_FILTER_DISABLE_LENGTH );
  end

  read_Picture_Header_Loop_filter_parameter: action bits:[b] ==>
  guard
    done_reading_bits(),
    not b
  do 
    bit_count := bit_count + 1;
    set_bits_to_read( 4 );  
  end
  //---------------------- PB picture -------------------------------------//
  read_Picture_Coding_Type: action ==>
  guard
      done_reading_bits()
  do
      set_bits_to_read(2);//read the picture_type;
  end
  
  read_PB_Picture_Distance: action ==>
  guard
     done_reading_bits(),
     not IS_I_pic
  do
     picture_type := mask_bits(read_result(),2);
     println("the picture_type is "+picture_type);
     set_bits_to_read(PICTURE_DISTANCE);
  end
  
  //bbv_check_times
  //progressive_frame
  //top_field_first
  //repeat_first_field
  //fixed_picture_qp
  //picture_qp
  uint(size=1) picture_reference_flag;
  
  get_Picture_QP: action ==>
  guard
      done_reading_bits(),
      not IS_I_pic
  do
      picture_qp := mask_bits(read_result(),PICTURE_QP_LENGTH);
  end    
  
  
  read_Picture_Reference_Flag: action ==>
  guard
      (picture_type=1) or ( picture_structure=0) 
  do
      set_bits_to_read(1);//read the picture_reference_flag;
  end
  
  uint(size=1) no_forward_reference_flag;
  
  read_No_Forward_Reference_Flag: action ==>
  guard
      done_reading_bits()
  do
      read_Picture_Reference_Flag := mask_bits(read_result(),1);
      set_bits_to_read(1);
  end
  
  read_PB_Reserved_Bits: action ==>
  guard
      done_reading_bits()
  do
      set_bits_to_read(3);
  end
  
  read_PB_Skip_Mode_Flag: action ==>
  guard
      done_reading_bits()
  do
      set_bits_to_read(1);
  end
  
  read_PB_Loop_filter_Disable: action ==>
  guard
      done_reading_bits()
  do
      skip_mode_flag := mask_bits(read_result(),1);
      set_bits_to_read(1);
  end
  
  
/*************************************************************
 *************************************************************
 ********                start Slice                  ********
 *************************************************************
 *************************************************************/

  look_for_Slice_Header: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read( START_CODE_LENGTH );
    //println("look_for_Slice_Header");
  end
  
  int  slice_vertical_position;
  uint (size=FIXED_SLICE_QP_LENGTH) fixed_slice_qp := 0;
  int (size=SLICE_QP_LENGTH) slice_qp := 0;
  
  Slice_Header_Slice_vertical_position: action ==>
  guard
    done_reading_bits()
  do
    slice_vertical_position := mask_bits( read_result(), SLICE_VERTICAL_POSITION_LENGTH );
    //println("slice_vertical_position = "+slice_vertical_position);
  end 
  
  Slice_Header_QP: action ==>
  guard
    done_reading_bits(),
    fixed_picture_qp = 0
  do
    set_bits_to_read( FIXED_SLICE_QP_LENGTH + SLICE_QP_LENGTH );
    //println("Slice_Header_QP");
  end 
  
  Slice_Header_Fixed_slice_qp_and_slice_qp: action ==>
  guard
    done_reading_bits(),
    fixed_picture_qp = 0
  do
    fixed_slice_qp := rshift( read_result(), SLICE_QP_LENGTH );
    slice_qp := mask_bits( read_result(), FIXED_SLICE_QP_LENGTH );
    set_bits_to_read(if not (picture_type=0) then 1 else 0 end);
    //println("fixed_slice_qp="+fixed_slice_qp);
    //println("slice_qp="+slice_qp);
  end 
  
  Slice_Header_Slice_Weighting_Flag: action ==>
  guard
       
  do
  end
  
  //before start decoding one MB, first send the BTYPE token.  
  
  send_new_vop_BTYPE: action ==> BTYPE:[ cmd ]
  guard
    done_reading_bits()
  var
    int(size=BTYPE_SZ) cmd := bitor( NEWVOP, if IS_I_pic then INTRA else INTER end ),
    int(size=QP_SZ) qp
  do
    if fixed_picture_qp = 1 then
      qp := picture_qp;
    else
      qp := slice_qp;
    end

    //println("QP = "+qp);
    //println("BTYPE_new_vop: BTYPE = "+cmd);
    //println("send_new_vop_BTYPE");

    cmd := bitor(cmd, bitand(qp, QUANT_MASK));
  end

  send_mb_width_BTYPE: action ==> BTYPE:[MB_width]
  //do
    //println("BTYPE_mb_width = "+MB_width);
  end
  
  send_mb_height_BTYPE: action ==> BTYPE:[MB_height]
  //do
    //println("BTYPE_mb_height = "+MB_height);
  end
  
/*************************************************************
 *************************************************************
 ********                  start MB                   ********
 *************************************************************
 *************************************************************/
 
  bool I_mode_uncoded;
  int (size=3) Intra_mode_code;
  uint (size=3) b8;
  bool b_last;
  int(size=4) comp;
  
  function abs(int val) --> int( size=8 ) : if val<0 then -val else val end end

  procedure next_mbxy()
  begin
    mbx := mbx + 1;
    if mbx = MB_width then
      mbx := 0;
      mby := mby + 1;
    end
  end

  mb_done: action ==>
  guard
    mby =  MB_height
  //do
   //println("I Frame Over!");
  end

  mb_dispatch_done: action ==>
  guard
    comp = 6
  do
    next_mbxy();
    //println("mb_dispatch_done: next_mbx = "+mbx+", "+"next_mby = "+mby);
  end

  bool coeff_coded;
   
  block_done: action ==> BTYPE:[cmd]
  guard
    vld_end(),
    (b_last) or (not coeff_coded),
    comp < 6 
  var
    int(size=BTYPE_SZ) cmd := INTRA,
    bool pre_coeff_coded := bitand( cbp,lshift(1,comp) ) != 0
  do
    cmd := bitor( cmd, if pre_coeff_coded then COEFF_CODED else 0 end );
    //println("BTYPE for comp"+comp+" ="+cmd);
    	
    comp := comp + 1;
    b_last := false;
    coeff_coded := bitand( cbp,lshift(1,comp) ) != 0;
    //println("block_done: coeff_coded="+coeff_coded+", "+"comp="+comp);
    
  end
  
  uint (size=3) MB_mode;
  
  StartMB: action ==>
  guard
    done_reading_bits()
  do
    if picture_type = 0 then 
      I_mode_uncoded := true;
      //println("start MB");
      b8 := 0;
      MB_mode := 5;
      comp :=0;
      b_last := false;
    end  
    MB_counter := MB_counter + 1;  
    if MB_counter=MB_NUM then
      MB_counter := 0;
    end      
    //println("start MB "+MB_counter);
    //println("MB_counter = " + MB_counter);
  end

  bool pred_mode_flag;
  uint(size=2) intra_luma_pred_mode;
  uint(size=2) intra_chroma_pred_mode;
  
  //pred_mode_flag = 1
  MB_read_I_mode_Luma_one: action bits: [b] ==> INTRA_INFO: [intra_info]
  guard
    done_reading_bits(),
    picture_type = 0,
    I_mode_uncoded,
    b8 < 4,
    b
  var
    uint(size=INTRA_INFO_SZ) intra_info := 7
  do
    //println("MB_read_I_mode_Luma_one: "+b8+" INTRA_INFO="+intra_info);
    pred_mode_flag := true; 
    intra_luma_pred_mode := -1;
    b8 := b8 + 1;
    bit_count := bit_count + 1;     
  end
  
  //when pred_mode_flag = 0, dispatch intra_luma_pred_mode.
  MB_read_I_mode_Luma_two: action bits: [b] ==>
  guard
    done_reading_bits(),
    picture_type = 0,
    I_mode_uncoded,
    b8 < 4,
    not b
  do 
    pred_mode_flag := false; 
    set_bits_to_read(2); 
    bit_count := bit_count + 1; 
    //println("MB_read_I_mode_Luma_two:pred_mode_flag="+pred_mode_flag);
  end
  
  //Intra_mode_code = intra_luma_pred_mode
  MB_read_I_mode_Luma_Three: action ==> INTRA_INFO: [intra_info]
  /*guard
    done_reading_bits(),
    picture_type = 0,
    b8 < 4*/
  guard
    done_reading_bits()
  var
    uint(size=INTRA_INFO_SZ) intra_info := 0
  do
    intra_luma_pred_mode := mask_bits( read_result(), 2);
    intra_info := bitor( lshift(intra_luma_pred_mode,1) , intra_info );
    //println("MB_read_I_mode_Luma_Three: "+b8+" INTRA_INFO="+intra_info); 
    b8 := b8 + 1;
  end

  MB_read_I_mode_Chroma_one: action ==> 
  guard
    done_reading_bits(),
    picture_type = 0, 
    b8 > 3
  do 
    grad := 0;
    start_vld();
    //println("MB_read_I_mode_Chroma_one");
  end
  
  //Intra_mode_code = intra_chroma_pred_mode
  MB_read_I_mode_Chroma_two: action ==>  INTRA_INFO: [intra_info]
  guard
    vld_end()
  var
    uint(size=INTRA_INFO_SZ) intra_info := 0 
  do 
    intra_chroma_pred_mode := vld_ue( lshift(vld_length(), 1), vld_result());
    intra_info := bitor( lshift(intra_chroma_pred_mode,1) , intra_info );
    //println("MB_read_I_mode_Chroma_two: "+b8+" INTRA_INFO="+intra_info); 
  end
  
  MB_read_CBP_one: action ==>
  guard
    vld_end()
  do
    grad := 0;
    start_vld();
    //println("MB_read_CBP_one");
  end
  
  uint (size=CBP_SZ) cbp;
  
  MB_read_CBP_two: action ==>
  guard
    vld_end()
  var 
    int x,  
    //x = CodeNum
    int y
    //y = INTRA or INTER    
    //int test_x,
    //int test_vld_length,
    //int test_vld_result
  do
    //test_vld_length := vld_length();
    //test_vld_result := vld_result();
    //test_x := vld_ue( lshift(vld_length(), 1), vld_result());
    
    //x := if(test_x<64) then test_x else 63 end;
    x := vld_ue( lshift(vld_length(), 1), vld_result());
    if picture_type = 0 then y := 0; else y := 1; end
    cbp := CBP_Table[x][y]; 
    coeff_coded := bitand( cbp,lshift(1,comp) ) != 0;
    
    //println("test_vld_length="+test_vld_length);
    //println("test_vld_result="+test_vld_result);
    //println("test_x="+test_x);
    //println("MB_read_CBP_two: cbp="+cbp+", "+"coeff_coded="+coeff_coded+", "+"comp ="+comp);
  end
  /*
  send_coeff_coded_BTYPE: action ==> BTYPE:[cmd]
  var
    int(size=BTYPE_SZ) cmd := INTRA 
  do
    cmd := bitor( cmd, if coeff_coded then COEFF_CODED else 0 end ); 
    //println("send_coeff_coded_BTYPE:BTYPE="+cmd+","+"coeff_coded="+coeff_coded);
    //println("MB_mode="+MB_mode);
    //println("BTYPE for comp"+comp+" ="+cmd);
  end
  */
  function get_golomb_grad_maxlevel(int Intra_Inter_Chroma, int TableNum, int Grad_Maxlevel) --> int( size=5 ) : VLC_Golomb_Orde[Intra_Inter_Chroma][TableNum][Grad_Maxlevel] end

  function get_intra_tablenum(int lev, int table_num) --> int:
    if abs(lev)>incVlc_intra[table_num] then 
      if abs(lev) <= 2 then abs(level) else
        if abs(lev) <= 4 then 3 else
          if abs(lev) <= 7 then 4 else 
           if abs(lev) <= 10 then 5 else 6
            end
          end
        end
      end
    else table_num 
    end
  end

  function get_chroma_tablenum(int lev, int table_num) --> int:
    if abs(lev)>incVlc_chroma[table_num] then 
      if abs(lev)<= 2 then abs(level)
        else if(abs(lev)<= 4) then 3
          else 4 
          end  
        end  
      else table_num 
      end
    end
    
  int (size=4) tablenum;
  int (size=5) maxlevel;
  int (size=4) grad;
  int run;
  int level;
  int run_level;
  bool escape_code;
  bool IsLuma;
  
  MB_read_intra_blockcoefficient_one: action ==>
  guard
    vld_end(),
    MB_mode = 5,
    coeff_coded,
    comp<4
  do
    tablenum := 0;
    b_last   := false;
    escape_code := false;
    //println("compL " + comp);
    maxlevel := get_golomb_grad_maxlevel(0, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(0, tablenum, 0 );
    start_vld();
    //println("MB_read_intra_blockcoefficient_one:comp = "+comp+" maxlevel "+maxlevel+" grad "+grad);
  end
  
  MB_read_intra_blockcoefficient_two: action ==> LAST: [b_last]
  guard
    vld_end(),
    MB_mode = 5,
    not b_last
  var 
    int levels
  do
    levels := vld_length();
    run_level := lshift((lshift(1, levels) - 1), grad) + vld_result();
    //println("run_level "+run_level);
    if run_level = EOB_Pos_intra[tablenum] then 
      b_last := true;
    else
    	b_last := false;
    end     
    //println("MB_read_intra_blockcoefficient_two: LAST = "+b_last);
  end
  
  //normal VLD
  MB_read_intra_blockcoefficient_three: action ==> RUN: [run], VALUE: [level]
  guard
    vld_end(),
    MB_mode = 5,
    not b_last,
    run_level < 59
  do
      //println("run_level "+run_level);
      run := VLD_Intra_Table[tablenum][run_level][1];
      level :=  VLD_Intra_Table[tablenum][run_level][0]; 
      tablenum := get_intra_tablenum(level, tablenum);
      maxlevel := get_golomb_grad_maxlevel(0, tablenum, 1 );
      grad     := get_golomb_grad_maxlevel(0, tablenum, 0 );
      start_vld();
      //println("MB_read_intra_blockcoefficient_three: RUN = "+run);
      //println("MB_read_intra_blockcoefficient_three: VALUE = "+level);
  end
  
  //escape VLD
  MB_read_intra_blockcoefficient_four: action ==> RUN: [run]
  guard
    vld_end(),
    MB_mode = 5,
    not b_last,
    run_level >= 59
  do
    //println("run_level "+run_level);    
    run := rshift((run_level - 59), 1);
    grad := 1;
    maxlevel := 11;
    escape_code := true;
    start_vld();
    level_flag := bitand(run_level,1);
    //println("MB_read_intra_blockcoefficient_four: RUN = "+run);
    //println("MB_read_intra_blockcoefficient_two");
  end  
  
  MB_read_intra_blockcoefficient_escape: action ==>  VALUE: [level]
  guard
    vld_end(),
    MB_mode = 5,
    escape_code = true 
  var 
    int levels,
    int pre_level
  do
    levels := vld_length();
    run_level := lshift((lshift(1, levels) - 1), grad) + vld_result();
    pre_level := run_level + if run > MaxRun[0][tablenum] then 1 else RefAbsLevel[tablenum][run] end;
    level := if level_flag=1 then -pre_level else pre_level end;
    //println("escape " + level);
    tablenum := get_intra_tablenum(level, tablenum);
    maxlevel := get_golomb_grad_maxlevel(0, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(0, tablenum, 0 );
    escape_code := false;
    start_vld();
    //println("MB_read_intra_blockcoefficient_escape: VALUE = "+level);
  end
  
  MB_read_chroma_blockcoefficient_one: action ==>
  guard
    vld_end(),
    MB_mode = 5,
    //bitand( cbp, lshift( 1,  comp)) >0,
    coeff_coded,
    (comp=4) or (comp=5)
  do
    tablenum := 0;
    b_last   := false;
    escape_code := false;
    //println("compC " + comp);
    maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
    start_vld();
    //println("MB_read_chroma_blockcoefficient_one");
  end
  
  MB_read_chroma_blockcoefficient_two: action ==> LAST: [b_last]
  guard
    vld_end(),
    not b_last
  var 
    int levels
  do
    levels := vld_length();
    run_level := lshift((lshift(1, levels) - 1), grad) + vld_result();
    //println("run_level "+run_level);
    if run_level = EOB_Pos_chroma[tablenum] then 
      b_last := true;
    else
    	b_last := false;
    end 
    //println("MB_read_chroma_blockcoefficient_two: LAST = "+b_last);
  end
  
  MB_read_chroma_blockcoefficient_three: action ==> RUN: [run], VALUE: [level]
  guard
    vld_end(),
    not b_last,
    run_level < 59
  do
    //println("run_level "+run_level);
    run := VLD_Chroma_Table[tablenum][run_level][1];
    level :=  VLD_Chroma_Table[tablenum][run_level][0];
    tablenum := get_chroma_tablenum(level, tablenum);
    maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
    start_vld();    
    //println("MB_read_chroma_blockcoefficient_three: RUN = "+run);
    //println("MB_read_chroma_blockcoefficient_three: VALUE = "+level);
  end
  
  MB_read_chroma_blockcoefficient_four: action ==> RUN: [run]
  guard
    vld_end(),
    not b_last,
    run_level >= 59
  do
    //println("run_level "+run_level);    
      run := rshift((run_level - 59), 1);
      grad := 0;
      maxlevel := 11;
      escape_code := true;
      start_vld();   
      level_flag := bitand(run_level,1);
      //println("MB_read_chroma_blockcoefficient_two");
      //println("MB_read_chroma_blockcoefficient_four: RUN = "+run);
  end  
  
  MB_read_chroma_blockcoefficient_escape: action ==>  VALUE: [level]
    guard
      vld_end(),
      escape_code = true 
    var
      int levels,
      int pre_level
    do
      levels := vld_length();
      run_level := lshift((lshift(1, levels) - 1), grad) + vld_result();
      pre_level := run_level + if run > MaxRun[2][tablenum] then 1 else RefAbsLevel[tablenum+14][run] end;
      level := if level_flag=1 then -pre_level else pre_level end;
      //println("escape " + level);
      tablenum := get_chroma_tablenum(level, tablenum);
      maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
      grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
      escape_code := false;
      start_vld();
      //println("MB_read_chroma_blockcoefficient_escape: VALUE = "+level);
  end
  
  MB_read_inter_coefficient_one: action ==>
  end
  
  bool NewVLD := false;
  int VLD_Counter;
  bool First_part;
  int Codeword;
  int CodeLen;
  int CodeTail;
  
  procedure start_vld()
  begin
    NewVLD := true;
    VLD_Counter := 0;
    First_part := true;
    Codeword := 0;
    CodeLen := 0;
  end
  
  function vld_result() --> int( size=30 ) : Codeword end
  function vld_length() --> int( size=30 ) : CodeLen end
  function vld_end() --> bool : not NewVLD end
  function vld_ue(int len, int info) --> int : lshift(1, rshift(len, 1))+info-1 end
  
  action bits:[ b ] ==>
  guard
    NewVLD,
    First_part
  do
    if b then
      First_part := false;
      CodeTail := VLD_Counter + grad;
      CodeLen := VLD_Counter;
      if CodeTail = 0 then NewVLD := false; end
      //println("VLD_Counter0 "+VLD_Counter);
    else
      VLD_Counter := VLD_Counter + 1;
      //println("VLD_Counter1 "+VLD_Counter);
    end
    bit_count := bit_count + 1;    
  end
  
  action bits:[ b ] ==>
  guard
    NewVLD,
    not First_part
  do
    VLD_Counter := VLD_Counter - 1;
    Codeword := bitor( lshift( Codeword, 1), if b then 1 else 0 end);
    bit_count := bit_count + 1;
    if   (VLD_Counter + grad) = 0 then NewVLD := false; end
      //println("VLD_Counter2 "+VLD_Counter);
  end      
  
  List ( type: List ( type: int(size=6), size=2), size=64 ) CBP_Table=
  [
    [63, 0],[15, 15],[31, 63],[47, 31],[ 0, 16],[ 14,32],[13,47],[11,13],[7, 14],[5, 11],
    [10,12],[8,5],[12,10],[61,7],[4,48],[55,3],[1, 2],[2,8],[59,4],[3,1],
    [62, 61],[ 9, 55],[ 6,59],[29,62],[45,29],[51,27],[23,23],[39,19],[27,30],[46,28],
    [53,9],[30,6],[43,60],[37,21],[60,44],[16,26],[21,51],[ 28,35],[ 19,18],[ 35,20],
    [ 42,24],[ 26,53],[ 44,17],[32,37],[58,39],[24,45],[20,58],[17,43],[18,42],[48,46],
    [22,36],[33,33],[25,34],[49,40],[40,52],[36,49],[34,50],[50,56],[52,25],[54,22],
    [41,54],[56,57],[38,41],[57,38]
  ];
  
  List ( type: List ( type: List ( type: int(size=5), size=2), size=7 ), size=3) VLC_Golomb_Orde = //[intra/inter/chroma][tablenum][grad/maxlevel]
  [  
    [
      [2,9], [2,9], [2,9], [2,9], [2,9], [2,9], [2,9]
    ],
    [
      [3,9], [2,9], [2,9], [2,9], [2,9], [2,9], [2,9]
    ],
    [
      [2,9], [0,9], [1,9], [1,9], [0,9], [-1,-1], [-1,-1]
    ]
  ];
  
  List ( type: int(size=4), size=7)  EOB_Pos_intra= [ -1, 8, 8, 8, 6, 0, 0];
  List ( type: int(size=4), size=7)  EOB_Pos_chroma = [ -1, 0, 2, 0, 0 ];
  
  List ( type: int(size=10), size=7) incVlc_intra= [0,1,2,4,7,10,3000];
  List ( type: int(size=10), size=5) incVlc_chroma = [0,1,2,4,3000];
  
  List ( type: List ( type: int(size=6), size=7), size=3 ) MaxRun= 
  [
    [22,14,9,6,4,2,1],
    [25,18,13,9,6,4,3],
    [24,19,10,7,4,-1,-1]
  ];
  
  List ( type: List ( type: int(size=5), size=26), size=19 ) RefAbsLevel= 
  [
    [ 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1],
    [ 7, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [10, 6, 4, 4, 3, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [13, 7, 5, 4, 3, 2, 2,-1,-1,-1 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [18, 8, 4, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [22, 7, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [27, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [ 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [ 5, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1],
    [ 7, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [10, 6, 5, 4, 3, 3, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [13, 7, 5, 4, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [17, 8, 4, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [22, 6, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [ 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1],
    [ 6, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1],
    [10, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [14, 7, 4, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [20, 7, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
  ];
  
  
  List ( type: List ( type: List ( type: int(size=8), size=2), size=64 ), size=7) VLD_Intra_Table=
  [
    [ 
      [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 2,0 ], [ -2,0 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 1,14 ], [ -1,14 ], [ 2,1 ], [ -2,1 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 3,0 ], [ -3,0 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 2,2 ], [ -2,2 ], [ 1,19 ], [ -1,19 ], [ 1,20 ], [ -1,20 ], [ 2,3 ], [ -2,3 ], [ 1,21 ], [ -1,21 ], [ 2,4 ], [ -2,4 ], [ 1,22 ], [ -1,22 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 2,0 ], [ -2,0 ], [ 1,2 ], [ -1,2 ], [ 0,0 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 3,0 ], [ -3,0 ], [ 2,1 ], [ -2,1 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 2,2 ], [ -2,2 ], [ 4,0 ], [ -4,0 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 2,3 ], [ -2,3 ], [ 3,1 ], [ -3,1 ], [ 1,11 ], [ -1,11 ], [ 2,4 ], [ -2,4 ], [ 5,0 ], [ -5,0 ], [ 1,12 ], [ -1,12 ], [ 2,5 ], [ -2,5 ], [ 1,13 ], [ -1,13 ], [ 2,6 ], [ -2,6 ], [ 2,7 ], [ -2,7 ], [ 3,2 ], [ -3,2 ], [ 6,0 ], [ -6,0 ], [ 1,14 ], [ -1,14 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 1,1 ], [ -1,1 ], [ 3,0 ], [ -3,0 ], [ 0,0 ], [ 1,2 ], [ -1,2 ], [ 2,1 ], [ -2,1 ], [ 4,0 ], [ -4,0 ], [ 1,3 ], [ -1,3 ], [ 5,0 ], [ -5,0 ], [ 1,4 ], [ -1,4 ], [ 3,1 ], [ -3,1 ], [ 2,2 ], [ -2,2 ], [ 1,5 ], [ -1,5 ], [ 6,0 ], [ -6,0 ], [ 2,3 ], [ -2,3 ], [ 1,6 ], [ -1,6 ], [ 4,1 ], [ -4,1 ], [ 7,0 ], [ -7,0 ], [ 3,2 ], [ -3,2 ], [ 2,4 ], [ -2,4 ], [ 1,7 ], [ -1,7 ], [ 2,5 ], [ -2,5 ], [ 8,0 ], [ -8,0 ], [ 1,8 ], [ -1,8 ], [ 5,1 ], [ -5,1 ], [ 3,3 ], [ -3,3 ], [ 2,6 ], [ -2,6 ], [ 9,0 ], [ -9,0 ], [ 1,9 ], [ -1,9 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 1,1 ], [ -1,1 ], [ 0,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 2,1 ], [ -2,1 ], [ 1,2 ], [ -1,2 ], [ 6,0 ], [ -6,0 ], [ 3,1 ], [ -3,1 ], [ 7,0 ], [ -7,0 ], [ 1,3 ], [ -1,3 ], [ 8,0 ], [ -8,0 ], [ 2,2 ], [ -2,2 ], [ 4,1 ], [ -4,1 ], [ 1,4 ], [ -1,4 ], [ 9,0 ], [ -9,0 ], [ 5,1 ], [ -5,1 ], [ 2,3 ], [ -2,3 ], [ 10,0 ], [ -10,0 ], [ 3,2 ], [ -3,2 ], [ 1,5 ], [ -1,5 ], [ 11,0 ], [ -11,0 ], [ 6,1 ], [ -6,1 ], [ 1,6 ], [ -1,6 ], [ 2,4 ], [ -2,4 ], [ 3,3 ], [ -3,3 ], [ 12,0 ], [ -12,0 ], [ 4,2 ], [ -4,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 0,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 1,1 ], [ -1,1 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 2,1 ], [ -2,1 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 1,2 ], [ -1,2 ], [ 3,1 ], [ -3,1 ], [ 11,0 ], [ -11,0 ], [ 4,1 ], [ -4,1 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 5,1 ], [ -5,1 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 14,0 ], [ -14,0 ], [ 6,1 ], [ -6,1 ], [ 15,0 ], [ -15,0 ], [ 16,0 ], [ -16,0 ], [ 3,2 ], [ -3,2 ], [ 1,4 ], [ -1,4 ], [ 7,1 ], [ -7,1 ], [ 17,0 ], [ -17,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 1,1 ], [ -1,1 ], [ 11,0 ], [ -11,0 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 2,1 ], [ -2,1 ], [ 14,0 ], [ -14,0 ], [ 15,0 ], [ -15,0 ], [ 3,1 ], [ -3,1 ], [ 16,0 ], [ -16,0 ], [ 1,2 ], [ -1,2 ], [ 17,0 ], [ -17,0 ], [ 4,1 ], [ -4,1 ], [ 18,0 ], [ -18,0 ], [ 5,1 ], [ -5,1 ], [ 19,0 ], [ -19,0 ], [ 20,0 ], [ -20,0 ], [ 6,1 ], [ -6,1 ], [ 21,0 ], [ -21,0 ], [ 2,2 ], [ -2,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 11,0 ], [ -11,0 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 14,0 ], [ -14,0 ], [ 15,0 ], [ -15,0 ], [ 16,0 ], [ -16,0 ], [ 1,1 ], [ -1,1 ], [ 17,0 ], [ -17,0 ], [ 18,0 ], [ -18,0 ], [ 19,0 ], [ -19,0 ], [ 20,0 ], [ -20,0 ], [ 21,0 ], [ -21,0 ], [ 2,1 ], [ -2,1 ], [ 22,0 ], [ -22,0 ], [ 23,0 ], [ -23,0 ], [ 24,0 ], [ -24,0 ], [ 25,0 ], [ -25,0 ], [ 3,1 ], [ -3,1 ], [ 26,0 ], [ -26,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ]
  ];
  
  List ( type: List ( type: List ( type: int(size=8), size=2), size=64 ), size=5) VLD_Chroma_Table=
  [
    [ 
      [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 2,0 ], [ -2,0 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 1,14 ], [ -1,14 ], [ 3,0 ], [ -3,0 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 1,19 ], [ -1,19 ], [ 1,20 ], [ -1,20 ], [ 1,21 ], [ -1,21 ], [ 2,1 ], [ -2,1 ], [ 1,22 ], [ -1,22 ], [ 1,23 ], [ -1,23 ], [ 1,24 ], [ -1,24 ], [ 4,0 ], [ -4,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 2,0 ], [ -2,0 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 3,0 ], [ -3,0 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 2,1 ], [ -2,1 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 4,0 ], [ -4,0 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 2,2 ], [ -2,2 ], [ 1,14 ], [ -1,14 ], [ 2,3 ], [ -2,3 ], [ 5,0 ], [ -5,0 ], [ 3,1 ], [ -3,1 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 1,17 ], [ -1,17 ], [ 2,4 ], [ -2,4 ], [ 1,18 ], [ -1,18 ], [ 1,19 ], [ -1,19 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 2,0 ], [ -2,0 ], [ 1,1 ], [ -1,1 ], [ 3,0 ], [ -3,0 ], [ 1,2 ], [ -1,2 ], [ 4,0 ], [ -4,0 ], [ 2,1 ], [ -2,1 ], [ 1,3 ], [ -1,3 ], [ 5,0 ], [ -5,0 ], [ 1,4 ], [ -1,4 ], [ 3,1 ], [ -3,1 ], [ 2,2 ], [ -2,2 ], [ 1,5 ], [ -1,5 ], [ 6,0 ], [ -6,0 ], [ 1,6 ], [ -1,6 ], [ 2,3 ], [ -2,3 ], [ 7,0 ], [ -7,0 ], [ 1,7 ], [ -1,7 ], [ 4,1 ], [ -4,1 ], [ 1,8 ], [ -1,8 ], [ 3,2 ], [ -3,2 ], [ 2,4 ], [ -2,4 ], [ 2,5 ], [ -2,5 ], [ 8,0 ], [ -8,0 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 9,0 ], [ -9,0 ], [ 5,1 ], [ -5,1 ], [ 3,3 ], [ -3,3 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 1,1 ], [ -1,1 ], [ 5,0 ], [ -5,0 ], [ 2,1 ], [ -2,1 ], [ 6,0 ], [ -6,0 ], [ 1,2 ], [ -1,2 ], [ 7,0 ], [ -7,0 ], [ 3,1 ], [ -3,1 ], [ 8,0 ], [ -8,0 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 9,0 ], [ -9,0 ], [ 4,1 ], [ -4,1 ], [ 1,4 ], [ -1,4 ], [ 10,0 ], [ -10,0 ], [ 3,2 ], [ -3,2 ], [ 5,1 ], [ -5,1 ], [ 2,3 ], [ -2,3 ], [ 11,0 ], [ -11,0 ], [ 1,5 ], [ -1,5 ], [ 12,0 ], [ -12,0 ], [ 1,6 ], [ -1,6 ], [ 6,1 ], [ -6,1 ], [ 13,0 ], [ -13,0 ], [ 2,4 ], [ -2,4 ], [ 1,7 ], [ -1,7 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 1,1 ], [ -1,1 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 11,0 ], [ -11,0 ], [ 2,1 ], [ -2,1 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 3,1 ], [ -3,1 ], [ 14,0 ], [ -14,0 ], [ 1,2 ], [ -1,2 ], [ 15,0 ], [ -15,0 ], [ 4,1 ], [ -4,1 ], [ 16,0 ], [ -16,0 ], [ 17,0 ], [ -17,0 ], [ 5,1 ], [ -5,1 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 18,0 ], [ -18,0 ], [ 6,1 ], [ -6,1 ], [ 19,0 ], [ -19,0 ], [ 1,4 ], [ -1,4 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
    ]
  ];

  schedule fsm look_for_Sequence_Header :
    // read sequence header
    look_for_Sequence_Header                      ( look_for_Sequence_Header                      ) --> read_Sequence_Header_Profile_id;
    read_Sequence_Header_Profile_id               ( read_Sequence_Header_Profile_id               ) --> read_Sequence_Header_Level_id;
    read_Sequence_Header_Level_id                 ( read_Sequence_Header_Level_id                 ) --> read_Sequence_Header_Progress_sequence;
    read_Sequence_Header_Progress_sequence        ( read_Sequence_Header_Progress_sequence        ) --> read_Sequence_Header_Width_Height;
    //test
    /*
    temp_0 (temp_0) --> temp_1;
    temp1(temp_1) --> read_Sequence_Header_Width_Height;
    */
    read_Sequence_Header_Width_Height             ( read_Sequence_Header_Width_Height             ) --> read_Sequence_Header_Chroma_format;
    read_Sequence_Header_Chroma_format            ( read_Sequence_Header_Chroma_format            ) --> read_Sequence_Header_Sample_precision;
    read_Sequence_Header_Sample_precision         ( read_Sequence_Header_Sample_precision         ) --> read_Sequence_Header_Aspect_ratio_information;
    read_Sequence_Header_Aspect_ratio_information ( read_Sequence_Header_Aspect_ratio_information ) --> read_Sequence_Header_Frame_rate_code;
    read_Sequence_Header_Frame_rate_code          ( read_Sequence_Header_Frame_rate_code          ) --> read_Sequence_Header_Bit_rate_lower_upper;
    read_Sequence_Header_Bit_rate_lower_upper     ( read_Sequence_Header_Bit_rate_lower_upper     ) --> read_Sequence_Header_Low_delay;
    read_Sequence_Header_Low_delay                ( read_Sequence_Header_Low_delay                ) --> read_Sequence_Header_BBV_Buffer_size;    		 
    read_Sequence_Header_BBV_Buffer_size          ( read_Sequence_Header_BBV_Buffer_size          ) --> Picture_byte_align;
    
    //
    Picture_byte_align                            ( byte_align                                    ) --> look_for_which_Header;
    look_for_which_Header                         ( look_for_which_Header                         ) --> find_header;
    
    find_header                                   ( look_for_extension_0_header                   ) --> read_extension_0;
    find_header                                   ( look_for_user_data_header                     ) --> read_user_data;
    find_header                                   ( look_for_I_Picture_Header                     ) --> read_Picture_Header_Time_code; 
    find_header                                   ( look_for_PB_Picture_Header                    ) --> read_Picture_Coding_Type;
    find_header                                   ( look_for_Sequence_End                         ) --> look_for_Sequence_Header;    
    
    read_extension_0                              ( read_sequence_display_extension               ) --> read_sequence_display_extension_further;
    read_extension_0                              ( read_copyright_extension                      ) --> read_copyright_extension_1;
    read_extension_0                              ( read_camera_parameters_extension              ) --> read_camera_parameters_extension_1;
    read_extension_0                              ( read_reserved_extension                       ) --> read_reserved_extension;
    
    read_sequence_display_extension_further       ( read_sequence_display_extension_0             ) --> Picture_byte_align;
    read_sequence_display_extension_further       ( read_sequence_display_extension_1             ) --> Picture_byte_align;    
        
    read_user_data                                ( read_user_data_0                              ) --> read_user_data;
    read_user_data                                ( read_user_data_1                              ) --> find_header;    
   
    read_copyright_extension                      ( read_copyright_extension                      ) --> read_copyright_extension_1;
    read_copyright_extension_1                    ( read_copyright_extension_1                    ) --> read_copyright_extension_2;
    read_copyright_extension_2                    ( read_copyright_extension_2                    ) --> read_copyright_extension_3;
    read_copyright_extension_3                    ( read_copyright_extension_3                    ) --> Picture_byte_align;

    read_camera_parameters_extension_1            ( read_camera_parameters_extension_1            ) --> read_camera_parameters_extension_2;
    read_camera_parameters_extension_2            ( read_camera_parameters_extension_2            ) --> read_camera_parameters_extension_3;
    read_camera_parameters_extension_3            ( read_camera_parameters_extension_3            ) --> read_camera_parameters_extension_4;
    read_camera_parameters_extension_4            ( read_camera_parameters_extension_4            ) --> read_camera_parameters_extension_5;
    read_camera_parameters_extension_5            ( read_camera_parameters_extension_5            ) --> read_camera_parameters_extension_6;
    read_camera_parameters_extension_6            ( read_camera_parameters_extension_6            ) --> read_camera_parameters_extension_7;
    read_camera_parameters_extension_7            ( read_camera_parameters_extension_7            ) --> read_camera_parameters_extension_8;
    read_camera_parameters_extension_8            ( read_camera_parameters_extension_8            ) --> read_camera_parameters_extension_9;
    read_camera_parameters_extension_9            ( read_camera_parameters_extension_9            ) --> read_camera_parameters_extension_A;
    read_camera_parameters_extension_A            ( read_camera_parameters_extension_A            ) --> read_camera_parameters_extension_B;
    read_camera_parameters_extension_B            ( read_camera_parameters_extension_B            ) --> read_camera_parameters_extension_C;
    read_camera_parameters_extension_C            ( read_camera_parameters_extension_C            ) --> Picture_byte_align;
        
    read_reserved_extension                       ( read_reserved_extension                       ) --> Picture_byte_align;
             
    // read picture header
    read_Picture_Header_Time_code                 ( read_Picture_Header_Time_code                 ) --> read_Picture_Header_Picture_distance;
    read_Picture_Header_Picture_distance          ( read_Picture_Header_Picture_distance          ) --> read_Picture_Header_Picture_distance_next;
    
    read_Picture_Header_Picture_distance_next     ( read_Picture_Header_BBV_check_times           ) --> read_Picture_Header_BBV_check_times_one;    
    read_Picture_Header_Picture_distance_next     ( read_Picture_Header_Progressive_frame         ) --> read_Picture_Header_Picture_structure;
    read_Picture_Header_BBV_check_times_one       ( read_Picture_Header_BBV_check_times_one       ) --> read_Picture_Header_Progressive_frame;
    read_Picture_Header_Progressive_frame         ( read_Picture_Header_Progressive_frame         ) --> read_Picture_Header_Picture_structure;
    
    read_Picture_Header_Picture_structure         ( read_Picture_Header_Picture_structure         ) --> read_Picture_Header_Top_field_first;
    read_Picture_Header_Top_field_first           ( read_Picture_Header_Top_field_first           ) --> read_Picture_Header_Repeat_first_field;
    read_Picture_Header_Repeat_first_field        ( read_Picture_Header_Repeat_first_field        ) --> read_Picture_Header_Fixed_picture_qp;
    read_Picture_Header_Fixed_picture_qp          ( read_Picture_Header_Fixed_picture_qp          ) --> read_Picture_Header_Picture_qp;
    
    read_Picture_Header_Picture_qp                ( read_Picture_Header_Picture_qp                ) --> read_Picture_Header_Picture_qp_next;
    read_Picture_Header_Picture_qp_next           ( read_Picture_Header_Skip_mode_flag            ) --> read_Picture_Header_Loop_filter_disable;
    read_Picture_Header_Picture_qp_next           ( read_Picture_Header_Loop_filter_disable       ) --> Slice_byte_align;
    read_Picture_Header_Picture_qp_next           ( get_Picture_QP                                ) --> get_Picture_QP_next;
    read_Picture_Header_Loop_filter_disable       ( read_Picture_Header_Loop_filter_disable       ) --> Slice_byte_align;//no loopfilter now
    
    //pb picture
    read_Picture_Coding_Type                      ( read_Picture_Coding_Type                      ) --> read_PB_Picture_Distance;
    read_PB_Picture_Distance                      ( read_PB_Picture_Distance                      ) --> read_Picture_Header_BBV_check_times;
    get_Picture_QP_next                           ( read_Picture_Reference_Flag                   ) --> read_Picture_Reference_Flag;
    get_Picture_QP_next                           ( read_No_Forward_Reference_Flag                ) --> read_PB_Reserved_Bits;
    read_No_Forward_Reference_Flag                ( read_No_Forward_Reference_Flag                ) --> read_PB_Reserved_Bits;
    read_PB_Reserved_Bits                         ( read_PB_Reserved_Bits                         ) --> read_PB_Skip_Mode_Flag;
    read_PB_Skip_Mode_Flag                        ( read_PB_Skip_Mode_Flag                        ) --> read_PB_Loop_filter_Disable;
    read_PB_Loop_filter_Disable                   ( read_PB_Loop_filter_Disable                   ) --> Slice_byte_align;
    
    
    // read slice header
    Slice_byte_align                              ( byte_align                                    ) --> look_for_Slice_Header;
    look_for_Slice_Header                         ( look_for_Slice_Header                         ) --> Slice_Header_Slice_vertical_position;
    Slice_Header_Slice_vertical_position          ( Slice_Header_Slice_vertical_position          ) --> Slice_Header_QP;
    Slice_Header_Slice_vertical_position          ( Slice_Header_Slice_vertical_position          ) --> send_new_vop_BTYPE;
    Slice_Header_QP                               ( Slice_Header_QP                               ) --> Slice_Header_Fixed_slice_qp_and_slice_qp;
    Slice_Header_Fixed_slice_qp_and_slice_qp      ( Slice_Header_Fixed_slice_qp_and_slice_qp      ) --> send_new_vop_BTYPE;
    
    //send BTYPE token
    send_new_vop_BTYPE                            ( send_new_vop_BTYPE                            ) --> send_mb_width_BTYPE;
    send_mb_width_BTYPE                           ( send_mb_width_BTYPE                           ) --> send_mb_height_BTYPE;
    send_mb_height_BTYPE                          ( send_mb_height_BTYPE                          ) --> StartMB;
    
    //read MB
    mb_done                                       ( mb_done                                       ) --> Slice_byte_align;
    
    
    
    StartMB                                       ( StartMB                                       ) --> StartMB_next;
    StartMB_next                                  ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    StartMB_next                                  ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Chroma_one                     ) --> MB_read_I_mode_Chroma_two;
    MB_read_I_mode_Luma_Three                     ( MB_read_I_mode_Luma_Three                     ) --> MB_read_I_mode_Luma_Three_next;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Chroma_one                     ) --> MB_read_I_mode_Chroma_two;
    /*
    StartMB                                       ( StartMB                                       ) --> MB_read_I_mode_Luma_one;
    StartMB                                       ( StartMB                                       ) --> MB_read_I_mode_Luma_two;
    MB_read_I_mode_Luma_one                       ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one;
    MB_read_I_mode_Luma_one                       ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_two;
    MB_read_I_mode_Luma_one                       ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Chroma_one;
    
    MB_read_I_mode_Luma_two                       ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    MB_read_I_mode_Luma_Three                     ( MB_read_I_mode_Luma_Three                     ) --> MB_read_I_mode_Luma_one;
    MB_read_I_mode_Luma_Three                     ( MB_read_I_mode_Luma_Three                     ) --> MB_read_I_mode_Luma_two;
    MB_read_I_mode_Luma_Three                     ( MB_read_I_mode_Luma_Three                     ) --> MB_read_I_mode_Chroma_one;
    
    MB_read_I_mode_Chroma_one                     ( MB_read_I_mode_Chroma_one                     ) --> MB_read_I_mode_Chroma_two;
    */
    
    /*
    MB_read_CBP_one                               ( MB_read_CBP_one                               ) --> MB_read_CBP_two;
    MB_read_CBP_two                               ( MB_read_CBP_two                               ) --> MB_read_intra_blockcoefficient_one;
    MB_read_CBP_two                               ( MB_read_CBP_two                               ) --> block_done;
    */  
    //send BTYPE token
    //MB_read_CBP_two                               ( MB_read_CBP_two                               ) --> send_coeff_coded_BTYPE;
    //send_coeff_coded_BTYPE                        ( send_coeff_coded_BTYPE                        ) --> block_done;
    //send_coeff_coded_BTYPE                        ( send_coeff_coded_BTYPE                        ) --> MB_read_intra_blockcoefficient_one;
    /*
    MB_read_intra_blockcoefficient_one            ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_escape;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_escape         ( MB_read_intra_blockcoefficient_escape         ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> block_done;
    MB_read_intra_blockcoefficient_escape    	    ( MB_read_intra_blockcoefficient_escape         ) --> block_done;
    */
    MB_read_I_mode_Chroma_two                     ( MB_read_I_mode_Chroma_two                     ) --> MB_read_CBP_one;
    MB_read_CBP_one                               ( MB_read_CBP_one                               ) --> MB_read_CBP_two;
    MB_read_CBP_two                               ( MB_read_CBP_two                               ) --> MB_read_CBP_two_next;
    MB_read_CBP_two_next                          ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_CBP_two_next                          ( block_done                                    ) --> block_done_next;  
    
    /*
    MB_read_intra_blockcoefficient_one            ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_three;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_four;
    MB_read_intra_blockcoefficient_three          ( MB_read_intra_blockcoefficient_three          ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_four           ( MB_read_intra_blockcoefficient_four           ) --> MB_read_intra_blockcoefficient_escape;        
    MB_read_intra_blockcoefficient_escape         ( MB_read_intra_blockcoefficient_escape         ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> block_done;
    MB_read_intra_blockcoefficient_escape    	    ( MB_read_intra_blockcoefficient_escape         ) --> block_done;      
    */
    MB_read_intra_blockcoefficient_one            ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_two_next;
    MB_read_intra_blockcoefficient_two_next       ( MB_read_intra_blockcoefficient_three          ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two_next       ( MB_read_intra_blockcoefficient_four           ) --> MB_read_intra_blockcoefficient_escape;
    MB_read_intra_blockcoefficient_two_next       ( block_done                                    ) --> block_done_next;
    MB_read_intra_blockcoefficient_escape         ( MB_read_intra_blockcoefficient_escape         ) --> MB_read_intra_blockcoefficient_escape_next;
    MB_read_intra_blockcoefficient_escape_next    ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_two_next;
    MB_read_intra_blockcoefficient_escape_next    ( block_done                                    ) --> block_done_next;
    
    MB_read_chroma_blockcoefficient_one           ( MB_read_chroma_blockcoefficient_one           ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two           ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_two_next;
    MB_read_chroma_blockcoefficient_two_next      ( MB_read_chroma_blockcoefficient_three         ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two_next      ( MB_read_chroma_blockcoefficient_four          ) --> MB_read_chroma_blockcoefficient_escape;
    MB_read_chroma_blockcoefficient_two_next      ( block_done                                    ) --> block_done_next;
    MB_read_chroma_blockcoefficient_escape        ( MB_read_chroma_blockcoefficient_escape        ) --> MB_read_chroma_blockcoefficient_escape_next;
    MB_read_chroma_blockcoefficient_escape_next   ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_two_next;
    MB_read_chroma_blockcoefficient_escape_next   ( block_done                                    ) --> block_done_next;
       
    /*
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_three;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_four;
    MB_read_intra_blockcoefficient_three          ( MB_read_intra_blockcoefficient_three          ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_four           ( MB_read_intra_blockcoefficient_four           ) --> MB_read_intra_blockcoefficient_escape;        
    MB_read_intra_blockcoefficient_escape         ( MB_read_intra_blockcoefficient_escape         ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> block_done;
    MB_read_intra_blockcoefficient_escape    	    ( MB_read_intra_blockcoefficient_escape         ) --> block_done;    
    
    MB_read_chroma_blockcoefficient_one           ( MB_read_chroma_blockcoefficient_one           ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two           ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_three;
    MB_read_chroma_blockcoefficient_two           ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_four;
    MB_read_chroma_blockcoefficient_three         ( MB_read_chroma_blockcoefficient_three         ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_four          ( MB_read_chroma_blockcoefficient_four          ) --> MB_read_chroma_blockcoefficient_escape;
    MB_read_chroma_blockcoefficient_escape        ( MB_read_chroma_blockcoefficient_escape        ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two           ( MB_read_chroma_blockcoefficient_two           ) --> block_done;
    MB_read_chroma_blockcoefficient_escape        ( MB_read_chroma_blockcoefficient_escape        ) --> block_done;
    */
    block_done                                    ( block_done                                    ) --> block_done_next;
    block_done_next                               ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    block_done_next                               ( MB_read_chroma_blockcoefficient_one           ) --> MB_read_chroma_blockcoefficient_two;
    block_done_next                               ( mb_dispatch_done                              ) --> mb_dispatch_done_next;
    block_done_next                               ( block_done                                    ) --> block_done_next;
    
    /*
    block_done                                    ( block_done                                    ) --> MB_read_intra_blockcoefficient_one;
    block_done                                    ( block_done                                    ) --> MB_read_chroma_blockcoefficient_one;
    block_done                                    ( block_done                                    ) --> mb_dispatch_done;
    block_done                                    ( block_done                                    ) --> block_done;
    */
    mb_dispatch_done                              ( mb_dispatch_done                              ) --> mb_dispatch_done_next;
    mb_dispatch_done_next                         ( StartMB                                       ) --> StartMB_next;
    mb_dispatch_done_next                         ( mb_done                                       ) --> Picture_byte_align;
    /*
    mb_dispatch_done                              ( mb_dispatch_done                              ) --> StartMB;
    mb_dispatch_done                              ( mb_dispatch_done                              ) --> mb_done;
    mb_done                                       ( mb_done                                       ) --> Picture_byte_align;
    */
  end

  priority
    read_Picture_Header_BBV_check_times       > read_Picture_Header_Progressive_frame;
    read_Picture_Header_Skip_mode_flag        > read_Picture_Header_Loop_filter_disable;
    read_Picture_Header_Loop_filter_parameter > byte_align;
    
    MB_read_I_mode_Luma_one                   > MB_read_I_mode_Luma_two;
    
    MB_read_intra_blockcoefficient_escape     > MB_read_intra_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_escape    > MB_read_chroma_blockcoefficient_two;
    Slice_Header_QP                           > send_new_vop_BTYPE;    
    mb_done                                   > StartMB;   
    
    MB_read_intra_blockcoefficient_one > MB_read_chroma_blockcoefficient_one > mb_dispatch_done;
    MB_read_intra_blockcoefficient_three > MB_read_intra_blockcoefficient_four > block_done;
    MB_read_chroma_blockcoefficient_three > MB_read_chroma_blockcoefficient_four > block_done;
    MB_read_intra_blockcoefficient_two > block_done;
  end
  
end

