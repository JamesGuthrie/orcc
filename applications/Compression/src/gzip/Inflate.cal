package gzip;

import std.util.BitOps.selectbit;
import std.util.BitOps.selectbits;
import gzip.Constants.*;

actor Inflate() int(size=8) C ==> int(size=8) D:

	// the bits of the byte read
	uint(size=16) bits := 0;
	
	// number of bits remaining in value
	uint(size=4) num_bits := 0;
	
	// true when this block is the last block
	bool bfinal := false;
	
	// compression type
	uint(size=2) btype;

	int bl_count[16];
	int next_code[16];

	// utility function	
	procedure print_bin(int number, int numbits)
	var
		int bit
	begin
		foreach int i in 1 .. numbits do
			bit := selectbit(number, numbits - i);
			if bit != 0 then
				print(1);
			else
				print(0);
			end
		end
		println();
	end

	int tree_value_len[288];
	int tree_value_code[288];
	int inv_value_code[512] := [ 0 : for int i in 0 .. 511 ];
	
	procedure set_len(int from, int to, int bitlen)
	begin
		foreach int n in from .. to do
    		tree_value_len[n] := bitlen;
    		bl_count[bitlen] := bl_count[bitlen] + 1;
		end
	end
	
	procedure step1()
	begin
		bl_count := [ 0 : for int bits in 0 .. MAX_BITS ];
		
		set_len(0, 143, 8);
		set_len(144, 255, 9);
		set_len(256, 279, 7);
		set_len(280, 287, 8);
	end
	
	procedure step2()
	var
		int code := 0
	begin
		bl_count[0] := 0;
		foreach int bits in 1 .. MAX_BITS do
			code := (code + bl_count[bits - 1]) << 1;
			next_code[bits] := code;
		end
	end
	
	procedure step3(int max_code)
	var
		int len := 0
	begin
		foreach int n in 0 .. max_code do
			len := tree_value_len[n];
			if len != 0 then
				tree_value_code[n] := next_code[len];
				inv_value_code[tree_value_code[n]] := n;
				next_code[len] := next_code[len] + 1;
			end
		end
	end
	
	int tree_dist_len[32];
	int tree_dist_code[32];
	int inv_dist_code[32] := [ 0 : for int i in 0 .. 31 ];
	
	procedure set_len_dist(int from, int to, int bitlen)
	begin
		foreach int n in from .. to do
    		tree_dist_len[n] := bitlen;
    		bl_count[bitlen] := bl_count[bitlen] + 1;
		end
	end
	
	procedure step1_dist()
	begin
		bl_count := [ 0 : for int bits in 0 .. MAX_BITS ];
		set_len_dist(0, 31, 5);
	end
	
	procedure step3_dist(int max_code)
	var
		int len := 0
	begin
		foreach int n in 0 .. max_code do
			len := tree_dist_len[n];
			if len != 0 then
				tree_dist_code[n] := next_code[len];
				inv_dist_code[tree_dist_code[n]] := n;
				next_code[len] := next_code[len] + 1;
			end
		end
	end
	
	initialize ==>
	do
		step1();
		step2();
		step3(287);
		
		step1_dist();
		step2();
		step3_dist(31);
	end
	
	///////////////////////////////////////////////////////////////////////////
	procedure bits_read(int(size=5) n)
	begin
		num_bits := num_bits - n;
		bits := bits >> n;
		println("bits_read: " + n + " bits requested, " + num_bits + " remaining");
	end
	
	function need_bits(int n) --> bool :
		num_bits >= n
	end
	
	///////////////////////////////////////////////////////////////////////////
	// test final block
	is_final: action ==> guard bfinal end
	other: action ==> end
	
	///////////////////////////////////////////////////////////////////////////
	load: action C:[ byte ] ==>
	do
		println("loaded 8 bits");
		bits := (byte << num_bits) | bits;
		num_bits := num_bits + 8;
	end

	///////////////////////////////////////////////////////////////////////////
	// read block header

	read.header: action ==>
	guard
		need_bits(3)
	do
		bfinal := selectbit(bits, 0) = 1;
		btype := selectbits(bits, 1, 2) >> 1;
		println("block_header: bfinal=" + bfinal + ", btype=" + btype);
		bits_read(3);
	end

	///////////////////////////////////////////////////////////////////////////
	// uncompressed data
	uncompressed: action ==>
	guard
		btype = STORED_BLOCK
	end

	uint(size=16) len;
	uint(size=16) count;
	uint(size=16) nlen;

	read_uc_len: action C:[ len1, len2, nlen1, nlen2 ] ==>
	do
		len := (len2 << 8) | len1;
		nlen := (nlen2 << 8) | nlen1;
		count := 0;
	end

	loop.uc: action C:[ byte ] ==> D:[ byte ]
	do
		count := count + 1;
	end
	
	done.uc: action ==>
	guard
		count = len
	end

	///////////////////////////////////////////////////////////////////////////
	// fixed trees

	fixed_huffman: action ==>
	guard
		btype = STATIC_TREES
	end

	///////////////////////////////////////////////////////////////////////////
	// value Huffman decoding

	bool done_decoding;
	uint(size=8) value_len;
	uint(size=9) value;
	
	start_huffman: action ==>
	do
		println();
		println("start_huffman");
		done_decoding := false;
		value := 0;
		value_len := 0;
	end

	done.huffman: action ==>
	guard
		done_decoding
	do
		value := inv_value_code[value];
	end
	
	loop.huffman: action ==>
	guard
		need_bits(1)
	var
		uint(size=1) bit = selectbit(bits, 0)
	do
		value := (value << 1) | bit;
		value_len := value_len + 1;
		
		print("code_len = " + value_len + ", bit read = " + bit + ", code = ");
		print_bin(value, 9);
		
		println("invtree_code[" + value + "] = " + inv_value_code[value]);
		println("tree_len[" + inv_value_code[value] + "] = " + tree_value_len[inv_value_code[value]]);
		
		done_decoding := (value_len = tree_value_len[inv_value_code[value]]);
		bits_read(1);
	end
	
	///////////////////////////////////////////////////////////////////////////
	// value_decoded

	decoded.output: action ==> D:[value]
	guard
		value < 256
	do
		println("decoded.output");
	end

	decoded.block_end: action ==>
	guard
		value = 256
	do
		println("decoded.block_end");
	end

	decoded.length: action ==>
	do
		println("decoded.length");
	end

	///////////////////////////////////////////////////////////////////////////
	// decode length
	
	int length;
	
	uint(size=3) length_extra[29] := [
		0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1,
		2, 2, 2, 2,
		3, 3, 3, 3,
		4, 4, 4, 4,
		5, 5, 5, 5,
		0 ];
	
	uint(size=9) length_start[29] := [
		3, 4, 5, 6, 7, 8, 9, 10,
		11, 13, 15, 17,
		19, 23, 27, 31,
		35, 43, 51, 59,
		67, 83, 99, 115,
		131, 163, 195, 227,
		258 ];
	
	decode_length: action ==>
	guard
		need_bits(length_extra[value - 257])
	var
		int relative = value - 257,
		int num_extra = length_extra[value - 257]
	do
		length := length_start[relative] + selectbits(bits, 0, num_extra);
		println("relative = " + relative + ", num_extra = " + num_extra + ", length = " + length);
		bits_read(num_extra);
	end
	
	///////////////////////////////////////////////////////////////////////////
	// distance Huffman decoding

	done.distance: action ==>
	guard
		done_decoding
	do
		value := inv_dist_code[value];
	end

	loop.distance: action ==>
	guard
		need_bits(1)
	var
		uint(size=1) bit = selectbit(bits, 0)
	do
		value := (value << 1) | bit;
		value_len := value_len + 1;
		
		print("code_len = " + value_len + ", bit read = " + bit + ", code = ");
		print_bin(value, 9);
		
		println("inv_dist_code[" + value + "] = " + inv_dist_code[value]);
		println("tree_len[" + inv_dist_code[value] + "] = " + tree_dist_len[inv_dist_code[value]]);
		
		done_decoding := (value_len = tree_dist_len[inv_dist_code[value]]);
		bits_read(1);
	end

	///////////////////////////////////////////////////////////////////////////
	// decode distance
	
	int distance;
	
	uint(size=3) distance_extra[30] := [
		0, 0, 0, 0,
		1, 1,
		2, 2,
		3, 3,
		4, 4,
		5, 5,
		6, 6,
		7, 7,
		8, 8,
		9, 9,
		10, 10,
		11, 11,
		12, 12,
		13, 13 ];
	
	uint(size=9) distance_start[30] := [
		1, 2, 3, 4,
		5, 7,
		9, 13,
		17, 25,
		33, 49,
		65, 97,
		129, 193,
		257, 385,
		513, 769,
		1025, 1537,
		2049, 3073,
		4097, 6145,
		8193, 12289,
		16385, 24577 ];
	
	decode_distance: action ==>
	guard
		need_bits(distance_extra[value])
	var
		int num_extra = distance_extra[value]
	do
		distance := distance_start[value] + selectbits(bits, 0, num_extra);
		println("num_extra = " + num_extra + ", distance = " + distance);
		bits_read(num_extra);
	end

	///////////////////////////////////////////////////////////////////////////
	// FSM

	schedule fsm start:
		start (is_final) --> done;
		start (other) --> new_block;

		new_block (read.header) --> body;
		new_block (load) --> new_block;

		// decode uncompressed value
		body (uncompressed) --> uncompressed;
		uncompressed (read_uc_len) --> uncompressed_loop;
		uncompressed_loop (loop.uc) --> uncompressed_loop;
		uncompressed_loop (done.uc) --> start;

		// decode value encoded with Huffman tree
		body (fixed_huffman) --> decode_init;
		decode_init (start_huffman) --> decode;
		decode (done.huffman) --> value_decoded;
		decode (loop.huffman) --> decode;
		decode (load) --> decode;

		// do something based on decoded value
		value_decoded (decoded.output) --> body;
		value_decoded (decoded.block_end) --> start;
		value_decoded (decoded.length) --> decode_length;
		
		// decode length
		decode_length (decode_length) --> decode_distance_init;
		decode_length (load) --> decode_length;
		
		// decode distance
		decode_distance_init (start_huffman) --> decode_distance;
		decode_distance (done.distance) --> decode_init;
		decode_distance (loop.distance) --> decode_distance;
		decode_distance (load) --> decode_distance;
	end

	priority
		is_final > other;
		done > loop > read > load;
		decoded.output > decoded.block_end > decoded.length;
	end

end