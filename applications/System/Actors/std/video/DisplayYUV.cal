/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
package std.video;


actor DisplayYUV()
	uint(size=8) Byte,
	int(size=16) Width,
	int(size=16) Height
		==>
		:

	uint MAX_WIDTH = 720;
	uint MAX_HEIGHT = 576;
	uint MB_SIZE_LUMA = 16;
	uint MB_SIZE_CHROMA = 8;

	/**
	 * Displays a picture. Sizes are in (MB or pixels?). 
	 */
	native procedure displayYUV_displayPicture(uint(size=8) pictureBufferY[MAX_WIDTH * MAX_HEIGHT], uint(size=8) pictureBufferU[MAX_WIDTH * MAX_HEIGHT],
	                                           uint(size=8) pictureBufferV[MAX_WIDTH * MAX_HEIGHT], int(size=16) pictureWidth, int(size=16) pictureSize) end

	/**
	 * Inits the given display.
	 */
	native procedure displayYUV_init() end


	uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
	uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
	uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
	int (size=32) pictureSizeInMb    := 0;
	int (size=32) nbBlockGot         := 0;
	uint(size=2)  chromaComponent    := 0;
	int (size=16) pictureWidthLuma   := 0;
	int (size=16) pictureHeightLuma  := 0;
	uint(size=12) xIdxLuma;
	uint(size=32) yOffLuma;
	uint(size=12) xIdxChroma;
	uint(size=32) yOffChroma;


	initialize ==>
	do
		displayYUV_init();
	end

	getPictureSize: action
		Width  :[WidthValue],
		Height :[HeightValue]
			==>
	do
		pictureWidthLuma  := WidthValue  * 16;
		pictureHeightLuma := HeightValue * 16;
		pictureSizeInMb   := WidthValue * HeightValue;
		nbBlockGot := 0;
		xIdxLuma   := 0;
		xIdxChroma := 0;
		yOffLuma   := 0;
		yOffChroma := 0;
	end

	getPixValue.launch.Luma: action Byte :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	var
		uint(size=32) yOff := yOffLuma,
		uint(size=8)  idx  := 0
	do
		nbBlockGot      := nbBlockGot + 1;
		foreach int y in 0 .. 15
		do
			foreach int x in xIdxLuma .. xIdxLuma + 15
			do
				pictureBufferY[yOff +x] := Bytes[idx];
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma;
		end
		xIdxLuma := xIdxLuma + MB_SIZE_LUMA;
		chromaComponent := 0;
	end

	getPixValue.launch.Chroma: action Byte :[Bytes] repeat 64 ==>
	var
		uint(size=32) yOff := yOffChroma,
		uint(size=6)  idx  := 0
	do
		foreach int y in 0 .. 7
		do
			foreach int x in xIdxChroma .. xIdxChroma + 7
			do
				if(chromaComponent=0)then
					pictureBufferU[yOff + x] := Bytes[idx];
				else
					pictureBufferV[yOff + x] := Bytes[idx];
				end
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma/2;
		end
		if(chromaComponent != 0)then
			xIdxChroma := xIdxChroma + MB_SIZE_CHROMA;
			if(xIdxLuma = pictureWidthLuma)then
				xIdxLuma   := 0;
				xIdxChroma := 0;
				yOffLuma   := yOffLuma   + MB_SIZE_LUMA   * pictureWidthLuma;
				yOffChroma := yOffChroma + MB_SIZE_CHROMA * pictureWidthLuma/2;
			end
		end
		chromaComponent := 1;
	end

	displayPicture: action ==>
	guard
		nbBlockGot >= pictureSizeInMb
	do
		displayYUV_displayPicture(pictureBufferY, pictureBufferU, pictureBufferV, pictureWidthLuma, pictureHeightLuma);
	end

	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize            )--> GetLumaBlock;

		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetLumaBlock    (displayPicture            )--> GetPictureSize;

		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;

		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
	end

	priority
		getPixValue > displayPicture;
	end
end