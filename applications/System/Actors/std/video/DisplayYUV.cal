/***********************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.
***********************************************************************/
package std.video;

actor DisplayYUV()
	uint(size=8) Byte,
	int(size=16) Width,
	int(size=16) Height
		==>
		:

	native procedure displayYUV_setSize(int(size=16) pictureWidth, int(size=16) pictureSize) end
	native procedure displayYUV_displayPicture(uint(size=8) pictureBuffer[42][256], int(size=16) pictureWidth, int(size=16) pictureSize) end
	native procedure displayYUV_init() end

	uint(size=8) pictureBuffer[2280000][256];
	int(size=16) pictureWidth       := 0;
	int(size=16) pictureHeight      := 0;
	int(size=32) pictureSize        := 0;
	bool         pictureSizeChanged := false;
	int(size=32) nbBlockGot         := 0;


	initialize ==>
	do
		//DisplayYUV_init();
	end

	getPictureSize: action
		Width  :[WidthValue],
		Height :[HeightValue]
			==>
	do
		if(WidthValue != pictureWidth or HeightValue != pictureHeight) then
			pictureWidth       := WidthValue;
			pictureHeight      := HeightValue;
			pictureSizeChanged := true;
		end
		pictureSize := pictureWidth * pictureHeight;
		nbBlockGot  := 0;
	end

	getPixValue.launch.Luma: action Byte :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSize
	do
		foreach int i in 0 .. 255
		do
			pictureBuffer[nbBlockGot][i] := Bytes[i];
		end
		nbBlockGot := nbBlockGot + 1;
	end

	getPixValue.launch.Chroma: action Byte :[Bytes] repeat 64 ==>
	do
		foreach int i in 0 .. 63
		do
			pictureBuffer[nbBlockGot - 1][i] := Bytes[i];
		end
	end

	displayPicture: action ==>
	guard
		nbBlockGot >= pictureSize
	do
		if(pictureSizeChanged)then
			//displayYUV_setSize(width,height);
		end
		//displayYUV_displayPicture(pictureBuffer,width,height);
	end

	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize            )--> GetLumaBlock;

		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetLumaBlock    (displayPicture            )--> GetPictureSize;

		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;

		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
	end
	priority
		getPixValue > displayPicture;
	end
end