package std.util;

unit BitOps :

	/**
	 * standard bitop functions
	 */
	function bitand(int a, int b) --> int : a & b end
	function bitxor(int a, int b) --> int : a ^ b end
	function bitor(int a, int b) --> int : a | b end
	function rshift(int a, int b) --> int : a >> b end
	function lshift(int a, int b) --> int : a << b end
    /**
	 * select one bit from an integer
	 */
	function selectbit(int v, int n) --> int :
		selectbits(v, n, 1)
	end

	/**
	 * selectbits(v, from, nbits) returns a number of "nbits" bits starting at
	 * position "from" in the number "v".
	 * Example: selectbits(0x1F, 1, 4) returns 0x1E
	 */
	function selectbits(int v, int from, int nbits) --> int
	var
		int maskFull = (1 << (from + nbits)) - 1,
		int maskStart = (1 << from) - 1
	:
		v & (maskFull - maskStart)
	end

	/**
	 * concatbits(v1, s1, v2, s2) returns the concatenation of v1 and v2,
	 * where s1 and s2 are the number of bits of v1 and v2 respectively.
	 */
	function concatbits(int v1, int s1, int v2, int s2) --> int :
		(selectbits(v1, 0, s1) << s2) | selectbits(v2, 0, s2)
	end

end