group Java_actor : C_actor;

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(portName) ::= <<
private IntFifo fifo_$portName$;

>>

setFifo(portName) ::= <<
if ("$portName$".equals(portName)) {
	fifo_$portName$ = fifo;
} else 
>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [][]...[]
// does not output anything if $value$ is empty
// differs from inherited listSize because this one does not print any size
// information.
listDim(value) ::= <<
$value : {[]} $
>>

// a variable definition
// called by "function parameter", or "state variable with value"
vardef(var) ::= <<
$var.type$$listDim(var.size)$ $var.name$
>>

// a variable definition with initialization
// called by "local variable", or "state variable with no value"
vardefInit(var) ::= <<
$if(var.isPort)$
$var.type$[] $var.name$ = new $var.type$$listSize(var.size)$
$else$
$var.type$$listDim(var.size)$ $var.name$$if(var.size)$
 = new $var.type$$listSize(var.size)$
$endif$
$endif$>>

// a state variable
stateVar(vardef, value) ::= <<
$if(value)$
private $vardef(vardef)$ = $value$;$\n\n$
$else$
private $vardefInit(vardef)$;$\n\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

// hasTokens node
hasTokensNode(var, actorName, fifoName, numTokens) ::= <<
$var$ = fifo_$fifoName$.hasTokens($numTokens$);

>>

// peek node
peekNode(var, actorName, fifoName, numTokens) ::= <<
fifo_$fifoName$.peek($var$);

>>

// read node
readNode(var, actorName, fifoName, numTokens) ::= <<
fifo_$fifoName$.get($var$);

>>

// write node
writeNode(var, actorName, fifoName, numTokens) ::= <<
fifo_$fifoName$.put($var$);

>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

proc(name, type, parameters, locals, nodes) ::= <<

private $type$ $name$($parameters:vardef(); wrap, anchor, separator=", "$) {
$if(locals)$
	$locals: {$vardefInit(it)$;$\n$}$

$endif$
	$nodes$}

>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
$pattern.keys:{port|fifo_$port$.hasRoom($pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$action.tag$();
res = true;
i++;
>>

actionTest(action) ::= <<
if (isSchedulable_$action.tag$()) {
	$if(action.outputPattern)$
	if ($outputPattern(action.outputPattern)$) {
		$actionCall(action)$
	}
	$else$
	$actionCall(action)$
	$endif$
}>>

schedulingTest(actions) ::= <<
$actions: actionTest(); separator=" else "$
>>

scheduler(actions) ::= <<
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		$if(actions)$
		$schedulingTest(actions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(nextState) ::= <<
$nextState.action.tag$();
_FSM_state = States.s_$nextState.targetState$;
res = true;
>>

actionTestState(nextState) ::= <<
if (isSchedulable_$nextState.action.tag$()) {
	$if(nextState.action.outputPattern)$
	if ($outputPattern(nextState.action.outputPattern)$) {
		$actionCallState(nextState)$
	}
	$else$
	$actionCallState(nextState)$
	$endif$
}>>

schedulingTestState(nextStates) ::= <<
$nextStates: actionTestState(); separator=" else "$
>>

stateScheduler(transition) ::= <<
private boolean $transition.sourceState$_state_scheduler() {
	boolean res = false;
	$schedulingTestState(transition.nextStateInfo)$
	return res;
}

>>

switch(transitions) ::= <<
switch (_FSM_state) {
$transitions: {case s_$it.sourceState$:
	res = $it.sourceState$_state_scheduler();
	if (res) {
		i++;
	}
	break;
}$
default:
	System.out.println("unknown state: %s\n" + _FSM_state);
	break;
}
>>

schedulerFSM(actions, fsm) ::= <<
private enum States {
	$fsm.states : {s_$it$}; separator=",\n"$
};

private States _FSM_state = States.s_$fsm.initialState$;

$if(actions)$
private boolean outside_FSM_scheduler() {
	boolean res = false;
	int i = 0;
	$schedulingTest(actions)$
	return res;
}


$endif$
$fsm.transitions: stateScheduler(); separator="\n"$
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		$if(actions)$
		if (outside_FSM_scheduler()) {
			res = true;
			i++;
		} else {
			$switch(fsm.transitions)$
		}
		$else$
		$switch(fsm.transitions)$
		$endif$
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(name, inputs, outputs, stateVars, procs,
      actions, initializes, scheduler, initialize) ::= <<
/**
 * Generated from "$name$"
 */
package net.sf.orcc.generated;

import java.util.HashMap;
import java.util.Map;

import net.sf.orcc.oj.IActor;
import net.sf.orcc.oj.IntFifo;

public class Actor_$name$ implements IActor {

	private Map<String, IntFifo> fifos;

	// Input FIFOs
	$inputs: fifo()$
	// Output FIFOs
	$outputs: fifo()$
	// State variables of the actor
	$stateVars$
	
	public Actor_$name$() {
		fifos = new HashMap<String, IntFifo>();
	}
	
	// Functions/procedures
	$procs$
	// Actions
	$actions$
$if(initializes)$
	// Initializes
	$initializes$
$endif$
	@Override
	public void initialize() {
$if(initialize)$
		boolean res = true;
		int i = 0;

		$schedulingTest(initialize)$
$endif$
	}

	@Override
	public void setFifo(String portName, IntFifo fifo) {
		$inputs : setFifo()$$outputs : setFifo()${
			String msg = "unknown port \"" + portName + "\"";
			throw new IllegalArgumentException(msg);
		}
	}

	// Action scheduler
$if(scheduler.fsm)$
	$schedulerFSM(actions=scheduler.actions, fsm=scheduler.fsm)$
$else$
	$scheduler(scheduler.actions)$
$endif$

}

>>
