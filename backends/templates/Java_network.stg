group Java_network;

setFifo(fifo) ::= <<
actor_$fifo.source$.setFifo("$fifo.src_port$", fifo_$fifo.count$);
actor_$fifo.target$.setFifo("$fifo.tgt_port$", fifo_$fifo.count$);

>>

network(debugFifos, name, size, broadcasts, initializes, instances, connections) ::= <<
/**
 * Generated from "$name$"
 */
package net.sf.orcc.generated;

import net.sf.orcc.oj.CLIParameters;
import net.sf.orcc.oj.FifoManager;
import net.sf.orcc.oj.IntFifo;
import net.sf.orcc.oj.actors.Actor_display;
import net.sf.orcc.oj.actors.Actor_source;
import net.sf.orcc.oj.actors.Broadcast;
import net.sf.orcc.oj.actors.IActor;
import net.sf.orcc.oj.actors.IScheduler;

public class Network_$name$ implements IScheduler {

	public static final int SIZE = $size$;

	// FIFO declarations
	$connections:{fifo|private IntFifo fifo_$fifo.count$;}; separator="\n"$

	// Actors
	$instances: { inst | private IActor actor_$inst$;}; separator="\n"$

	// Broadcasts
	$broadcasts: { bcast | private Broadcast actor_$bcast.id$;}; separator="\n"$

	@Override
	public void initialize() {
		$instances: { inst | actor_$inst$ = new Actor_$inst$();}; separator="\n"$

		$broadcasts: { bcast | actor_$bcast.id$ = new Broadcast($length(bcast.num)$);}; separator="\n"$

		$connections:{ fifo | fifo_$fifo.count$ = new IntFifo($fifo.size$);}; separator="\n"$

		$connections:setFifo()$
	}

	@Override
	public void schedule() {
		$initializes: { init | actor_$init$.initialize();}; separator="\n"$

		int i = 1;
		while (i > 0) {
			i = 0;
			$instances: { inst | i += actor_$inst$.schedule();$\n$}$
			$broadcasts: { bcast | i += actor_$bcast.id$.schedule();}; separator="\n"$

			FifoManager.getInstance().emptyFifos();
		}
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		CLIParameters.getInstance().setArguments(args);
		IScheduler scheduler = new Network_$name$();
		scheduler.initialize();
		scheduler.schedule();
		Actor_display.closeDisplay();
	}
}

>>

