group C_actor;

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

fifo(port) ::= <<
$actorName$_$port.name$,
>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if $value$ is empty
listSize(value) ::= <<
$value : {[$it$]} $
>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

variableDeclaration(variable) ::= <<
$if(variable.port)$
$variable.type$ *$variable$
$else$
$variable.type$ $variable$$listSize(variable.type.dimensions)$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////
stateVar(variable) ::= <<
static $variableDeclaration(variable)$;$\n$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

Assign(assign) ::= <<
$assign.target$ = $assign.value$;

>>

Call(call) ::= <<
$if(call.target)$
$call.target$ = 
$endif$
$call.procedure$($call.parameters; separator=", "$);

>>

Decrement(decrement) ::= <<
$decrement.target$--;

>>

HasTokens(hasTokens) ::= <<
$hasTokens.target$ = hasTokens($actorName$_$hasTokens.port$, $hasTokens.numTokens$);

>>

Increment(increment) ::= <<
$increment.target$++;

>>

Load(load) ::= <<
$load.target$ = $load.source$$load.indexes : {[$it$]}$;

>>

Peek(peek) ::= <<
$peek.target$ = getPeekPtr($actorName$_$peek.port$, $peek.numTokens$);

>>

Read(read) ::= <<
$read.target$ = getReadPtr($actorName$_$read.port$, $read.numTokens$);

>>

ReadEnd(readEnd) ::= <<
setReadEnd($actorName$_$readEnd.port$);

>>

Return(return) ::= <<
$if(return.value)$
return $return.value$;

$endif$
>>

SelfAssignment(selfAssign) ::= <<
$selfAssign.target$ $selfAssign.op.text$= $selfAssign.value$;

>>

Store(store) ::= <<
$store.target$$store.indexes : {[$it$]}$ = $store.value$;

>>

Write(write) ::= <<
$write.target$ = getWritePtr($actorName$_$write.port$, $write.numTokens$);

>>

WriteEnd(writeEnd) ::= <<
setWriteEnd($actorName$_$writeEnd.port$);

>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

instructions(instructions) ::= <<
$instructions: {$(it.class.simpleName)(it)$}$
>>

nodes(nodes) ::= <<
$nodes: {$(it.class.simpleName)(it)$}$
>>

// if node
BlockNode(blockNode) ::= <<
$instructions(blockNode.instructions)$
>>

// if node
IfNode(ifNode) ::= <<
if ($ifNode.value$) {
	$nodes(ifNode.thenNodes)$}$if(ifNode.elseNodes)$ else {
	$nodes(ifNode.elseNodes)$}$endif$
$BlockNode(ifNode.joinNode)$
>>

// while node
WhileNode(whileNode) ::= <<
while ($whileNode.value$) {
	$nodes(whileNode.nodes)$}
$BlockNode(whileNode.joinNode)$
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<

$procedure.returnType$ $procedure$($procedure.parameters.list: {$variableDeclaration(it)$}; wrap, anchor, separator=", "$);

>>

///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

action(action) ::= <<
$procedure(action.body)$$procedure(action.scheduler)$
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
$pattern.keys:{port|hasRoom($actorName$_$port$, $pattern.(port)$)}; separator=" && "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

scheduler(actions) ::= <<
void scheduler();
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

stateScheduler(transition) ::= <<
bool $transition.sourceState$_state_scheduler();

>>

schedulerFSM(actions, fsm) ::= <<
enum states 
{
	$fsm.states : {s_$it$}; separator=",\n"$
};

int _FSM_state;


$if(actions)$
bool outside_FSM_scheduler();

$endif$
$fsm.transitions: stateScheduler(transition=it); separator="\n"$
void scheduler();

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actor(actorName, actor) ::= <<
// Generated from "$actor.name$"

#ifndef __ACTOR_$actorName$_H__
#define __ACTOR_$actorName$_H__

#include <iostream>

#include "orcc/actoraka.h"

////////////////////////////////////////////////////////////////////////////////
// Input FIFOs
enum
{
	$actor.inputs.list: fifo(it); separator="\n"$
	$actorName$_IPORT_SIZE
};
////////////////////////////////////////////////////////////////////////////////
// Output FIFOs
enum
{
	$actor.outputs.list: fifo(it); separator="\n"$
	$actorName$_OPORT_SIZE
};


class actor_$actorName$ : public ActorGen 
{

public:
	// Default constructor
	actor_$actorName$();
	
	void initializeActor();

////////////////////////////////////////////////////////////////////////////////
// State variables of the actor
$!	$actor.stateVars.list: stateVar(it)$ !$

private:
////////////////////////////////////////////////////////////////////////////////
// Functions/procedures
	$actor.procs.list: procedure(it)$
////////////////////////////////////////////////////////////////////////////////
// Actions
	$actor.actions: action(it)$

public:
	$if(actor.initializes)$

////////////////////////////////////////////////////////////////////////////////
// Initializes
	$actor.initializes: action(it)$
	void initialize();

$endif$
////////////////////////////////////////////////////////////////////////////////
// Action scheduler
$if(actor.actionScheduler.fsm)$
	$schedulerFSM(actions=actor.actionScheduler.actions, fsm=actor.actionScheduler.fsm)$
$else$
	$scheduler(actions=actor.actionScheduler.actions)$
$endif$

};

#endif

>>
