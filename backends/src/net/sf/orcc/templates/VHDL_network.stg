group VHDL_network;

///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

assignFifo(source, sourcePort, target, targetPort, count) ::= <<
entity work.fifo_$count$ is 
generic map (
depth => $edge.size$,
width => $targetPort.type$ );
port map (
  fifo_$count$_write    => $source.id$_$sourcePort.name$_write, 
  fifo_$count$_data_in  => $source.id$_$sourcePort.name$_data_in, 
  fifo_$count$_full     => $source.id$_$sourcePort.name$_full, 
  fifo_$count$_read     => $target.id$_$targetPort.name$_read, 
  fifo_$count$_data_out => $target.id$_$targetPort.name$_data_out, 
  fifo_$count$_empty    => $target.id$_$targetPort.name$_empty, 
  clock            => clock, 
  reset_n          => reset_n); 


>>

tryAssignFifo(edge, src, tgt) ::= <<
$if (src.instance)$
$if (tgt.instance)$
$assignFifo(
  source=src.instance, sourcePort=edge.source,
  target=tgt.instance, targetPort=edge.target,
  count=network.connectionMap.(edge))$
$endif$
$endif$
>>

assignFifos(edges) ::= <<
$edges: tryAssignFifo(
  edge=it, src=network.sourceMap.(it), tgt=network.targetMap.(it)) $
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to scheduler()

printActorPorts(instance) ::= <<
$if (instance.actor)$
$instance.actor.inputs.list: {$it$ => $it$}; separator=", "$
$endif$
>>

printScheduler(instance) ::= <<
entity work.$it.id$ is
port map (
  $it.id$_write    => $it.id$_$it.network$_write, 
  clock            => clock, 
  reset_n          => reset_n
  $printActorPorts(instance)$);

>>

printSchedulers(instances) ::= <<
$instances: printScheduler()$
>>

///////////////////////////////////////////////////////////////////////////////
// print network
network(debugFifos, fifoSize, network) ::= <<
------------------------------------------------------------------------------
-- Generated from $network.name$ actor
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity $network.name$ is
  port (
  -- Inputs
  clock   : in std_logic;
  reset_n : in std_logic);  
end $network.name$;


architecture rtl_$network.name$ of $network.name$ is

  ---------------------------------------------------------------------------
  -- Signal & constant declaration
  ---------------------------------------------------------------------------

  ---------------------------------------------------------------------------
  -- Actors instantiation 
  $printSchedulers(network.instances)$

  ---------------------------------------------------------------------------
  -- FIFOs instantiation 
  $assignFifos(network.connections)$ 
  ---------------------------------------------------------------------------

>>

