group VHDL_actor;

fifo_in(port) ::= <<
$actorName$_$port.name$_data  : in $port.type$;
$actorName$_$port.name$_empty : in std_logic;
$actorName$_$port.name$_read  : out std_logic;

>>

fifo_out(port) ::= <<
$actorName$_$port.name$_full  : in std_logic;
$if(last(port.name))$
$actorName$_$port.name$_data  : out $port.type$;
$actorName$_$port.name$_write : out std_logic
$else$
$actorName$_$port.name$_data  : out $port.type$;
$actorName$_$port.name$_write : out std_logic;
$endif$
>>

fifo_in_init(port) ::=<<
$actorName$_$port.name$_read <= '0';$"\n"$
>>
fifo_out_init(port) ::=<<
$actorName$_$port.name$_write <= '0';$"\n"$
>>
///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if $value$ is empty
listSize(value) ::= <<
$value : {[$it$]} $
>>

// the values of a list: {val1, val2, ..., valn}
listValue(value) ::= <<
{$value; wrap, separator=", "$}
>>

signalDeclaration(variable) ::= <<
$if(variable.port)$
signal $variable$ : $variable.type$
$else$
  $if(!(listSize(variable.type.dimensions)))$
signal $variable$ : $variable.type$ $listSize(variable.type.dimensions)$
  $else$
type memory_type_$variable$ is array ($listSize(variable.type.dimensions)$ -1 downto 0) of $variable.type$;
signal $variable$ : memory_type_$variable$
  $endif$
$endif$
>>

variableDeclaration(variable) ::= <<
$variable.type.dimensions$
$if(variable.port)$
variable $variable$ : $variable.type$
$else$
  $if(!(listSize(variable.type.dimensions)))$
variable $variable$ : $variable.type$ $listSize(variable.type.dimensions)$
  $else$
-- error !!!!! type memory_type_$variable$ is array ($listSize(variable.type.dimensions)$ -1 downto 0) of $variable.type$;
-- error !!!!! variable $variable$ : memory_type_$variable$
  $endif$
$endif$
>>


///////////////////////////////////////////////////////////////////////////////
// Constant Signal
///////////////////////////////////////////////////////////////////////////////
stateConst(variable) ::= <<
$if(variable.constantValue)$
signal $variable$  : $variable.type$ := $variable.constantValue$;$\n$
$else$
$signalDeclaration(variable)$;$\n$
$endif$
>>

InitConst(variable) ::= <<
$if(!variable.constantValue)$
$variable$ <= 0;

$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

Assign(assign) ::= <<
$assign.target$ := $assign.value$;

>>

Call(call) ::= <<
$if(call.target)$
$call.target$ = 
$endif$
$call.procedure$($call.parameters; separator=", "$);

>>

//$hasTokens.target$ = hasTokens($actorName$_$hasTokens.port$, $hasTokens.numTokens$);
HasTokens(hasTokens) ::= <<
$hasTokens.target$ := not $actorName$_$hasTokens.port$_empty;

>>

Load(load) ::= <<
$if(!(load.indexes : {$it$}))$
$load.target$ := $load.source$; 

$else$
-- tab not implemented yet
$load.target$ := $load.source$;   --$load.indexes : {$it$}$

$endif$
>>

Peek(peek) ::= <<
-- $peek.target$ = getPeekPtr($actorName$_$peek.port$, $peek.numTokens$);

>>
// $if(peek.numTokens)$
// $peek.target$ := $actorName$_$peek.port$_data;
// read_FIFO_$actorName$_$peek.port$ <= '1';
// $else$
// -- ERROR multiple token : $peek.numTokens$ 
// $endif$


Read(read) ::= <<
$if(read.unit)$
$read.target$ := $actorName$_$read.port$_data;
$actorName$_$read.port$_read <= '1';
$else$
-- read multiple token not coded yet
$endif$


>>

ReadEnd(readEnd) ::= <<>>

/**
 * calls are inlined, so the only returns still there are in the
 * isSchedulable procedures
 */
Return(return) ::= <<
$if(return.value)$
$procedure$_go <= $return.value$;

$endif$
>>

Store(store) ::= <<
$if(!(store.indexes : {$it$}))$
$store.target$ <= $store.value$;

$else$
-- tab not implemented yet
$store.target$ := $store.value$; -- [$store.indexes : {$it$}$]

$endif$

>>

Write(write) ::= <<
$actorName$_$write.port$_data <= $write.target$;
$actorName$_$write.port$_write <= '1';

>>

WriteEnd(writeEnd) ::= <<>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

instructions(instructions) ::= <<
$instructions: {$(it.class.simpleName)(it)$}$
>>

nodes(nodes) ::= <<
$nodes: {$(it.class.simpleName)(it)$}$
>>

// if node
BlockNode(blockNode) ::= <<
$instructions(blockNode.instructions)$
>>

// if node
IfNode(ifNode) ::= <<
if ($ifNode.value$) then
	$nodes(ifNode.thenNodes)$$if(ifNode.elseNodes)$else
	$nodes(ifNode.elseNodes)$end if;	
	$endif$
$BlockNode(ifNode.joinNode)$
$endif$
>>

// while node
WhileNode(whileNode) ::= <<
while ($whileNode.value$) {
	$nodes(whileNode.nodes)$}
$BlockNode(whileNode.joinNode)$
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<
$procedure.nodes: {$(it.class.simpleName)(it)$}$
>>

PrintLocals(procedure) ::= <<
$if(procedure.locals.list)$
$procedure.locals.list: {$variableDeclaration(it)$;$\n$}$
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////
action(action) ::= <<
$action$_proc : process (reset_n, clock) is
  $PrintLocals(action.scheduler)$
begin
  if reset_n = '0' then 
    -- Todo
  elsif rising_edge(clock) then
    $procedure(action.scheduler)$
  end if;
end process $action$_proc;

>>


PrintActionLocals(action) ::= <<
$PrintLocals(action.body)$

>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
$pattern.keys:{port|$actorName$_$port$_full = '0'}; separator=" and "$
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
$procedure(action.body)$
>>

actionTest(action) ::= <<
if (isSchedulable_$action$_go = '1') then
$if(action.outputPattern)$
if ($outputPattern(pattern=action.outputPattern)$) then
  $actionCall(action)$
end if;
$else$
$procedure(action.body)$
$endif$

end if;

>>

schedulingTest(actions) ::= <<
$actions: actionTest(action=it); separator="\n--\n"$

>>


///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

schedulerFSM(actions, fsm) ::= <<
$if(actions)$
static int outside_FSM_scheduler() {
	int res = 0;
	int i = 0;
	$schedulingTest(actions)$
	return res;
}
$endif$	
$if(actions)$
if (outside_FSM_scheduler()) {
	res = 1;
	i++;
} else {
	$switch(fsm.transitions)$
}
$else$
$switch(fsm.transitions)$
$endif$
>>

actionCallState(nextState) ::= <<
$procedure(nextState.action.body)$FSM = s_$nextState.targetState$;
>>

actionTestState(nextState) ::= <<
(isSchedulable_$nextState.action$_go = '1')
  $if(nextState.action.outputPattern)$
  if ($outputPattern(nextState.action.outputPattern)$) {
    $actionCallState(nextState)$
  }
  $else$
  $actionCallState(nextState)$
  $endif$

>>

schedulingTestState(nextStates) ::= <<
if $nextStates: actionTestState(nextState=it); separator="\n--\nelsif"$
end if;

>>

stateScheduler(transition) ::= <<
-- $transition.sourceState$_state_scheduler
	$schedulingTestState(nextStates=transition.nextStateInfo)$

>>

switch(transitions) ::= <<
$transitions: {when s_$it.sourceState$ =>
	$stateScheduler(transition=it)$}$
>>


DefineFSM(actions, fsm) ::= <<
$if(fsm)$
type FSM_type is ($first(fsm.states)$, $rest(fsm.states) : {$it$}; separator=","$);
signal FSM : FSM_type;
$endif$

>>

InitFSM(fsm) ::= <<
$if(fsm)$
FSM <= $fsm.initialState$;
$else$
FSM <= compute;
$endif$
>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////
actor(actorName, actor) ::= <<
------------------------------------------------------------------------------
-- Generated from $actor.name$ actor
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.orcc_package.all;

entity $actor.name$ is
  port (
  -- Inputs
  clock   : in std_logic;
  reset_n : in std_logic;
  $actor.inputs.list: fifo_in(it)$-- Outputs
  $actor.outputs.list: fifo_out(it)$);
end $actor.name$;


architecture rtl_$actor.name$ of $actor.name$ is 

  ---------------------------------------------------------------------------
  -- Signal & constant declaration
  $actor.stateVars.list: stateConst(it)$
  $actor.actions: {action|signal $action.scheduler$_go : std_logic;}; separator="\n"$
  
  -- FSM
  $DefineFSM(actions=actor.actionScheduler.actions, fsm=actor.actionScheduler.fsm)$
  ---------------------------------------------------------------------------

begin

$if(actor.actionScheduler.actions)$
  $actor.name$_proc : process (reset_n, clock) is
    $actor.actions: PrintActionLocals(it)$  --
  begin
    if reset_n = '0' then 
      $actor.inputs.list: fifo_in_init(it)$$actor.outputs.list: fifo_out_init(it)$      --
    elsif rising_edge(clock) then
      $actor.inputs.list: fifo_in_init(it)$$actor.outputs.list: fifo_out_init(it)$      --
      $schedulingTest(actor.actionScheduler.actions)$
    end if;
  end process $actor.name$_proc;


  $actor.actions: action(it); separator="\n\n"$
$else$
  $if(actor.actionScheduler.fsm)$
  $schedulerFSM(actions=actor.actionScheduler.actions, fsm=actor.actionScheduler.fsm)$
  $actor.actions: action(it)$
  $endif$
$endif$

end architecture rtl_$actor.name$;
>>