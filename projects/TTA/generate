#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, IRISA
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#   * Neither the name of IRISA nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# @author Herve Yviquel

import sys
import os
import time
import getopt
import shutil
from orcc_ import *

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hcsgx:v", ["help", "verbose", "compile", "simulate", "generate"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    for o, a in opts:
        if o in ("-v", "--verbose"):
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()

    for o, a in opts:
        if o in ("-c", "--compile"):
            compile()

    for o, a in opts:
        if o in ("-s", "--simulate"):
            simulate()
            #print "Simulation is currently broken."

    for o, a in opts:
        if o in ("-g", "--generate"):
            generate()


def usage():
    print "Open RVC-CAL Compiler - TTA backend"
    print "generate - Software/Hardware Generator for Transport Trigger Architecture"
    print "Usage: generate [options]"
    print ""
    print "Options:"
    print "-c, --compile  \t Compile the application from the generated LLVM assembly code into TTA binary"
    print "-g, --generate \t Generate the VHDL files of the TTA processors"
    print "-s, --simulate \t (BROKEN) Simulate the generated code with the TCE simulator"



def compile():
    start = time.time()

    print "*********************************************************************"
    print "* Compile the application for TTA"
    print "*********************************************************************"

    for instance in instances:
        print ">> Instance " + instance.id + "."
        instance.compile(srcPath, libPath)

    print "* Compilation of %d instances done in %f seconds." % (len(instances), time.time() - start)


def simulate():
    start = time.time()

    print "*********************************************************************"
    print "* Simulate the execution of the application on  each TTA"
    print "*********************************************************************"

    for instance in instances:
        print ">> Instance " + instance.id + "."
        instance.simulate(srcPath)

    print "* Simulation of %d instances done in %f seconds." % (len(instances), time.time() - start)


def generate():
    start = time.time()

    print "*********************************************************************"
    print "* Generate the TTA processors"
    print "*********************************************************************"
    
    print "* Initialize the generation."
    shutil.copy(os.path.join(srcPath, "top.vhd"), buildPath)
    shutil.copy(os.path.join(srcPath, "top.qsf"), buildPath)
    shutil.copy(os.path.join(srcPath, "top.qpf"), buildPath)
    iromAddrList = []
    dramAddrList = []
    
    for instance in instances:
        instance.initializeMemories(srcPath)
        iromAddrList.append(instance.irom.getAddr())
        dramAddrList.append(instance.dram.getAddr())
    
    iromAddrMax = max(iromAddrList)
    dramAddrMax = max(dramAddrList)
    
    shutil.rmtree(os.path.join(buildPath, "others"), ignore_errors=True)
    shutil.copytree(os.path.join(libPath, "others"), os.path.join(buildPath, "others"))
    
    for instance in instances:
        print ">> Instance " + instance.id + "."
        instance.generate(srcPath, buildPath, libPath, pylibPath, iromAddrMax, dramAddrMax)

    print "* Generation of %d instances done in %f seconds." % (len(instances), time.time() - start)


# Get useful path
pathname = os.path.dirname(sys.argv[0])
scriptPath = os.path.abspath(pathname)
srcPath = os.path.join(scriptPath, "generated")
buildPath = os.path.join(scriptPath, "build-generated")
libPath = os.path.join(os.path.dirname(os.path.dirname(scriptPath)), "libraries", "TTA")
pylibPath = os.path.join(scriptPath, "orcc_")

# Add orcc_ to python path
sys.path.append(pylibPath)

# Import list of instances
import_string = "from generated.informations import instances"
exec(import_string)

main()
