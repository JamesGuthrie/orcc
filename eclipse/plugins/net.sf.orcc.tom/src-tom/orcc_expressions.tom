%include { orcc_terminals.tom }
%include { int.tom }
%include { float.tom }

%op Expression add( e1 : Expression,  e2 : Expression, type : Type ) {
	is_fsym(t) {($t instanceof net.sf.orcc.ir.ExprBinary) && ((net.sf.orcc.ir.ExprBinary) $t).getOp() == OpBinary.PLUS }
	get_slot(e1, t) {((net.sf.orcc.ir.ExprBinary)$t).getE1() }
	get_slot(e2, t) {((net.sf.orcc.ir.ExprBinary)$t).getE2() }
	get_slot(type, t) {((net.sf.orcc.ir.ExprBinary)$t).getType() }
	make(_e1, _e2, _type) {
		net.sf.orcc.ir.impl.IrFactoryImpl.eINSTANCE.createExprBinary($_e1, OpBinary.PLUS, $_e2, $_type)
	}
}

%op Expression exprVar( value : Var ) {
	is_fsym(t) { $t instanceof ExprVar }
	get_slot(value, t) {((net.sf.orcc.ir.ExprVar)$t).getValue() }
	make(_value) {
		net.sf.orcc.ir.IrFactory.eINSTANCE.createExprVar(_value)
	}
}

%op Expression exprInt( value : int ) {
	is_fsym(t) { $t instanceof ExprInt }
	get_slot(value, t) {((net.sf.orcc.ir.ExprInt)$t).getValue().intValue() }
	make(_value) {
		net.sf.orcc.ir.IrFactory.eINSTANCE.createExprInt(_value)
	}
}

%op Expression exprBool( value : boolean ) {
	is_fsym(t) { $t instanceof ExprBool }
	get_slot(value, t) {((net.sf.orcc.ir.ExprBool)$t).getValue() }
	make(_value) {
		net.sf.orcc.ir.IrFactory.eINSTANCE.createExprBool(_value)
	}
}

%op Expression exprFloat( value : float ) {
	is_fsym(t) { $t instanceof ExprFloat }
	get_slot(value, t) {((net.sf.orcc.ir.ExprFloat)$t).getValue() }
	make(_value) {
		net.sf.orcc.ir.IrFactory.eINSTANCE.createExprFloat(_value)
	}
}

%op Expression exprList( value : ExpressionL ) {
	is_fsym(t) { $t instanceof ExprList }
	get_slot(value, t) {((net.sf.orcc.ir.ExprList)$t).getValue() }
	make(_value) {
		net.sf.orcc.ir.IrFactory.eINSTANCE.createExprFloat(_value)
	}
}

