package net.sf.orcc.tom.transform;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.*;

import net.sf.orcc.df.*;
import net.sf.orcc.ir.*;
import net.sf.orcc.util.OrccLogger;

public class LiteralIntegersAdder {

	private static boolean tom_equal_term_char(char t1, char t2) {return  t1==t2 ;}private static boolean tom_is_sort_char(char t) {return  true ;} private static boolean tom_equal_term_String(String t1, String t2) {return  t1.equals(t2) ;}private static boolean tom_is_sort_String(String t) {return  t instanceof String ;} private static boolean tom_equal_term_boolean(boolean t1, boolean t2) {return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) {return  true ;} private static boolean tom_equal_term_int(int t1, int t2) {return  t1==t2 ;}private static boolean tom_is_sort_int(int t) {return  true ;} private static boolean tom_equal_term_long(long t1, long t2) {return  t1==t2 ;}private static boolean tom_is_sort_long(long t) {return  true ;} private static boolean tom_equal_term_float(float t1, float t2) {return  t1==t2 ;}private static boolean tom_is_sort_float(float t) {return  true ;} private static boolean tom_equal_term_double(double t1, double t2) {return  t1==t2 ;}private static boolean tom_is_sort_double(double t) {return  true ;}   private static <O> EList<O> enforce(EList l) {   return l; }  private static <O> EList<O> append(O e, EList<O> l) {        l.add(e);        return l; } private static boolean tom_equal_term_Block(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Block(Object t) {return  t instanceof net.sf.orcc.ir.Block;}private static boolean tom_equal_term_BlockL(Object l1, Object l2) {return (l1!=null && l1.equals(l2)) || l1==l2 ;}private static boolean tom_is_sort_BlockL(Object t) {return  t instanceof EList<?> && (((EList<net.sf.orcc.ir.Block>)t).size() == 0 ||
              (((EList<net.sf.orcc.ir.Block>)t).size() > 0 && 
              ((EList<net.sf.orcc.ir.Block>)t).get(0) instanceof net.sf.orcc.ir.Block));}private static boolean tom_is_fun_sym_BlockL( EList<net.sf.orcc.ir.Block>  t) {return  t instanceof EList<?> && 
              (((EList<net.sf.orcc.ir.Block>)t).size() == 0 
              || (((EList<net.sf.orcc.ir.Block>)t).size()>0 && ((EList<net.sf.orcc.ir.Block>)t).get(0) instanceof net.sf.orcc.ir.Block));}private static  EList<net.sf.orcc.ir.Block>  tom_empty_array_BlockL(int n) { return  new BasicEList<net.sf.orcc.ir.Block>(n) ;}private static  EList<net.sf.orcc.ir.Block>  tom_cons_array_BlockL( net.sf.orcc.ir.Block  e,  EList<net.sf.orcc.ir.Block>  l) { return  append(e,l) ;}private static  net.sf.orcc.ir.Block  tom_get_element_BlockL_BlockL( EList<net.sf.orcc.ir.Block>  l, int n) {return  l.get(n) ;}private static int tom_get_size_BlockL_BlockL( EList<net.sf.orcc.ir.Block>  l) {return  l.size() ;}   private static   EList<net.sf.orcc.ir.Block>  tom_get_slice_BlockL( EList<net.sf.orcc.ir.Block>  subject, int begin, int end) {      EList<net.sf.orcc.ir.Block>  result =  new BasicEList<net.sf.orcc.ir.Block>(end-begin) ;     while(begin!=end) {       result =  append( subject.get(begin) ,result) ;       begin++;     }     return result;   }    private static   EList<net.sf.orcc.ir.Block>  tom_append_array_BlockL( EList<net.sf.orcc.ir.Block>  l2,  EList<net.sf.orcc.ir.Block>  l1) {     int size1 =  l1.size() ;     int size2 =  l2.size() ;     int index;      EList<net.sf.orcc.ir.Block>  result =  new BasicEList<net.sf.orcc.ir.Block>(size1+size2) ;     index=size1;     while(index >0) {       result =  append( l1.get(size1-index) ,result) ;       index--;     }      index=size2;     while(index > 0) {       result =  append( l2.get(size2-index) ,result) ;       index--;     }     return result;   }private static boolean tom_equal_term_BlockBasic(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_BlockBasic(Object t) {return  t instanceof net.sf.orcc.ir.BlockBasic ;}private static boolean tom_equal_term_BlockIf(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_BlockIf(Object t) {return  t instanceof net.sf.orcc.ir.BlockIf ;}private static boolean tom_equal_term_BlockWhile(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_BlockWhile(Object t) {return  t instanceof net.sf.orcc.ir.BlockWhile ;}private static boolean tom_equal_term_Instruction(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Instruction(Object t) {return  t instanceof net.sf.orcc.ir.Instruction ;}private static boolean tom_equal_term_InstructionL(Object l1, Object l2) {return (l1!=null && l1.equals(l2)) || l1==l2 ;}private static boolean tom_is_sort_InstructionL(Object t) {return  t instanceof EList<?> && (((EList<net.sf.orcc.ir.Instruction>)t).size() == 0 ||
              (((EList<net.sf.orcc.ir.Instruction>)t).size() > 0 && 
              ((EList<net.sf.orcc.ir.Instruction>)t).get(0) instanceof net.sf.orcc.ir.Instruction));}private static boolean tom_is_fun_sym_InstructionL( EList<net.sf.orcc.ir.Instruction>  t) {return  t instanceof EList<?> && 
              (((EList<net.sf.orcc.ir.Instruction>)t).size() == 0 
              || (((EList<net.sf.orcc.ir.Instruction>)t).size()>0 && ((EList<net.sf.orcc.ir.Instruction>)t).get(0) instanceof net.sf.orcc.ir.Instruction));}private static  EList<net.sf.orcc.ir.Instruction>  tom_empty_array_InstructionL(int n) { return  new BasicEList<net.sf.orcc.ir.Instruction>(n) ;}private static  EList<net.sf.orcc.ir.Instruction>  tom_cons_array_InstructionL( net.sf.orcc.ir.Instruction  e,  EList<net.sf.orcc.ir.Instruction>  l) { return  append(e,l) ;}private static  net.sf.orcc.ir.Instruction  tom_get_element_InstructionL_InstructionL( EList<net.sf.orcc.ir.Instruction>  l, int n) {return  l.get(n) ;}private static int tom_get_size_InstructionL_InstructionL( EList<net.sf.orcc.ir.Instruction>  l) {return  l.size() ;}   private static   EList<net.sf.orcc.ir.Instruction>  tom_get_slice_InstructionL( EList<net.sf.orcc.ir.Instruction>  subject, int begin, int end) {      EList<net.sf.orcc.ir.Instruction>  result =  new BasicEList<net.sf.orcc.ir.Instruction>(end-begin) ;     while(begin!=end) {       result =  append( subject.get(begin) ,result) ;       begin++;     }     return result;   }    private static   EList<net.sf.orcc.ir.Instruction>  tom_append_array_InstructionL( EList<net.sf.orcc.ir.Instruction>  l2,  EList<net.sf.orcc.ir.Instruction>  l1) {     int size1 =  l1.size() ;     int size2 =  l2.size() ;     int index;      EList<net.sf.orcc.ir.Instruction>  result =  new BasicEList<net.sf.orcc.ir.Instruction>(size1+size2) ;     index=size1;     while(index >0) {       result =  append( l1.get(size1-index) ,result) ;       index--;     }      index=size2;     while(index > 0) {       result =  append( l2.get(size2-index) ,result) ;       index--;     }     return result;   }private static boolean tom_equal_term_InstCall(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstCall(Object t) {return  t instanceof net.sf.orcc.ir.InstCall ;}private static boolean tom_equal_term_InstLoad(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstLoad(Object t) {return  t instanceof net.sf.orcc.ir.InstLoad ;}private static boolean tom_equal_term_InstAssign(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstAssign(Object t) {return  t instanceof net.sf.orcc.ir.InstAssign ;}private static boolean tom_equal_term_InstPhi(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstPhi(Object t) {return  t instanceof net.sf.orcc.ir.Instruction ;}private static boolean tom_equal_term_InstReturn(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstReturn(Object t) {return  t instanceof net.sf.orcc.ir.InstReturn ;}private static boolean tom_equal_term_InstStore(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstStore(Object t) {return  t instanceof net.sf.orcc.ir.InstStore ;}private static boolean tom_equal_term_InstSpecific(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_InstSpecific(Object t) {return  t instanceof net.sf.orcc.ir.InstSpecific ;}private static boolean tom_equal_term_Expression(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Expression(Object t) {return  t instanceof net.sf.orcc.ir.Expression ;}private static boolean tom_equal_term_ExpressionL(Object l1, Object l2) {return (l1!=null && l1.equals(l2)) || l1==l2 ;}private static boolean tom_is_sort_ExpressionL(Object t) {return  t instanceof EList<?> && (((EList<net.sf.orcc.ir.Expression>)t).size() == 0 ||
                  (((EList<net.sf.orcc.ir.Expression>)t).size() > 0 && 
                    ((EList<net.sf.orcc.ir.Expression>)t).get(0) instanceof net.sf.orcc.ir.Expression));}private static boolean tom_equal_term_ExprBinary(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprBinary(Object t) {return  t instanceof net.sf.orcc.ir.ExprBinary ;}private static boolean tom_equal_term_ExprUnary(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprUnary(Object t) {return  t instanceof net.sf.orcc.ir.ExprUnary ;}private static boolean tom_equal_term_ExprBool(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprBool(Object t) {return  t instanceof net.sf.orcc.ir.ExprBool ;}private static boolean tom_equal_term_ExprFloat(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprFloat(Object t) {return  t instanceof net.sf.orcc.ir.ExprFloat ;}private static boolean tom_equal_term_ExprInt(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprInt(Object t) {return  t instanceof net.sf.orcc.ir.ExprInt ;}private static boolean tom_equal_term_ExprList(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprList(Object t) {return  t instanceof net.sf.orcc.ir.ExprList ;}private static boolean tom_equal_term_ExprString(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprString(Object t) {return  t instanceof net.sf.orcc.ir.ExprString ;}private static boolean tom_equal_term_ExprVar(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ExprVar(Object t) {return  t instanceof net.sf.orcc.ir.ExprVar ;}private static boolean tom_equal_term_Type(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Type(Object t) {return  t instanceof net.sf.orcc.ir.Type ;}private static boolean tom_equal_term_TypeVoid(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeVoid(Object t) {return  t instanceof net.sf.orcc.ir.TypeVoid ;}private static boolean tom_equal_term_TypeString(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeString(Object t) {return  t instanceof net.sf.orcc.ir.TypeString ;}private static boolean tom_equal_term_TypeInt(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeInt(Object t) {return  t instanceof net.sf.orcc.ir.TypeInt ;}private static boolean tom_equal_term_TypeUint(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeUint(Object t) {return  t instanceof net.sf.orcc.ir.TypeUint ;}private static boolean tom_equal_term_TypeBool(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeBool(Object t) {return  t instanceof net.sf.orcc.ir.TypeBool ;}private static boolean tom_equal_term_TypeList(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeList(Object t) {return  t instanceof net.sf.orcc.ir.TypeList ;}private static boolean tom_equal_term_TypeFloat(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_TypeFloat(Object t) {return  t instanceof net.sf.orcc.ir.TypeFloat ;}private static boolean tom_equal_term_Procedure(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Procedure(Object t) {return  t instanceof net.sf.orcc.ir.Procedure ;}private static boolean tom_equal_term_Param(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Param(Object t) {return  t instanceof net.sf.orcc.ir.Param ;}private static boolean tom_equal_term_ParamL(Object l1, Object l2) {return (l1!=null && l1.equals(l2)) || l1==l2 ;}private static boolean tom_is_sort_ParamL(Object t) {return  t instanceof EList<?> && (((EList<net.sf.orcc.ir.Param>)t).size() == 0 ||
                  (((EList<net.sf.orcc.ir.Param>)t).size() > 0 && 
                ((EList<net.sf.orcc.ir.Param>)t).get(0) instanceof net.sf.orcc.ir.Param)) ;}private static boolean tom_equal_term_Arg(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Arg(Object t) {return  t instanceof net.sf.orcc.ir.Arg ;}private static boolean tom_equal_term_ArgByRef(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ArgByRef(Object t) {return  t instanceof net.sf.orcc.ir.ArgByRef ;}private static boolean tom_equal_term_ArgByVal(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_ArgByVal(Object t) {return  t instanceof net.sf.orcc.ir.ArgByVal ;}private static boolean tom_equal_term_Var(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Var(Object t) {return  t instanceof net.sf.orcc.ir.Var ;}private static boolean tom_equal_term_Use(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Use(Object t) {return  t instanceof net.sf.orcc.ir.Use ;}private static boolean tom_equal_term_Def(Object l1, Object l2) {return  l1.equals(l2) || l1 == l2 ;}private static boolean tom_is_sort_Def(Object t) {return  t instanceof net.sf.orcc.ir.Def ;}  private static boolean tom_is_fun_sym_proc( net.sf.orcc.ir.Procedure  t) {return t instanceof net.sf.orcc.ir.Procedure;}private static  String  tom_get_slot_proc_name( net.sf.orcc.ir.Procedure  t) {return ((net.sf.orcc.ir.Procedure)t).getName() ;}private static  net.sf.orcc.ir.Type  tom_get_slot_proc_returnType( net.sf.orcc.ir.Procedure  t) {return ((net.sf.orcc.ir.Procedure)t).getReturnType() ;}private static  EList<net.sf.orcc.ir.Param>  tom_get_slot_proc_parameters( net.sf.orcc.ir.Procedure  t) {return  ((net.sf.orcc.ir.Procedure)t).getParameters() ;}private static  EList<net.sf.orcc.ir.Block>  tom_get_slot_proc_blocks( net.sf.orcc.ir.Procedure  t) {return  ((net.sf.orcc.ir.Procedure)t).getBlocks() ;}  private static boolean tom_is_fun_sym_blockBasic( net.sf.orcc.ir.Block  t) {return t instanceof BlockBasic;}private static  EList<net.sf.orcc.ir.Instruction>  tom_get_slot_blockBasic_instructions( net.sf.orcc.ir.Block  t) {return ((net.sf.orcc.ir.BlockBasic)t).getInstructions() ;} private static boolean tom_is_fun_sym_exprInt( net.sf.orcc.ir.Expression  t) {return  t instanceof ExprInt ;}private static  int  tom_get_slot_exprInt_value( net.sf.orcc.ir.Expression  t) {return ((net.sf.orcc.ir.ExprInt)t).getValue().intValue() ;}  private static boolean tom_is_fun_sym_assign( net.sf.orcc.ir.Instruction  t) {return t instanceof InstAssign ;}private static  net.sf.orcc.ir.Var  tom_get_slot_assign_target( net.sf.orcc.ir.Instruction  t) {return ((InstAssign)t).getTarget().getVariable() ;}private static  net.sf.orcc.ir.Expression  tom_get_slot_assign_value( net.sf.orcc.ir.Instruction  t) {return ((InstAssign)t).getValue() ;}  





	public void doSwitch(Instance instance) {
		if(instance.isActor()) {
			doSwitch(instance.getActor());
		}
	}

	public void doSwitch(Actor actor) {
		for(Action action : actor.getActions()) {
			Procedure actionBody = action.getBody();
			{{if (tom_is_sort_Procedure(actionBody)) {if (tom_is_fun_sym_proc((( net.sf.orcc.ir.Procedure )actionBody))) { EList<net.sf.orcc.ir.Block>  tomMatch1NameNumber_freshVar_4=tom_get_slot_proc_blocks((( net.sf.orcc.ir.Procedure )actionBody));if (tom_is_fun_sym_BlockL(tomMatch1NameNumber_freshVar_4)) {int tomMatch1NameNumber_end_10=0;do {{if (!(tomMatch1NameNumber_end_10 >= tom_get_size_BlockL_BlockL(tomMatch1NameNumber_freshVar_4))) { net.sf.orcc.ir.Block  tomMatch1NameNumber_freshVar_14=tom_get_element_BlockL_BlockL(tomMatch1NameNumber_freshVar_4,tomMatch1NameNumber_end_10);if (tom_is_fun_sym_blockBasic(tomMatch1NameNumber_freshVar_14)) { EList<net.sf.orcc.ir.Instruction>  tomMatch1NameNumber_freshVar_13=tom_get_slot_blockBasic_instructions(tomMatch1NameNumber_freshVar_14);if (tom_is_fun_sym_InstructionL(tomMatch1NameNumber_freshVar_13)) {int tomMatch1NameNumber_end_19=0;do {{if (!(tomMatch1NameNumber_end_19 >= tom_get_size_InstructionL_InstructionL(tomMatch1NameNumber_freshVar_13))) { net.sf.orcc.ir.Instruction  tomMatch1NameNumber_freshVar_23=tom_get_element_InstructionL_InstructionL(tomMatch1NameNumber_freshVar_13,tomMatch1NameNumber_end_19);if (tom_is_fun_sym_assign(tomMatch1NameNumber_freshVar_23)) {if (tom_is_fun_sym_exprInt(tom_get_slot_assign_value(tomMatch1NameNumber_freshVar_23))) {if (tomMatch1NameNumber_end_19 + 1 >= tom_get_size_InstructionL_InstructionL(tomMatch1NameNumber_freshVar_13)) {


					OrccLogger.traceln(tom_get_element_BlockL_BlockL(tomMatch1NameNumber_freshVar_4,tomMatch1NameNumber_end_10).toString());
				}}}}tomMatch1NameNumber_end_19=tomMatch1NameNumber_end_19 + 1;}} while(!(tomMatch1NameNumber_end_19 > tom_get_size_InstructionL_InstructionL(tomMatch1NameNumber_freshVar_13)));}}}tomMatch1NameNumber_end_10=tomMatch1NameNumber_end_10 + 1;}} while(!(tomMatch1NameNumber_end_10 > tom_get_size_BlockL_BlockL(tomMatch1NameNumber_freshVar_4)));}}}}}

		}
	}
}