GetInstanceId(instance) ::= <<
<if (instance.broadcast)>bcast_<endif><instance.id>
>>

BroadcastWrite(n,port) ::= <<
fifo_<instance.broadcast.type>_write_1(<GetInstanceId(instance)>_output_<n>, tok_input);
>>

printBroadcastWrite(OutputNum, OutputPorts) ::= <<
<if(first(OutputNum))>
<BroadcastWrite(first(OutputNum),first(OutputPorts))>
<printBroadcastWrite(rest(OutputNum),rest(OutputPorts))>
<endif>
>>

outputPatternPort(num, port) ::= <<
if (!fifo_<instance.broadcast.type>_has_room(<GetInstanceId(instance)>_output_<num>, 1, 1)) {
	ports |= (1 \<\< <num>);
}
>>

outputPattern(outputsNumPort, outputsPort) ::= <<
<if(first(outputsNumPort))>
<outputPatternPort(first(outputsNumPort),first(outputsPort))>
<outputPattern(rest(outputsNumPort),rest(outputsPort))>
<endif>
>>

printOutputPattern(outputsNumPort, outputsPort) ::= <<
<if(first(outputsNumPort))>
int ports = 0;
<outputPattern(outputsNumPort, outputsPort)>
if (ports != 0) {
	si-\>num_firings = i;
	si-\>reason = full;
	si-\>ports = ports;
	return;
}
<endif>
>>

declareBroadcast(instance) ::= <<
<if (instance.broadcast)
>
void <GetInstanceId(instance)>_scheduler(struct schedinfo_s *si) {
	int i = 0;
	<instance.broadcast.type> tok_input;

	while (fifo_<instance.broadcast.type>_has_tokens(<GetInstanceId(instance)>_input, 0, 1)) {
		<printOutputPattern(instance.broadcast.outputList,instance.broadcast.outputs.list)>

		tok_input = fifo_<instance.broadcast.type>_read_1(<GetInstanceId(instance)>_input, 0);
		<printBroadcastWrite(instance.broadcast.outputList,instance.broadcast.outputs.list)>
		i++;
	}

	si-\>reason = starved;
	si-\>num_firings = i;
	si-\>ports = 0x01;
}<
endif>

>>

///////////////////////////////////////////////////////////////////////////////
// Declare predecessors and successors

neighbour(instance) ::= <<
<if(instance.actor || instance.broadcast)
  >&<GetInstanceId(instance)
><else
  >NULL<
endif>
>>

predecessors(map, ports) ::= <<
<ports: {port | <neighbour(map.(port))>}; separator=", ">
>>

successors(instances) ::= <<
<instances: neighbour(); separator=", ">
>>

goDeclareNumSuccessors(map,outputs) ::= <<
<outputs : {port | <length(map.(port))>}; separator=", ">
>>

goDeclareSuccPerPort(port) ::= <<
struct actor_s *<GetInstanceId(instance)>_<port.name>_successors[] = {<successors(map.(port))>};
>>

goDeclareSuccs(map,outputs) ::= <<
<outputs : goDeclareSuccPerPort(); separator="\n">
int <GetInstanceId(instance)>_num_successors[] = {<goDeclareNumSuccessors(map,outputs)>};
>>

goDeclarePredSucc(network, inputs, outputs) ::= <<
<if(!inputs.empty)
>struct actor_s *<GetInstanceId(instance)>_predecessors[] = {<predecessors(instance.incomingPortMap, inputs)>};
<endif><
if(!outputs.empty)
><goDeclareSuccs(instance.outgoingPortMap, outputs)>
struct actor_s **<GetInstanceId(instance)>_successors[] = {<outputs: {port | <GetInstanceId(instance)>_<port.name>_successors}; separator=", ">};
<endif>
>>

declarePredsSuccs(instances) ::= <<
<instances: {instance | <goDeclarePredSucc(instance.contents.inputs, instance.contents.outputs)>}>
>>


///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs

allocateFifo(edge, readers_nb) ::= <%
<if (edge.source.instance && edge.target.instance)>
<if (edge.source.broadcast || edge.source.actor)>
DECLARE_FIFO(<edge.sourcePort.type>, <if(edge.size)><edge.size><else>SIZE<endif>, <edge.idNoBcast>, <readers_nb>)
<else>
DECLARE_FIFO(<edge.targetPort.type>, <if(edge.size)><edge.size><else>SIZE<endif>, <edge.idNoBcast>, <readers_nb>)
<endif>
<else>
<edge.source>
<edge.target>
<endif>
%>

allocateFifos(instance) ::= <<
<instance.outgoingPortMap.keys: {port |<allocateFifo(first(instance.outgoingPortMap.(port)), length(instance.outgoingPortMap.(port)))><\n>}>
>>


///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

doAssignFifo(instance, port, count) ::= <<
<if(instance.actor || instance.broadcast)>struct fifo_<port.type>_s *<GetInstanceId(instance)>_<port.name> = &fifo_<count>;<endif>
>>

tryAssignFifoTgt(edge) ::= <<
<if (edge.source.instance && edge.target.instance)>
<doAssignFifo(edge.target, edge.targetPort, edge.idNoBcast)><endif>
>>

tryAssignFifoSrc(edge, src, tgt) ::= <<
<if (src.instance && tgt.instance)>
<doAssignFifo(
  src.instance, edge.source,
  edge.idNoBcast)><endif>
>>

assignFifosN(edges, readers_nb) ::= <<

<tryAssignFifoSrc(first(edges), (first(edges)).source, (first(edges)).target)>
<edges: {edge | <tryAssignFifoTgt(edge)> }>

>>

assignFifos(instance) ::= <<
<instance.outgoingPortMap.keys: { port | <assignFifosN(instance.outgoingPortMap.(port), length(instance.outgoingPortMap.(port)))> }>
>>

///////////////////////////////////////////////////////////////////////////////
// clear FIFOs

clearFifoType(type, size, count, port, instance) ::= <<
fifo_<type>_clear(&fifo_<count>);
>>

doClearFifo(edge) ::= <%
<if (edge.source.broadcast || edge.source.actor)>
<clearFifoType(
  edge.sourcePort.type, edge.size, edge.idNoBcast, edge.sourcePort, edge.source)>
<else>
<clearFifoType(
  edge.targetPort.type, edge.size, edge.id, edge.targetPort, edge.target)>
<endif>
%>

tryClearFifo(edge) ::= <%
<if (edge.source.instance && edge.target.instance)>
<doClearFifo(edge)>
<endif>
%>

clearFifosWithMap(instance) ::= <<
<instance.outgoingPortMap.keys: { port | <tryClearFifo(first(instance.outgoingPortMap.(port)))> }>
>>

printClearFifosFunction() ::= <<
void clear_fifos(){
	<network.instances: clearFifosWithMap()>
}
>>

///////////////////////////////////////////////////////////////////////////////
// Declare actors

printActorAddress(instance, addComma) ::= <<
<if(instance.actor || instance.broadcast)><if(addComma)>, <endif>&<GetInstanceId(instance)><endif>
>>

declareActorArray(instances, addComma = false) ::= <<
<if(rest(instances))
><printActorAddress(first(instances),addComma)
><	if(first(instances).actor || first(instances).broadcast)
><declareActorArray(rest(instances),"true")
><	else
><declareActorArray(rest(instances),addComma)
	><endif
><else
><printActorAddress(first(instances),addComma)
><endif>
>>

declareActorsArray(instances) ::= <<
struct actor_s *actors[] = {<declareActorArray(instances)>};
>>

///////////////////////////////////////////////////////////////////////////////
// Define actors

NumInputs(instance) ::= <<
<if (instance.actor)
><length(instance.actor.inputs)><
elseif (instance.broadcast)>1<else>0<endif>
>>

NumOutputs(instance) ::= <<
<if (instance.actor)
><length(instance.actor.outputs)><
elseif (instance.broadcast)><instance.broadcast.numOutputs><else>0<endif>
>>

fillActorStruct(instance) ::= <<
<if(instance.actor || instance.broadcast)>
struct actor_s <GetInstanceId(instance)> = {"<GetInstanceId(instance)>", <if(network.templateData.instanceNameToGroupIdMap.(instance.id))> <network.templateData.instanceNameToGroupIdMap.(instance.id)> <else>0<endif>, <GetInstanceId(instance)>_scheduler, <
NumInputs(instance)>, <NumOutputs(instance)>, NULL, NULL, NULL};
<endif>
>>

fillActorsStructs(instances) ::= <<
<instances: fillActorStruct()>
>>

///////////////////////////////////////////////////////////////////////////////
// declares initialize and scheduler actors functions

actorInitialize(instance) ::= <<
<if (instance.actor)>
extern void <instance.id>_initialize(<instance.actor.inputs: { port | unsigned int fifo_<port.name>_id}; separator=", ">);
<endif>
>>

actionScheduler(instance) ::= <<
<if(instance.actor || instance.broadcast)>
extern void <instance.id>_scheduler(struct schedinfo_s *si);
<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// print timeout

printTimeout() ::= <<
static int timeout = 0;

int is_timeout(){
	return timeout;
}
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()

printInitialize(instance) ::= <<
<if(instance.actor)>
<instance.id>_initialize(<instance.actor.inputs: { port | <instance.incomingPortMap.(port).fifoId>}; separator=",">);<
endif>
>>

printInitializes(instances) ::= <<
void initialize_instances(){
	<instances: {instance|<printInitialize(instance)>}>
}
>>

printScheduler() ::= <<
void *scheduler(void *data) {
	struct scheduler_s *sched = (struct scheduler_s *) data;
	struct actor_s *my_actor;
	struct schedinfo_s si;
	<if(options.useGeneticAlgorithm)>
	
	int i = 0;
	clock_t start, end;	
	semaphore_wait(sched-\>sem_thread);
	start = clock ();
	
	<endif>
	while (1) {
		my_actor = sched_get_next<if(options.newScheduler)>_schedulable(sched, RING_TOPOLOGY)<else>(sched)<endif>;
		if(my_actor != NULL){
			si.num_firings = 0;
			my_actor-\>sched_func(&si);
#ifdef PRINT_FIRINGS
			printf("%2i  %5i\t%s\t%s\n", sched-\>id, si.num_firings, si.reason == starved ? "starved" : "full", my_actor-\>name);
#endif
		}
		<if(options.useGeneticAlgorithm)>
		i++;
		if(i \> STEP_BW_CHK){
			end = clock ();
			timeout = ((end - start) / (double)CLOCKS_PER_SEC) \>= TIMEOUT;
			i = 0;
		}
		if(source_is_stopped() || timeout){
			semaphore_set(sched-\>sync-\>sem_monitor);
			clean_cache(CACHE_SIZE);
			semaphore_wait(sched-\>sem_thread);
			timeout = 0;
			start = clock ();
		}
		<endif>
	}
}
>>

printAddSchedulable(instance) ::= <<
sched_add_schedulable(<GetInstanceId(instance)>.sched, &<GetInstanceId(instance)>, RING_TOPOLOGY);
>>

printAllAddSchedulable(instances) ::= <<
<instances: printAddSchedulable(); separator="\n">
>>

///////////////////////////////////////////////////////////////////////////////

// print network
network(network, options) ::= <<

// Generated from "<network.name>"

#include \<locale.h\>
#include \<stdio.h\>
#include \<stdlib.h\>
<if (options.useGeneticAlgorithm)>
#include \<time.h\>
<endif>

#ifdef __APPLE__
#include "SDL.h"
#endif

#ifndef _WIN32
#define __USE_GNU
#endif

#include "orcc_types.h"
#include "orcc_fifo.h"
#include "orcc_scheduler.h"
#include "orcc_util.h"
<if (options.threads || options.useGeneticAlgorithm)>
#include "orcc_thread.h"
<endif>
<if(options.useGeneticAlgorithm)>
#include "orcc_genetic.h"
<endif>

<if (options.useGeneticAlgorithm)>
#define THREAD_NB <options.threadsNb>
<else>
#define MAX_THREAD_NB 10
<endif>
<if(options.newScheduler)>
#define RING_TOPOLOGY <if(options.ringTopology)>1<else>0<endif>
<endif>
<if(options.useGeneticAlgorithm)>
#define POPULATION_SIZE 100
#define GENERATION_NB 20

#define GROUPS_RATIO 0.8
#define KEEP_RATIO 0.2
#define CROSSOVER_RATIO 0.8

#define TIMEOUT 900
#define STEP_BW_CHK 1000000

#define CACHE_SIZE 4096
<endif>

#define SIZE <options.fifoSize>
// #define PRINT_FIRINGS


////////////////////////////////////////////////////////////////////////////////
// FIFO allocation

<network.instances: allocateFifos()>

////////////////////////////////////////////////////////////////////////////////
// FIFO pointer assignments

<network.instances: assignFifos()>

////////////////////////////////////////////////////////////////////////////////
<network.instances: declareBroadcast()>

////////////////////////////////////////////////////////////////////////////////
// Action schedulers

<network.instances: actorInitialize()>
<network.instances: actionScheduler()>

////////////////////////////////////////////////////////////////////////////////
// Declaration of a struct actor for each actor

<network.instances: {instance|struct actor_s <GetInstanceId(instance)>;<\n>}>

////////////////////////////////////////////////////////////////////////////////
// Declaration of the actors array

<fillActorsStructs(network.instances)>

<declareActorsArray(instances=network.instances)>

<if (options.useGeneticAlgorithm)>
extern int source_is_stopped();
extern int clean_cache(int size);

<printClearFifosFunction()>

<printTimeout()>
<endif>

////////////////////////////////////////////////////////////////////////////////
// Actor scheduler

<printScheduler()>

////////////////////////////////////////////////////////////////////////////////
// Initializer and launcher

<printInitializes(network.instances)>

static void launcher() {
	int i, display_scheduler = -1;
	
	cpu_set_t cpuset;
	<if(!options.useGeneticAlgorithm)>
	thread_struct threads[MAX_THREAD_NB];
	thread_id_struct threads_id[MAX_THREAD_NB];
	
	struct mapping_s *mapping = map_actors(actors, sizeof(actors) / sizeof(actors[0]));
	struct scheduler_s *schedulers = (struct scheduler_s *) malloc(mapping-\>number_of_threads * sizeof(struct scheduler_s));
	struct waiting_s *waiting_schedulables = (struct waiting_s *) malloc(mapping-\>number_of_threads * sizeof(struct waiting_s));
	<else>
	thread_struct threads[THREAD_NB], thread_monitor;
	thread_id_struct threads_id[THREAD_NB], thread_monitor_id;
	
	struct scheduler_s schedulers[THREAD_NB];
	struct waiting_s waiting_schedulables[THREAD_NB];
	
	struct sync_s sched_sync;
	struct genetic_s genetic_info;
	struct monitor_s monitoring;
	
	sync_init(&sched_sync);
	genetic_init(&genetic_info, POPULATION_SIZE, GENERATION_NB, KEEP_RATIO, CROSSOVER_RATIO, actors, schedulers, sizeof(actors) / sizeof(actors[0]), THREAD_NB, <if(options.newScheduler)>RING_TOPOLOGY<else>0<endif>, <network.templateData.numberOfGroups>, GROUPS_RATIO);
	monitor_init(&monitoring, &sched_sync, &genetic_info);
	<endif>
	
	initialize_instances();
	
	<if(!options.useGeneticAlgorithm)>
	for(i=0; i \< mapping-\>number_of_threads; i++){
		sched_init(&schedulers[i], mapping-\>threads_ids[i], mapping-\>partitions_size[i], mapping-\>partitions_of_actors[i], &waiting_schedulables[i], &waiting_schedulables[(i+1) % mapping-\>number_of_threads], mapping-\>number_of_threads, NULL);
	}
	<else>
	for(i=0; i \< THREAD_NB; i++){
		sched_init(&schedulers[i], i, 0, NULL, &waiting_schedulables[i], &waiting_schedulables[(i+1) % THREAD_NB], THREAD_NB, &sched_sync);
	}
	<endif>
	
	<if(options.newScheduler && !options.useGeneticAlgorithm)><printAllAddSchedulable(network.templateData.sourceInstances)><endif>
	
	clear_cpu_set(cpuset);
	
	for(i=0; i \< <if(options.useGeneticAlgorithm)>THREAD_NB<else>mapping-\>number_of_threads<endif>; i++){
		if(find_actor("display", schedulers[i].actors, schedulers[i].num_actors) == NULL){
			thread_create(threads[i], scheduler, schedulers[i], threads_id[i]);
			set_thread_affinity(cpuset, i, threads[i]);
		} else {
			display_scheduler = i;
		}
	}
	<if(options.useGeneticAlgorithm)>
	thread_create(thread_monitor, monitor, monitoring, thread_monitor_id);
	<endif>
	
	if(display_scheduler != -1){
		(*scheduler)((void*) &schedulers[display_scheduler]);
	}
	
	for(i=0; i \< <if(options.useGeneticAlgorithm)>THREAD_NB<else>mapping-\>number_of_threads<endif>; i++){
		if(i != display_scheduler){
			thread_join(threads[i]);
		}
	}
	<if(options.useGeneticAlgorithm)>
	thread_join(thread_monitor);
	<endif>
}

////////////////////////////////////////////////////////////////////////////////
// Main

int main(int argc, char *argv[]) {
  init_orcc(argc, argv);

  launcher();

  printf("End of simulation!<if(!options.useGeneticAlgorithm)> Press a key to continue<endif>\n");
  <if(!options.useGeneticAlgorithm)>wait_for_key();<endif>

  return 0;
}

>>




