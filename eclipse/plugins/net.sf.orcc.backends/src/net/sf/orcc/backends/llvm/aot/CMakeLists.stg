import "net/sf/orcc/backends/c/CMakeLists.stg"

printNetwork(network, options) ::= <<
# Generated from <network.simpleName>

cmake_minimum_required (VERSION 2.6)

<useClang()>

project (<network.simpleName>)

<includeLibraries()>

<createExecutable(network)>

<link(network)>
>>

useClang() ::= <<
# LLVM compiler
set(CMAKE_C_COMPILER "clang")
>>

includeLibraries() ::= <<
# Libraries folder
set(LIBS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs)

# Runtime libraries inclusion
set(ORCC_INCLUDE_DIR ${LIBS_DIR}/orcc/include)
set(ROXML_INCLUDE_DIR ${LIBS_DIR}/roxml/include)

# Helps to find where SDL libraries are saved (win32 only)
if(WIN32)
	set(ENV{CMAKE_PREFIX_PATH} ${LIBS_DIR}/windows/SDL-*\;${LIBS_DIR}/windows/SDL_image-*)
endif()

find_package(Threads REQUIRED)

add_subdirectory(${LIBS_DIR})
include_directories(${ORCC_INCLUDE_DIR} ${ROXML_INCLUDE_DIR})

find_package(SDL REQUIRED)
include_directories(${SDL_INCLUDE_DIR})

>>

createExecutable(network) ::= <<
set(filenames
	${CMAKE_BINARY_DIR}/CMakeFiles/<network.simpleName>.ll.o
	<network.instances: sourceFile();separator="\n">
	<network.entities: sourceFile();separator="\n">
)

macro (compileAssemblyFile name) 
	add_custom_command(
		OUTPUT ${CMAKE_BINARY_DIR}/CMakeFiles/${name}.ll.o
		DEPENDS ${CMAKE_SOURCE_DIR}/${name}.ll
		COMMAND ${CMAKE_C_COMPILER} -c ${CMAKE_SOURCE_DIR}/${name}.ll -o ${CMAKE_BINARY_DIR}/CMakeFiles/${name}.ll.o
		COMMENT "Building LLVM object ${name}.ll.o" 
	)
endmacro(compileAssemblyFile)

compileAssemblyFile(<network.simpleName>)
<network.instances: compileAssemblyFile();separator="\n">
<network.entities: compileAssemblyFile();separator="\n">

add_executable(<network.simpleName> ${filenames})

set_target_properties(<network.simpleName> PROPERTIES LINKER_LANGUAGE C)
>>

sourceFile(instance) ::= <%
<if(!instance.actor.native)>
${CMAKE_BINARY_DIR}/CMakeFiles/<instance.name>.ll.o
<endif>
%>

compileAssemblyFile(vertex) ::= <<
<if(!vertex.actor.native)
>compileAssemblyFile(<vertex.name>)<
endif>
>>
