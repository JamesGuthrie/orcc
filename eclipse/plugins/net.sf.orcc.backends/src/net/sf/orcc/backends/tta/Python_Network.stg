
printPort(port, index) ::= <<
Port("<port.name>", <index>, <if(port.native)>True<else>False<endif>, <port.type.sizeInBits>)
>>

initPorts(name, inputs, outputs) ::= <<
<name>_inputs = [<inputs: { port | <printPort(port, i0)> }; separator=", ">]
<name>_outputs = [<outputs: { port | <printPort(port, i0)> }; separator=", ">]
>>

initInstancePort(instance) ::= <<
<if(instance.actor)
><initPorts(instance.name, instance.actor.inputs, instance.actor.outputs)><
elseif(instance.broadcast)
><initPorts(instance.name, instance.broadcast.inputs, instance.broadcast.outputs)><
endif>
>>

initInstance(vertex) ::= <<
Instance("<vertex.name>", <vertex.name>_inputs, <vertex.name>_outputs, <if(vertex.actor.native)>True<else>False<endif>, <if(vertex.broadcast)>True<else>False<endif>)
>>

printNetwork(network, options) ::= <<
# -*- coding: utf-8 -*-
#
# Generated from <network.name> using Open-RVC CAL Compiler
#

from orcc_ import *

## Ports initialization
<network.instances: initInstancePort(); separator="\n">

## Instances initialization
instances = [
	<network.instances: initInstance(); separator=",\n">
]

## Network initialization
network = Network("<network.name>", instances)
		
>>