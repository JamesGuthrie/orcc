

printDesign(design, options) ::= <<
-------------------------------------------------------------------------------
-- Title      : Network: <design.name>
-- Project    : 
-------------------------------------------------------------------------------
-- File       : <design.name>.vhd
-- Author     : Orcc - TTA
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------


------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library work;
use work.broadcast_type.all;

------------------------------------------------------------------------------
entity top is
  port
    (
      clk : in  std_logic;
      <declarePorts(design)>
      rst_n : in  std_logic
      );
end top;

------------------------------------------------------------------------------
architecture bdf_type of top is

  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------  
  <design.signals: declareSignal(); separator="\n">
  <design.buffers: declareBufferSignals(); separator="\n">
  ---------------------------------------------------------------------------
  
begin

  ---------------------------------------------------------------------------
  -- Ports instantiation 
  ---------------------------------------------------------------------------
  <design.inputs: { input | <assignNetworkPort(input, first(input.outgoing))> }; separator="\n">
  <design.outputs: { output | <assignNetworkPort(output, first(output.incoming))> }; separator="\n">
  ---------------------------------------------------------------------------
  -- Buffers instantiation 
  --------------------------------------------------------------------------- 
  <design.sharedMemories: assignBuffer(); separator="\n\n">
  ---------------------------------------------------------------------------
  -- Processors instantiation 
  ---------------------------------------------------------------------------
  <design.processors: assignProcessor(); separator="\n\n">
  ---------------------------------------------------------------------------
  -- Components instantiation 
  ---------------------------------------------------------------------------
  <design.components: assignComponent(); separator="\n\n">
  ---------------------------------------------------------------------------  


end bdf_type;

>>

///////////////////////////////////////////////////////////////////////////////
// Network ports
///////////////////////////////////////////////////////////////////////////////

declarePorts(component) ::= <<
<if(design.inputs)><design.inputs: declareInput(); separator="\n"><endif>
<if(design.outputs)><design.outputs: declareOutput(); separator="\n"><endif>
>>

declareInput(port) ::= <<
<port.label> : in std_logic_vector(<port.size>-1 downto 0);
>>

declareOutput(port) ::= <<
<port.label> : out std_logic_vector(<port.size>-1 downto 0);
>>


///////////////////////////////////////////////////////////////////////////////
// Signals
///////////////////////////////////////////////////////////////////////////////

declareSignal(signal) ::= <<
signal s_<signal.label> : std_logic_vector(<signal.size>-1 downto 0);
>>

declareBufferSignals(buffer) ::= <<
signal <buffer.name>_wren_p1    : std_logic;
signal <buffer.name>_address_p1 : std_logic_vector(<buffer.addrWidth>-1 downto 0);
signal <buffer.name>_byteen_p1  : std_logic_vector(3 downto 0);
signal <buffer.name>_data_p1    : std_logic_vector(31 downto 0);
signal <buffer.name>_queue_p1   : std_logic_vector(31 downto 0);
signal <buffer.name>_wren_p2    : std_logic;
signal <buffer.name>_address_p2 : std_logic_vector(<buffer.addrWidth>-1 downto 0);
signal <buffer.name>_byteen_p2  : std_logic_vector(3 downto 0);
signal <buffer.name>_data_p2    : std_logic_vector(31 downto 0);
signal <buffer.name>_queue_p2   : std_logic_vector(31 downto 0);
>> 


///////////////////////////////////////////////////////////////////////////////
// Instantiation
///////////////////////////////////////////////////////////////////////////////

assignNetworkPort(port, link) ::= <<
<port.name> \<= s_<link.name>;
>>

assignInputPort(port, link) ::= <<
<if(link.signal)
>fu_<port.name>_signal =\> s_<link.name>,<
else
>fu_<port.name>_dmem_data_in    =\> <link.name>_data_p2,
fu_<port.name>_dmem_data_out   =\> <link.name>_queue_p2,
fu_<port.name>_dmem_addr       =\> <link.name>_address_p2,
fu_<port.name>_dmem_wr_en      =\> <link.name>_wren_p2,
fu_<port.name>_dmem_bytemask   =\> <link.name>_byteen_p2,<
endif>
>>

assignOutputPort(port, link) ::= <<
<if(link.signal)
>fu_<port.name>_signal =\> s_<link.name>,<
else
>fu_<port.name>_dmem_data_in    =\> <link.name>_data_p1,
fu_<port.name>_dmem_data_out   =\> <link.name>_queue_p1,
fu_<port.name>_dmem_addr       =\> <link.name>_address_p1,
fu_<port.name>_dmem_wr_en      =\> <link.name>_wren_p1,
fu_<port.name>_dmem_bytemask   =\> <link.name>_byteen_p1,<
endif>
>>

assignGeneric(attribute) ::= <<
<attribute.name> =\> <attribute.value>
>>

assignComponent(component) ::= <<
<component.name>_inst : entity work.<component.name>
  <if(component.attributes)>generic map(<component.attributes: assignGeneric(); separator=",\n">)<endif>
  port map(clk =\> clk,
           <component.inputs: { input |<input.name> =\> s_<component.incomingPortMap.(input).name>,}; separator="\n">
           <component.outputs: { output |<output.name> =\> s_<component.outgoingPortMap.(output).name>,}; separator="\n">
           rst_n =\> rst_n);
>>

assignBuffer(buffer) ::= <<
<buffer.name> : entity work.inferredRAM_2p
  generic map(depth      =\> <buffer.depth>,
              byte_width =\> 8,
              addr_width =\> <buffer.addrWidth>,
              bytes      =\> 4)
  port map(clk        =\> clk,
           wren_p1    =\> <buffer.name>_wren_p1,
           address_p1 =\> <buffer.name>_address_p1,
           byteen_p1  =\> <buffer.name>_byteen_p1,
           data_p1    =\> <buffer.name>_data_p1,
           q_p1       =\> <buffer.name>_queue_p1,
           wren_p2    =\> <buffer.name>_wren_p2,
           address_p2 =\> <buffer.name>_address_p2,
           byteen_p2  =\> <buffer.name>_byteen_p2,
           data_p2    =\> <buffer.name>_data_p2,
           q_p2       =\> <buffer.name>_queue_p2,
           rst_n      =\> rst_n);
>>

assignProcessor(processor) ::= <<
<processor.name>_inst : entity work.<processor.name>
  generic map(device_family =\> "<options.fpga.family>")
  port map(clk =\> clk,
           <processor.incoming: { edge |<assignInputPort(edge.targetPort, edge)>}; separator="\n">
           <processor.outgoing: { edge |<assignOutputPort(edge.sourcePort, edge)>}; separator="\n">
           rst_n =\> rst_n);
>>
