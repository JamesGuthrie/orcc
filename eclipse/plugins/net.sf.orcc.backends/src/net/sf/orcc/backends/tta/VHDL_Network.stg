

printDesign(design, options) ::= <<
-------------------------------------------------------------------------------
-- Title      : Network: <design.name>
-- Project    : 
-------------------------------------------------------------------------------
-- File       : <design.name>.vhd
-- Author     : Orcc - TTA
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------


------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library work;
use work.broadcast_type.all;

------------------------------------------------------------------------------
entity top is
  port
    (
      clk : in  std_logic;
      <declarePorts(design)>
      rst_n : in  std_logic
      );
end top;

------------------------------------------------------------------------------
architecture bdf_type of top is

  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------  
  <design.signals: declareSignal(); separator="\n">
  <design.fifos: declareFifoSignal(); separator="\n">
  ---------------------------------------------------------------------------
  
begin

  ---------------------------------------------------------------------------
  -- Ports instantiation 
  ---------------------------------------------------------------------------
  <design.inputs: { input | <assignNetworkPort(input, first(input.outgoing))> }; separator="\n">
  <design.outputs: { output | <assignNetworkPort(output, first(output.incoming))> }; separator="\n">
  ---------------------------------------------------------------------------
  -- FIFOs instantiation 
  --------------------------------------------------------------------------- 
  <design.fifos: assignFifo(); separator="\n\n">
  ---------------------------------------------------------------------------
  -- Processors instantiation 
  ---------------------------------------------------------------------------
  <design.processors: assignProcessor(); separator="\n\n">
  ---------------------------------------------------------------------------
  -- Components instantiation 
  ---------------------------------------------------------------------------
  <design.components: assignComponent(); separator="\n\n">
  ---------------------------------------------------------------------------  
  -- Broadcasts instantiation 
  ---------------------------------------------------------------------------
  <design.broadcasts: assignBroadcast(); separator="\n\n">
  ---------------------------------------------------------------------------  


end bdf_type;

>>

///////////////////////////////////////////////////////////////////////////////
// Network ports
///////////////////////////////////////////////////////////////////////////////

declarePorts(component) ::= <<
<if(design.inputs)><design.inputs: declareInput(); separator="\n"><endif>
<if(design.outputs)><design.outputs: declareOutput(); separator="\n"><endif>
>>

declareInput(port) ::= <<
<port.label> : in std_logic_vector(<port.size> downto 0);
>>

declareOutput(port) ::= <<
<port.label> : out std_logic_vector(<port.size> downto 0);
>>


///////////////////////////////////////////////////////////////////////////////
// Signals
///////////////////////////////////////////////////////////////////////////////

declareBroadcastSignals(broadcast) ::= <<
signal <broadcast.name>_data_outputs   : array_logic_v32(<length(broadcast.outputs)>-1 downto 0);
signal <broadcast.name>_status_outputs : array_logic_v32(<length(broadcast.outputs)>-1 downto 0);
signal <broadcast.name>_dv_outputs     : std_logic_vector(<length(broadcast.outputs)>-1 downto 0);
>>

declareSignal(signal) ::= <<
signal s_<signal.label> : std_logic_vector(<signal.size>-1 downto 0);
>>

declareFifoSignal(fifo) ::= <<
signal fifo_<fifo.label>_data         : std_logic_vector(31 downto 0);
signal fifo_<fifo.label>_q            : std_logic_vector(31 downto 0);
signal fifo_<fifo.label>_rdreq        : std_logic;
signal fifo_<fifo.label>_wrreq        : std_logic;
signal fifo_<fifo.label>_nb_tokens    : std_logic_vector(31 downto 0);
signal fifo_<fifo.label>_nb_freerooms : std_logic_vector(31 downto 0);
>> 


///////////////////////////////////////////////////////////////////////////////
// Instantiation
///////////////////////////////////////////////////////////////////////////////

assignNetworkPort(port, link) ::= <<
<port.label> \<= s_<link.label>;
>>

assignInputPort(port, link, index) ::= <<
<if(link.signal)
><port.name>  =\> s_<link.label>,<
elseif(link.fifo)
>data_<index>_in   =\> fifo_<link.label>_queue,
status_<index>_in =\> fifo_<link.label>_tokens,
ack_<index>_in    =\> fifo_<link.label>_rdreq,<
endif>
>>

assignOutputPort(port, link, index) ::= <<
<if(link.signal)
><port.name>  =\> s_<link.label>,<
elseif(link.fifo)
>data_<index>_in   =\> fifo_<link.label>_queue,
status_<index>_in =\> fifo_<link.label>_tokens,
ack_<index>_in    =\> fifo_<link.label>_rdreq,<
endif>
>>

assignGeneric(attribute) ::= <<
<attribute.name> =\> <attribute.value>
>>

assignComponent(component) ::= <<
<component.name> : entity work.<component.entityName>
  port map(clk =\> clk,
           <component.inputs: { input |<assignInputPort(input, component.incomingPortMap.(input), i0)>}; separator="\n">
           <component.outputs: { output |<assignOutputPort(output, component.outgoingPortMap.(output), i0)>}; separator="\n">
           rst_n =\> rst_n);
>>

assignFifo(fifo) ::= <<
fifo_<fifo.label> : entity work.fifo
  generic map(device_family =\> "<options.fpga.family>"
              <fifo.attributes: assignGeneric(); separator=",\n">)
  port map(clk =\> clk,
           rdreq  => fifo_<fifo.label>_rdreq,
           data   => fifo_<fifo.label>_data,
           queue  => fifo_<fifo.label>_queue,
           tokens => fifo_<fifo.label>_tokens,
           rooms  => fifo_<fifo.label>_rooms,
           wrreq  => fifo_<fifo.label>_wrreq,
           rst_n  =\> rst_n);
>>

assignProcessor(processor) ::= <<
<processor.name> : entity work.<processor.entityName>
  generic map(device_family =\> "<options.fpga.family>")
  port map(clk =\> clk,
           <processor.inputs: { input |<assignInputPort(input, processor.incomingPortMap.(input), i0)>}; separator="\n">
           <processor.outputs: { output |<assignOutputPort(output, processor.outgoingPortMap.(output), i0)>}; separator="\n">
           rst_n =\> rst_n);
>>

assignBroadcast(broadcast) ::= <<
<broadcast.name> : entity work.<broadcast.entityName>
  port map(clk          =\> clk,
           <broadcast.inputs: { input |<assignInputPort(input, broadcast.incomingPortMap.(input), i0)>}; separator="\n">
           <broadcast.outputs: { output |<assignOutputPort(output, broadcast.outgoingPortMap.(output), i0)>}; separator="\n">
           rst_n        =\> rst_n);
>>
