

printNetwork(network, options) ::= <<
-------------------------------------------------------------------------------
-- Title      : Network: <network.name>
-- Project    : 
-------------------------------------------------------------------------------
-- File       : <network.name>.vhd
-- Author     : Orcc - TTA
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------


------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library work;

------------------------------------------------------------------------------
entity top is
  port
    (
      clk      : in  std_logic;
      <ports(network)>
      rst_n    : in  std_logic
      );
end top;

------------------------------------------------------------------------------
architecture bdf_type of top is

  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------  
  <signals(network)>
  ---------------------------------------------------------------------------
  
begin

  ---------------------------------------------------------------------------
  -- Ports instantiation 
  ---------------------------------------------------------------------------
  <assignNetworkPorts(network)>
  ---------------------------------------------------------------------------
  -- FIFOs instantiation 
  --------------------------------------------------------------------------- 
  <assignFifos(network.connections)>
  ---------------------------------------------------------------------------
  -- Actors instantiation 
  ---------------------------------------------------------------------------
  <assignInstances(network.instances)>
  ---------------------------------------------------------------------------
  


end bdf_type;

>>

///////////////////////////////////////////////////////////////////////////////
// Network ports
///////////////////////////////////////////////////////////////////////////////

ports(network) ::= <<
<if(network.inputs)><network.inputs: {port|<port(port, "in")>}; separator=";\n">;<endif>
<if(network.outputs)><network.outputs: {port|<port(port, "out")>}; separator=";\n">;<endif>
>>

port(port, dir) ::= <<
<port.name> : <dir> <if(port.type.bool)>std_logic<else>std_logic_vector(<port.type.size>-1 downto 0)<endif>
>>

indexPort(port) ::= <<
<if(instance.actor)
><instance.actor.templateData.portToIndexMap.(port)><
elseif(instance.broadcast)
><instance.broadcast.portMap.(port)><
endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Signals
///////////////////////////////////////////////////////////////////////////////

signals(network) ::= <<
<network.instances: instanceSignals(); separator="\n\n">
>>

instanceSignals(instance) ::= <<
-- Instance: <instance.id> 
<instance.incomingPortMap.keys: { port | <inputPortSignals(port, instance.incomingPortMap.(port))> }; separator="\n">
<instance.outgoingPortMap.keys: { port | <outputPortSignals(port, first(instance.outgoingPortMap.(port)))> }; separator="\n">
>>

inputPortSignals(port, connection) ::= <<
<if(!port.native)
>---- Input port: <port.name>
signal fifo_<indexConnection(connection)>_wrreq		: std_logic;
signal fifo_<indexConnection(connection)>_data		: std_logic_vector(31 downto 0) := (others =\> '0');<
elseif(!connection.source)
>---- Input port: <port.name>
signal s_<indexConnection(connection)> 		: std_logic_vector(<port.type.size>-1 downto 0);<
endif>
>>

outputPortSignals(port, connection) ::= <<
---- Output port: <port.name>
<if(!port.native)
>signal fifo_<indexConnection(connection)>_rdreq		: std_logic;
signal fifo_<indexConnection(connection)>_q			: std_logic_vector(31 downto 0) := (others =\> '0');
signal fifo_<indexConnection(connection)>_status		: std_logic_vector(31 downto 0);<
else
>signal s_<indexConnection(connection)> 		: std_logic_vector(<port.type.size>-1 downto 0);<
endif>
>>

indexConnection(connection) ::= <<
<connection.id>
>>


///////////////////////////////////////////////////////////////////////////////
// Instantiation
///////////////////////////////////////////////////////////////////////////////

assignNetworkPorts(network) ::= <<
<network.connections: assignNetworkPort()>
>>

assignNetworkPort(connection) ::= <<
<if(!connection.source)>
<connection.sourcePort.name> \<= s_<indexConnection(connection)>;
<elseif(!connection.target)>
<connection.targetPort.name> \<= s_<indexConnection(connection)>;
<endif>
>>

assignFifos(connections) ::= <<
<connections: assignFifo()>
>>

assignFifo(connection) ::= <<
<if(!connection.sourcePort.native && !connection.targetPort.native)>
fifo_<indexConnection(connection)> : entity work.fifo
  generic map(width =\> 32)
  port map(clk     =\> clk,
           rdreq   =\> fifo_<indexConnection(connection)>_rdreq,
           data    =\> fifo_<indexConnection(connection)>_data(31 downto 0),
           q       =\> fifo_<indexConnection(connection)>_q(31 downto 0),
           status  =\> fifo_<indexConnection(connection)>_status,
           wrreq   =\> fifo_<indexConnection(connection)>_wrreq,
           rst_n     =\> rst_n);
           
<endif>
>>

assignInstances(instances) ::= <<
<instances: assignInstance(); separator="\n\n">
>>

assignInstance(instance) ::= <<
<instance.id>_inst : entity work.<if(!instance.actor.native)>processor_<endif><instance.id>
<if(instance.actor.native)
>  generic map(<assignGenerics(instance)>)  
<endif>
  port map(clk          =\> clk,
           <assignPorts(instance)>
           rst_n        =\> rst_n);
>>

assignGenerics(instance) ::= <<
<instance.arguments: { arg | <arg.variable.name> =\> <arg.value>}; separator=",\n              ">
>>

assignPorts(instance) ::= <<
<if(instance.actor)
><instance.actor.inputs: assignInputPort(); separator="\n">
<instance.actor.outputs: assignOutputPort(); separator="\n"><
elseif(instance.broadcast)
><instance.broadcast.inputs: assignInputPort(); separator="\n">
<instance.broadcast.outputs: assignOutputPort(); separator="\n"><
endif>
>>

assignInputPort(port) ::= <<
<if(port.native)
><port.name>   =\> s_<indexInputConnection(port)>,<
else
>data_<indexPort(port)>_in    =\> fifo_<indexInputConnection(port)>_q,
status_<indexPort(port)>_in  =\> fifo_<indexInputConnection(port)>_status,
ack_<indexPort(port)>_in     =\> fifo_<indexInputConnection(port)>_rdreq,<
endif>
>>

assignOutputPort(port) ::= <<
<if(port.native)
><port.name>   =\> s_<indexOutputConnection(port)>,<
else
>data_<indexPort(port)>_out   =\> fifo_<indexOutputConnection(port)>_data,
status_<indexPort(port)>_out =\> fifo_<indexOutputConnection(port)>_status,
dv_<indexPort(port)>_out     =\> fifo_<indexOutputConnection(port)>_wrreq,<
endif>
>>

indexInputConnection(port) ::= <<
<indexConnection(instance.incomingPortMap.(port))>
>>

indexOutputConnection(port) ::= <<
<indexConnection(first(instance.outgoingPortMap.(port)))>
>>
