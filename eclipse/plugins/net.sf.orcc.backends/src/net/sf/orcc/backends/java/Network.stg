parameter(param) ::= <<
/* $param$ */ <instance.parameters.(param)>
>>

parameters(parameters) ::= <<
<parameters: parameter(); wrap, separator=", ">
>>

///////////////////////////////////////////////////////////////////////////////
// declaration() and scheduler()
//////////////////////////////////////////////////////////////////////////////

declareBroadcast(instance) ::= <<
<if (instance.broadcast)>
private Broadcast_<instance.broadcast.type> actor_<instance.id>;
<endif>
>>

createBroadcast(instance) ::= <<
<if (instance.broadcast)>
actor_<instance.id> = new Broadcast_<instance.broadcast.type>(<length(instance.broadcast.outputList)>);
<endif>
>>

declareActor(instance) ::= <<
<if (instance.actor)>
private IActor actor_<instance.id>;
<endif>
>>

constructActor(instance) ::= <<
<if (instance.actor)>
<if(instance.actor.native)>
actor_<instance.id> = new <instance.actor.package>.<instance.actor.simpleName>(<parameters(instance.actor.parameters.list)>);
<else>
actor_<instance.id> = new <instance.actor.package>.<instance.actor.simpleName>(<parameters(instance.actor.parameters.list)>);
<endif>
<endif>
>>

scheduleActor(instance) ::= <<
<if (instance.actor || instance.broadcast)>
nbOfFiredActions = actor_<instance.id>.schedule();
if (nbOfFiredActions \< 0)
	stop = true;
else
	i += nbOfFiredActions;
<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()
///////////////////////////////////////////////////////////////////////////////

printInitializes(instances) ::= <<
<instances: printInitialize()>
>>

printInitialize(instance) ::= <<
<if (instance.actor && !instance.actor.initializes.empty)>
actor_<instance.id>.initialize();
<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs
///////////////////////////////////////////////////////////////////////////////

setupFifo(connection) ::= <<

f = new Fifo(SIZE);
actor_<connection.source.simpleName>.setFifo("<connection.sourcePort.simpleName>", f);
actor_<connection.target.simpleName>.setFifo("<connection.targetPort.simpleName>", f);
>>


///////////////////////////////////////////////////////////////////////////////
// print network
printNetwork(network, options) ::= <<
/**
 * Generated from "<network.name>"
 */
package <network.package>;

import net.sf.orcc.runtime.*;
import net.sf.orcc.runtime.actors.*;

public class <network.simpleName> implements IScheduler {

	public static final int SIZE = <options.fifoSize>;

	// Actors
	<network.instances: declareActor()>
	// Broadcasts
	<network.instances: declareBroadcast()>
	
	@Override
	public void initialize() {
		<network.instances: constructActor()>
		<network.instances: createBroadcast()>

		Fifo f;
		<network.connections: setupFifo()>
	}

	@Override
	public void schedule() {
		<printInitializes(network.instances)>
		int i = 1;
		boolean stop = false;
		int nbOfFiredActions = 0;
		while ((i \> 0) && (!stop)) {
			i = 0;
			<network.instances: scheduleActor()>
		}
	}
	
	public void setDisplayOutputStream(Object displayOstream) {
		//Actor_Display.setOutputStreamProxy(displayOstream);
	}
	
	public void runNetwork(String sourceFilename, Object displayOutputStreamProxy) {
		// Setup arguments for launch
		String[] args = {sourceFilename};
		CLIParameters.getInstance().setArguments(args);
		
		IScheduler scheduler = new <network.simpleName>();
		scheduler.initialize();
		scheduler.schedule();
		
		//Actor_Display.setOutputStreamProxy(displayOutputStreamProxy);
		//Actor_Display.closeDisplay();
	}
	
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		CLIParameters.getInstance().setArguments(args);
		
		IScheduler scheduler = new <network.simpleName>();
		scheduler.initialize();
		scheduler.schedule();
		
		//Actor_Display.closeDisplay();
	}

}

>>

debug(value) ::= <<
// <value>
>>

