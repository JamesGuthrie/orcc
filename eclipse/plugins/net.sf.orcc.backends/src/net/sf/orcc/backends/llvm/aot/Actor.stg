///////////////////////////////////////////////////////////////////////////////
// Local variables
///////////////////////////////////////////////////////////////////////////////

variableDeclaration(variable) ::= <<
<if(variable.type.list && !instance.templateData.castedListReferences.(variable))>
%<variable.indexedName> = alloca <variable.type>
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

Constant(constant, type) ::= <<
<if (constant.exprBool)><printBool(constant)><
elseif(constant.exprInt)><printInt(constant)><
elseif(constant.exprList)><printList(constant, type)><
elseif(constant.exprString)><printString(constant)><
endif>
>>

printBool(constant) ::= <<
<if(constant.value)>1<else>0<endif>
>>

printInt(constant) ::= <<
<constant>
>>

// the values of a list: {val1, val2, ..., valn}
printList(constant, type) ::= <<
[<constant.value: { elementValue |<type.type> <Constant(elementValue, type.type)>}; wrap, separator=", ">]
>>

printString(constant) ::= <<
c<constant>
>>


///////////////////////////////////////////////////////////////////////////////
// Argument type declaration
///////////////////////////////////////////////////////////////////////////////

argumentTypeDeclaration(param) ::= <<
<if(param.variable.type.string)
> i8* <
elseif(param.variable.type.list)
> <param.variable.type>* <
else
> <param.variable.type> <
endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

Var(var) ::= <<
<if(var.global)>@<else>%<endif><var.indexedName>
>>

Expr(expr) ::= <<
<if(expr.exprVar)><Var(expr.use.variable)><else><Constant(expr, expr.type)><endif>
>>

indexes(indexes) ::= <<
<indexes: { index | <if(index.type)><index.type><else>i32<endif> <Expr(index)> }; separator=", ">
>>

printParameters(arguments, parameters) ::= <<
<arguments, parameters: { arg, param | <printParameter(arg.variable.type, param)>}; separator=", ">
>>

printParameter(type, param) ::= <<
<if (param.byRef)
>TODO <
elseif(type.string)
> i8* <if(param.value.use.variable.local)> <Expr(param.value)> <else> noalias getelementptr inbounds (<param.value.type>* <Expr(param.value)>, i64 0, i64 0) <endif><
else
> <type><if(type.list)>*<endif> <Expr(param.value)> <
endif>
>>

argumentDeclaration(param) ::= <<
<if(param.variable.type.string)
> i8* %<param.variable.name><
elseif(param.variable.type.list)
><param.variable.type>* %<param.variable.name><
else
><param.variable.type> %<param.variable.name><
endif>
>>


///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////

stateVar(variable) ::= <<
@<variable.name> = <printStateVarNature(variable)> <variable.type> <initializeStateVar(variable)>
>>

printStateVarNature(variable) ::= <<
<if(variable.assignable)>global<else>constant<endif>
>>

initializeStateVar(variable) ::= <<
<if(variable.initialValue)><Constant(variable.initialValue, variable.type)><else>zeroinitializer, align 32<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

printInstructions(instructions) ::= <<
<instructions: printInstruction(); separator="\n">
>>

printInstruction(inst) ::= <<
<if(inst.assign)><printAssign(inst)><
elseif(inst.gep)><printGEP(inst)><
elseif(inst.phi)><printPhiAssignment(inst)><
elseif(inst.call)><printCall(inst)><
elseif(inst.load)><printLoad(inst)><
elseif(inst.return)><printReturn(inst)><
elseif(inst.store)><printStore(inst)><
elseif(inst.instCast)><printCast(inst)><
endif>
>>

printCall(call) ::= <<
<if(call.print)
>call i32 (i8*, ...)* @printf(<call.parameters:{param | <printParameter(param.value.type, param)>}; separator=", ">)<
else
><if(call.target)
>%<call.target.variable.indexedName> = <
endif
>call <call.procedure.returnType> @<call.procedure.name> (<printParameters(call.procedure.parameters, call.parameters)>)<
endif>
>>

printCast(cast)::= <<
%<cast.target.variable.indexedName> = <printCastOp(cast)> <printCastType(cast.source.variable)> <Var(cast.source.variable)> to <printCastType(cast.target.variable)>
>>

printCastOp(cast) ::= <<
<if(cast.source.variable.type.list)>bitcast<else><if(cast.extended)><if(cast.signed)>sext<else>zext<endif><else>trunc<endif><endif>
>>

printCastType(var) ::= <<
<var.type><if(var.type.list)>*<endif>
>>

printAssign(assign) ::= <<
%<assign.target.variable.indexedName> = <assign.value>
>>

printPhiAssignment(phi) ::= <<
<Var(phi.target.variable)> = phi <phi.target.variable.type> <printPhiPairs(phi)>
>>

printPhiPairs(phi) ::= <<
<printPhiExpr(first(phi.values), phi.target.variable.type, first(phi.block.cfgNode.predecessors).node)>, <printPhiExpr(first(rest(phi.values)), phi.target.variable.type, first(rest(phi.block.cfgNode.predecessors)).node)>
>>

printPhiExpr(expr, type, node) ::= <<
[<Expr(expr)>, %b<label(node)>]
>>

printReturn(return) ::= <<
<if(removeReturn)
><if(return.value)
>ret <return.value.type> <Expr(return.value)><
else
>ret void<
endif><
endif>
>>

printStore(store) ::= <<
store <store.target.variable.type> <Expr(store.value)>, <store.target.variable.type>* <Var(store.target.variable)>
>>

printLoad(load) ::= <<
<Var(load.target.variable)> = load <load.source.variable.type>* <Var(load.source.variable)>
>>

printGEP(gep) ::= <<
<Var(gep.target.variable)> = getelementptr <gep.source.variable.type>* <Var(gep.source.variable)>, i32 0, <indexes(gep.indexes)>
>>


///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

printNodes(nodes, removeReturn=true) ::= <<
<nodes:printNode(); separator="\n">
>>

printNode(node) ::= <<
<if(node.nodeBlock)><printBlockNode(node)><
elseif(node.nodeIf)><printIfNode(node)><
elseif(node.nodeWhile)><printWhileNode(node)><
endif>
>>

printBlockNode(blockNode) ::= <<
b<label(blockNode)>:
	<printInstructions(blockNode.instructions)>
	<if(blockNode.cfgNode.successors)>
	br label %b<printNextLabel(first(blockNode.cfgNode.successors).node)>
	<endif>
>>

printIfNode(ifNode) ::= <<
b<label(ifNode)>:
	br i1 <Expr(ifNode.condition)>, label %b<printNextLabel(first(ifNode.thenNodes))>, label %b<printNextLabel(first(ifNode.elseNodes))>

<printNodes(ifNode.thenNodes, removeReturn)>

<printNodes(ifNode.elseNodes, removeReturn)>

<printNodes(ifNode.joinNode, removeReturn)>
>>

printWhileNode(whileNode) ::= <<
b<label(whileNode.joinNode)>:
	<printInstructions(whileNode.joinNode.instructions)>
	br i1 <Expr(whileNode.condition)>, label %b<label(first(whileNode.Nodes))>, label %b<label(whileNode)>

<printNodes(whileNode.nodes, removeReturn)>

b<label(whileNode)>:
	br label %b<printNextLabel(first(whileNode.cfgNode.successors).node)>
>>

label(block) ::= "b<block.cfgNode.number>"

printNextLabel(node)::=<<
<if(node.nodeWhile)><label(node.joinNode)><else><label(node)><endif>
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<
<if(procedure.native)>
declare <procedure.returnType> @<procedure.name>(<procedure.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind
<else>
define <procedure.returnType> @<procedure.name>(<procedure.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
<if(procedure.locals)>
	<procedure.locals: variableDeclaration()>
<endif>
	br label %b<label(first(procedure.nodes))>
	
<printNodes(procedure.nodes)>
}
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// FIFO managment
///////////////////////////////////////////////////////////////////////////////

printInputId(port) ::= <<
<instance.incomingPortMap.(port).fifoId>
>>

printInputSize(port) ::= <<
<instance.incomingPortMap.(port).size>
>>

printInputPort(port) ::= <<
@fifo_<printInputId(port)>_content = external global [<printInputSize(port)> x i32]
@fifo_<printInputId(port)>_rdIndex = external global i32
@fifo_<printInputId(port)>_wrIndex = external global i32

@SIZE_<port.name> = constant i32 <printInputSize(port)>
@index_<port.name> = internal global i32 0
@numTokens_<port.name> = internal global i32 0
>>

printOutputId(port) ::= <<
<first(instance.outgoingPortMap.(port)).fifoId>
>>

printOutputSize(port) ::= <<
<first(instance.outgoingPortMap.(port)).size>
>>

printOutputPort(port) ::= <<
@fifo_<printOutputId(port)>_content = external global [<printOutputSize(port)> x i32]
@fifo_<printOutputId(port)>_rdIndex = external global i32
@fifo_<printOutputId(port)>_wrIndex = external global i32

@SIZE_<port.name> = constant i32 <printOutputSize(port)>
@index_<port.name> = internal global i32 0
@numFree_<port.name> = internal global i32 0
>>

getPortName(port) ::= <<
<instance.name>_<port.name>
>>

printReadTokensFunction(port) ::= <<
define internal void @read_<port.name>() {
<if(instance.incomingPortMap.(port))>
	%rdIndex = load i32 @fifo_<printInputId(port)>_rdIndex
	store i32 %rdIndex, i32 @index_<port.name>
	%wrIndex = load i32 @fifo_<printInputId(port)>_wrIndex
	%numTokens = sub i32 wrIndex, i32 rdIndex
	store i32 %numTokens, i32 @numTokens_<port.name>
<else>
	;; Input port <getPortName(port)> not connected
<endif>
}

define internal void @read_end_<port.name>() {
<if(instance.incomingPortMap.(port))>
	%rdIndex = load i32 @index_<port.name>
	store i32 %rdIndex, i32 @fifo_<printInputId(port)>_rdIndex
<else>
	;; Input port <getPortName(port)> not connected<
endif>
}
>>

printWriteTokensFunction(port) ::= <<
define internal void @write_<port.name>() {
	%wrIndex = load i32 @fifo_<printOutputId(port)>_wrIndex
	store i32 %wrIndex, i32 @index_<port.name>
	%rdIndex = load i32 @fifo_<printOutputId(port)>_rdIndex
	%numFree = sub i32 rdIndex, i32 wrIndex
	store i32 %numFree, i32 @numFree_<port.name>
}

define internal void @write_end_<port.name>() {
	%wrIndex = load i32 @index_<port.name>
	store i32 %wrIndex, i32 @fifo_<printOutputId(port)>_wrIndex
}
>>

printTokensFunctions() ::= <<
<instance.actor.inputs: printReadTokensFunction()>
<instance.actor.outputs: {port|<if(!port.native)><printWriteTokensFunction(port)><endif>}>
>>

printCallStartTokenFunctions() ::= <<
<instance.actor.inputs: {port|call void @read_<port.name>()}; separator="\n">
<instance.actor.outputs: {port|<if(!port.native)>call void @write_<port.name>()<endif>}; separator="\n">
>>

printCallEndTokenFunctions() ::= <<
<instance.actor.inputs: {port|call void @read_end_<port.name>()}; separator="\n">
<instance.actor.outputs: {port|<if(!port.native)>call void @write_end_<port.name>()<endif>}; separator="\n">
>>


///////////////////////////////////////////////////////////////////////////////
// Scheduler
///////////////////////////////////////////////////////////////////////////////

checkOutputPorts(action, port, restPorts, portToIndexMap, state, lastPort=false) ::= <<
<if(!lastPort)>
%has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = icmp sge i32 %status_<port.name>_<action.name><if(state)>_<state.name><endif>, <pattern.numTokensMap.(port)>
<else>
%available_output_<if(state)><state.name>_<endif><action.name>_<port.name> = icmp sge i32 %status_<port.name>_<action.name><if(state)>_<state.name><endif>, <pattern.numTokensMap.(port)>
%has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = and i1 %has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(lastPort)>, %available_output_<if(state)><state.name>_<endif><action.name>_<port.name><
endif><
if(restPorts)>
<checkOutputPorts(action, first(restPorts), rest(restPorts), portToIndexMap, state, port)><
endif>
>>

checkOutputPattern(action, pattern, state=false) ::= <<
<checkOutputPorts(action, first(pattern.ports), rest(pattern.ports), instance.actor.templateData.portToIndexByPatternMap.(pattern), state)>
>>

checkInputPorts(action, port, restPorts, portToIndexMap, state, lastPort=false) ::= <<
<if(!lastPort)>
%has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = icmp sge i32 %status_<port.name>, <pattern.numTokensMap.(port)>
<else>
%available_input_<if(state)><state.name>_<endif><action.name>_<port.name> = icmp sge i32 %status_<port.name>, <pattern.numTokensMap.(port)>
%has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = and i1 %has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(lastPort)>, %available_input_<if(state)><state.name>_<endif><action.name>_<port.name><
endif><
if(restPorts)>
<checkInputPorts(action, first(restPorts), rest(restPorts), portToIndexMap, state, port)><
endif>
>>

checkInputPattern(action, pattern, state=false) ::= <<
<checkInputPorts(action, first(pattern.ports), rest(pattern.ports), instance.actor.templateData.portToIndexByPatternMap.(pattern), state)>
>>

actionTest(action, restActions) ::= <<
	; ACTION <action.name>
<if(!action.inputPattern.empty)
>	;; Input pattern
	<checkInputPattern(action, action.inputPattern)>
	%is_schedulable_<action.name> = call i1 @<action.scheduler.name> ()
	%is_fireable_<action.name> = and i1 %is_schedulable_<action.name>, %has_valid_inputs_<action.name>_<length(action.inputPattern.ports)>
	
	br i1 %is_fireable_<action.name>, label %bb_<action.name>_check_outputs, label %bb_<action.name>_unschedulable<
else
>	;; Empty input pattern
	%is_fireable_<action.name> = call i1 @<action.scheduler.name> ()
	
	br i1 %is_fireable_<action.name>, label %bb_<action.name>_check_outputs, label %bb_<action.name>_unschedulable<
endif>


bb_<action.name>_check_outputs:
<if(!action.outputPattern.empty)
>	;; Output pattern
	<checkOutputPattern(action, action.outputPattern)>
	
	br i1 %has_valid_outputs_<action.name>_<length(action.outputPattern.ports)>, label %bb_<action.name>_fire, label %bb_finished<
else
>	;; Empty output pattern
	
	br label %bb_<action.name>_fire<
endif>


bb_<action.name>_fire:
	call void @<action.body.name> ()

	br label %bb_scheduler_start

bb_<action.name>_unschedulable:
<if(restActions)>
<actionTest(first(restActions), rest(restActions))>
<else>
	br label %bb_finished
<endif>
>>

printActionLoop(actions) ::= <<
<actionTest(first(actions), rest(actions))>
>>

actionTestState(sourceState, transition, restTransitionsList) ::= <<
	; ACTION <transition.action.name>
<if(!transition.action.inputPattern.empty)
>	;; Input pattern
	<checkInputPattern(transition.action, transition.action.inputPattern, sourceState)>
	%is_schedulable_<sourceState.name>_<transition.action.name> = call i1 @<transition.action.scheduler.name> ()
	%is_fireable_<sourceState.name>_<transition.action.name> = and i1 %is_schedulable_<sourceState.name>_<transition.action.name>, %has_valid_inputs_<sourceState.name>_<transition.action.name>_<length(transition.action.inputPattern.ports)>
	
	br i1 %is_fireable_<sourceState.name>_<transition.action.name>, label %bb_<sourceState.name>_<transition.action.name>_check_outputs, label %bb_<sourceState.name>_<transition.action.name>_unschedulable<
else
>	;; Empty input pattern
	%is_fireable_<sourceState.name>_<transition.action.name> = call i1 @<transition.action.scheduler.name> ()
	
	br i1 %is_fireable_<sourceState.name>_<transition.action.name>, label %bb_<sourceState.name>_<transition.action.name>_check_outputs, label %bb_<sourceState.name>_<transition.action.name>_unschedulable<
endif>


bb_<sourceState.name>_<transition.action.name>_check_outputs:
<if(!transition.action.outputPattern.empty)
>	;; Output pattern
	<checkOutputPattern(transition.action, transition.action.outputPattern, sourceState)>
	
	br i1 %has_valid_outputs_<sourceState.name>_<transition.action.name>_<length(transition.action.outputPattern.ports)>, label %bb_<sourceState.name>_<transition.action.name>_fire, label %bb_<sourceState.name>_finished<
else
>	;; Empty output pattern
	
	br label %bb_<sourceState.name>_<transition.action.name>_fire<
endif>


bb_<sourceState.name>_<transition.action.name>_fire:
	call void @<transition.action.body.name> ()
	
	br label %bb_s_<transition.target.name>

bb_<sourceState.name>_<transition.action.name>_unschedulable:

<if(restTransitionsList)>
<actionTestState(sourceState, first(restTransitionsList), rest(restTransitionsList))><
else
>	br label %bb_<sourceState.name>_finished

bb_<sourceState.name>_finished:
	store i32 <instance.actor.templateData.stateToLabelMap.(sourceState)>, i32* @_FSM_state
	br label %bb_finished
<endif>
>>

schedulingStates(sourceState, transitionsList) ::= <<
<actionTestState(sourceState, first(transitionsList), rest(transitionsList))>
>>

printTransition(state) ::= <<
; STATE <state.name>
bb_s_<state.name>:
	<if (actions)>
	call void @<instance.name>_outside_FSM_scheduler()
	<endif>
<schedulingStates(state, state.outgoing)>
>>

printFsmState(state) ::= <<
i32 <instance.actor.templateData.stateToLabelMap.(state)>, label %bb_s_<state.name>
>>

printFsmSwitch(fsm) ::= <<
%local_FSM_state = load i32* @_FSM_state
switch i32 %local_FSM_state, label %default [
					<fsm.states: printFsmState(); separator="\n"> ]
>>

schedulerWithFSM(actions, fsm) ::= <<
@_FSM_state = global i32 <instance.actor.templateData.stateToLabelMap.(fsm.initialState)>

<if(actions)>
define void @<instance.name>_outside_FSM_scheduler() noreturn nounwind {
bb_scheduler_start:
	;; no read/write here!
<printActionLoop(actions)>

bb_finished:
	;; no read_end/write_end here!
	ret void
}
<endif>


define void @<instance.name>_scheduler() noreturn nounwind {
bb_scheduler_start:
	<printCallStartTokenFunctions()>
	<printFsmSwitch(fsm)>
	br label %bb_scheduler_start

default:
	; TODO: print error
	br label %bb_scheduler_start

<fsm.states: printTransition(); separator="\n">

bb_finished:
	<printCallEndTokenFunctions()>
	ret void
}
>>

schedulerWithoutFSM(actions) ::= <<
define void @<instance.name>_scheduler() noreturn nounwind {
bb_scheduler_start:
	<printCallStartTokenFunctions()>
<printActionLoop(instance.actor.actionsOutsideFsm)>
bb_finished:
	<printCallEndTokenFunctions()>
	ret void
}
>>


///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

printAction(action) ::= <<
define <action.scheduler.returnType> @<action.scheduler.name>(<action.scheduler.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.scheduler.locals: variableDeclaration()>
	br label %b<label(first(action.scheduler.nodes))>
	
<printNodes(action.scheduler.nodes)>
}

define void @<action.body.name>(<action.body.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.body.locals: variableDeclaration()>
	br label %b<label(first(action.body.nodes))>

<printNodes(action.body.nodes)>
}
>>

callInitialize(initialize) ::= <<
call <initialize.body.returnType> @<initialize.body.name> ()
>>


///////////////////////////////////////////////////////////////////////////////
// Instance
///////////////////////////////////////////////////////////////////////////////

actorParameter(parameter) ::= <<
@<parameter.name> = global <parameter.type> undef
>>

printInstance(instance, options) ::= <<

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generated from "<instance.actor.name>"
declare i32 @printf(i8* noalias , ...) nounwind 

<if(instance.actor.inputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Input FIFOs
<instance.actor.inputs: { port | <if(!port.native)><printInputPort(port)><endif> }>
<endif>

<if(instance.actor.outputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Output FIFOs
<instance.actor.outputs: { port | <if(!port.native)><printOutputPort(port)><endif> }>
<endif>

<if(instance.actor.parameters)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Parameter values of the instance
<instance.actor.parameters: actorParameter(); separator="\n">
<endif>

<if(instance.actor.stateVars)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; State variables of the actor
<instance.actor.stateVars: stateVar(); separator="\n">
<endif>

<if(instance.actor.procs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Functions/procedures
<instance.actor.procs: procedure()>
<endif>

<if(instance.actor.initializes)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initializes
<instance.actor.initializes: printAction(); separator="\n\n">
<endif>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Actions
<instance.actor.actions: printAction(); separator="\n\n">

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Token functions
<printTokensFunctions()>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Action-scheduler
<if(instance.actor.fsm)>
<schedulerWithFSM(instance.actor.actionsOutsideFsm, instance.actor.fsm)>
<else>
<schedulerWithoutFSM(instance.actor.actionsOutsideFsm)>
<endif>
>>


