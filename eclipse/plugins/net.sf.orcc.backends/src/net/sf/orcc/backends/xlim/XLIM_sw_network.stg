/////////////////////////////
// Root procedure
/////////////////////////////

printNetwork(network, options) ::= <<

	#include \<stdlib.h\>
	#include "actors-config.h"
	
	<initNetwork(network)>
	
	<printMain()>

>>

/////////////////////////////
// Main
/////////////////////////////

printMain() ::= <<
int main(int argc, char *argv[]) {
	int numberOfInstances;
	AbstractActorInstance **instances;
	initNetwork(&instances, &numberOfInstances);
	executeNetwork(argc, argv, instances, numberOfInstances);
}
>>

/////////////////////////////
// Network initialization
/////////////////////////////

initNetwork(network) ::= <<
static void initNetwork(AbstractActorInstance ***pInstances, int *pNumberOfInstances) {

	int numberOfInstances = <length(network.instances)>;
	AbstractActorInstance **actorInstances = (AbstractActorInstance **) malloc(numberOfInstances * sizeof(AbstractActorInstance *));

	*pInstances=actorInstances;

	*pNumberOfInstances=numberOfInstances;

	<network.instances : declareActorInstance(); separator="\n">

	<network.instances : {instance | <initializeActorInstance(instance=instance, localFifoSize=network.portToFiFoSizeMap.(instance), index=i0)>}; separator="\n">

	<network.connections : connectPorts(); separator="\n">
}
>>

/////////////////////////////
// Declaration
/////////////////////////////

declareActorInstance(instance) ::= <<
<if(instance.actor.native)>
extern ActorClass ActorClass_<instance.actor.simpleName>;
<else>
extern ActorClass ActorClass_<instance.id>;
<endif>
AbstractActorInstance *p<instance.id>;
<instance.actor.inputs : {port|<declarePort(dir="In", port=port, id=instance.id)>}; separator="\n">
<instance.actor.outputs : {port|<declarePort(dir="Out", port=port, id=instance.id)>}; separator="\n">
>>

declarePort(dir, port, id) ::= <<
<dir>putPort *p<id>_<port.name>;
>>

/////////////////////////////
// Initialization
/////////////////////////////

initializeActorInstance(instance, localFifoSize, index) ::= <<
<if(instance.actor.native)>
p<instance.id> = createActorInstance(&ActorClass_<instance.actor.simpleName>);
<else>
p<instance.id> = createActorInstance(&ActorClass_<instance.id>);
<endif>
<instance.actor.inputs : {port | <if(localFifoSize.(port))><initializePort(dir="In",port=port,id=instance.id,n=localFifoSize.(port))><else><initializePort(dir="In",port=port,id=instance.id,n=options.fifoSize)><endif>}; separator="\n">
<instance.actor.outputs : {port | <initializePort(dir="Out",port=port,id=instance.id,n=length(instance.outgoingPortMap.(port)))>}; separator="\n">
<instance.actor.parameters : {parameter | <initializeParameter(parameter=parameter,value=instance.parameters.(parameter.name),id=instance.id)>}; separator="\n">
actorInstances[<index>] = p<instance.id>;
>>

initializePort(dir, port, id, n) ::= <<
p<id>_<port.name> = create<dir>putPort(p<id>, "<port.name>", <n>);
>>

initializeParameter(parameter, value, id) ::= <<
setParameter(p<id>, "<parameter.name>",<if(value.stringExpr)><Constant(value)><else>"<Constant(value)>"<endif>);
>>

/////////////////////////////
// Connection
/////////////////////////////

connectPorts(connection) ::= <<
connectPorts(p<connection.source.id>_<connection.sourcePort.name>, p<connection.target.id>_<connection.targetPort.name>);
>>


///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

Constant(constant) ::= <<
<if(constant.intExpr)><printExprInt(constant)><
elseif(constant.booleanExpr)><printExprBool(constant)><
elseif(constant.stringExpr)><printExprString(constant)><
elseif(constant.listExpr)><printExprList(constant)><endif>
>>

printExprBool(constant) ::= <<
<if(constant.value)>1<else>0<endif>
>>

printExprInt(number) ::= <<
<number><if(number.long)>L<endif>
>>

printExprList(constant) ::= <<
{<constant.value: Constant(); wrap, separator=", ">}
>>

printExprString(constant) ::= <<
<constant>
>>
