
printPort(port, index) ::= <<
Port("<port.name>", <index><if(port.native)>, True, <port.size><endif>)
>>

initProcessorPort(processor) ::= <<
<processor.name>_inputs = [<processor.incoming: { edge | <printPort(edge.targetPort, i0)> }; separator=", ">]
<processor.name>_outputs = [<processor.outgoing: { edge | <printPort(edge.sourcePort, i0)> }; separator=", ">]
>>

initMappedActors(processor) ::= <<
<processor.name>_instances = [<processor.mappedActors: { instance |"<instance.name>"}; separator=", ">]
>>

initProcessor(processor) ::= <<
Processor("<processor.name>", <processor.name>_instances, <processor.name>_inputs, <processor.name>_outputs)
>>

printDesign(design, options) ::= <<
# -*- coding: utf-8 -*-
#
# Generated from <design.name> using Open-RVC CAL Compiler
#

from orcc_ import *

## Ports initialization
<design.processors: initProcessorPort(); separator="\n">

## Actors initialization
<design.processors: initMappedActors(); separator="\n">

## Processors initialization
processors = [
	<design.processors: initProcessor(); separator=",\n">
]

## Network initialization
design = Design("<design.name>", processors, <if(options.fpga.altera)>True<else>False<endif>)
		
>>