GetInstanceId(instance) ::= <<
<if (instance.broadcast)>bcast_<endif><instance.id>
>>

declareBroadcast(instance) ::= <<
<if (instance.broadcast)
>
proctype <GetInstanceId(instance)> (){
	<instance.broadcast.type> temp = 0;
	do
	::	atomic{ nempty(chan_<GetInstanceId(instance)>_input) -\> 
			chan_<GetInstanceId(instance)>_input?\<temp\>;
			<instance.broadcast.outputList: { n | chan_<GetInstanceId(instance)>_output_<n>!temp;}; separator="\n">
			<instance.broadcast.outputList: { n | nfull(chan_<GetInstanceId(instance)>_output_<n>);}; separator="\n">
			chan_<GetInstanceId(instance)>_input?temp;
		}
		
	od

}<
endif>

>>

declareBroadcasts(instances) ::= <<
<instances: declareBroadcast()>
>>

///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs

allocateFifos(edge) ::= <<
<if (edge.source.broadcast || edge.source.actor)>
chan chan_<edge.id> = [<if(edge.size)><edge.size><else>SIZE<endif>] of {<edge.sourcePort.type>};
<else>
chan chan_<edge.id> = [<if(edge.size)><edge.size><else>SIZE<endif>] of {<edge.targetPort.type>};
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// assigns FIFOs

doAssignFifo(source, port, count) ::= <<
#define chan_<GetInstanceId(source)>_<port.name> chan_<count>
>>

tryAssignFifoSrc(edge) ::= <<
<if (edge.source)>
<doAssignFifo(edge.source, edge.sourcePort, edge.id)><endif>
>>

tryAssignFifoTgt(edge) ::= <<
<if (edge.target)>
<doAssignFifo(edge.target, edge.targetPort, edge.id)><endif>
>>

assignFifos(connection) ::= <<
<tryAssignFifoSrc(connection)>
<tryAssignFifoTgt(connection)>
>>



///////////////////////////////////////////////////////////////////////////////
// print network

printNetwork(network, options) ::= <<
// Generated from "<network.name>"

#define uint int
#define SIZE 1

// FIFO allocation
<network.connections: allocateFifos()>

// FIFO assignment
<network.connections: assignFifos()>

// Declear Broadcasts
<declareBroadcasts(network.instances)>

// Include the actors
<network.Instances: {instance | <if (!instance.broadcast)>#include "<instance.id>.pml"<endif>}; separator="\n">

init {
	/*Inputs here*/

	/*Start processes*/
	atomic{
		<network.Instances: {instance | run <GetInstanceId(instance)>(/*init_state*/);}; separator="\n">
	}	
}

>>

