import "net/sf/orcc/templates/LLVM_metadata.stg"


///////////////////////////////////////////////////////////////////////////////
// Local variables
///////////////////////////////////////////////////////////////////////////////

variableDeclaration(variable) ::= <<
<if(variable.type.list && !actor.templateData.castedListReferences.(variable))>
%<variable.indexedName> = alloca <variable.type>
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////

stateVar(variable) ::= <<
@<variable.name> = <if(variable.assignable)>global<else>constant<endif> <variable.type> <
if(variable.initialValue)> <ConstantValue(type=variable.type, const=variable.initialValue)> 
<else> zeroinitializer, align 32 
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

PrintInstr(parameters) ::= <<
call i32 (i8*, ...)* @printf(<parameters: PrintParameter(); separator=", ">)
>>

PrintParameter(parameter) ::= <<
<if (parameter.type.string)
> i8* noalias getelementptr inbounds (<parameter.type>* @<parameter>, i64 0, i64 0) <
else
><parameter.type> <Expr(expr=parameter, type=parameter.type)><
endif>
>>


///////////////////////////////////////////////////////////////////////////////
// ORCC IR Instructions
///////////////////////////////////////////////////////////////////////////////

printInstructions(instructions) ::= <<
<instructions: printInstruction(); separator="\n">
>>

printInstruction(inst) ::= <<
<if(inst.assign)><printAssign(inst)><
elseif(inst.gep)><printGEP(inst)><
elseif(inst.phi)><printPhiAssignment(inst)><
elseif(inst.call)><printCall(inst)><
elseif(inst.load)><printLoad(inst)><
elseif(inst.return)><printReturn(inst)><
elseif(inst.store)><printStore(inst)><
elseif(inst.instCast)><printCast(inst)><
endif>
>>

printCall(call) ::= <<
<if(call.print)> 
<PrintInstr(call.parameters)> 
<else>
<if(call.target)
>%<call.target.variable.indexedName> = <
endif
>call <call.procedure.returnType> @<call.procedure.name> (<parametersDeclaration(call.procedure.parameters, call.parameters)>)
<endif>
>>

printCast(cast)::= <<
%<cast.target.variable.indexedName> = <printCastOp(cast)> <printCastType(cast.source.variable)> %<cast.source.variable.indexedName> to <printCastType(cast.target.variable)>
>>

printCastOp(cast) ::= <<
<if(cast.source.variable.type.list)>bitcast<else><if(cast.extended)><if(cast.signed)>sext<else>zext<endif><else>trunc<endif><endif>
>>

printCastType(var) ::= <<
<var.type><if(var.type.list)>*<endif>
>>

printAssign(assign) ::= <<
%<assign.target.variable.indexedName> = <assign.value>
>>

printPhiAssignment(phi) ::= <<
<Var(phi.target.variable)> = phi <phi.target.variable.type> <printPhiPairs(phi)>
>>

printPhiPairs(phi) ::= <<
<printPhiExpr(first(phi.values), phi.target.variable.type, first(phi.block.predecessors))>, <printPhiExpr(first(rest(phi.values)), phi.target.variable.type, first(rest(phi.block.predecessors)))>
>>

printPhiExpr(expr, type, node) ::= <<
[<Expr(expr=expr, type=type)>, %b<label(node)>]
>>

printReturn(return) ::= <<
<if(return.value)
>ret <return.value.type> <Expr(expr=return.value, type=return.value.type)><
else
>ret void<
endif>
>>

printStore(store) ::= <<
<if(store.value.intExpr || store.value.booleanExpr)
>store <VarType(store.target.variable)> <store.value>, <VarType(store.target.variable)>* <Var(store.target.variable)><
else
>store <store.value.type> <Expr(expr=store.value, type=store.value.type)>, <VarType(store.target.variable)>* <Var(store.target.variable)><
endif>
>>

printLoad(load) ::= <<
<Var(load.target.variable)> = load <VarType(load.source.variable)>* <Var(load.source.variable)>
>>

printGEP(gep) ::= <<
<Var(gep.target.variable)> = getelementptr <VarType(gep.source.variable)>* <Var(gep.source.variable)>, i32 0 <if(gep.indexes)>, <indexes(gep.indexes)><endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

printNodes(nodes) ::= <<
<nodes:printNode()>
>>

printNode(node) ::= <<
<if(node.blockNode)><printBlockNode(node)><
elseif(node.ifNode)><printIfNode(node)><
elseif(node.whileNode)><printWhileNode(node)><
endif>
>>

printFirstNode(node) ::= <<
<if(node.blockNode)><printFirstBlockNode(node)><
else>printNode(node)<
endif>
>>

printBlockNode(blockNode) ::= <<
	br label %b<label(blockNode)>

b<label(blockNode)>:
	<printInstructions(blockNode.instructions)>
	
>>

printFirstBlockNode(blockNode) ::= <<
	<printInstructions(blockNode.instructions)> 
>>

printIfNode(ifNode) ::= <<
	br i1 <Expr(expr=ifNode.condition, type=ifNode.condition.type)>, label %b<label(first(ifNode.thenNodes))>, label %b<if(ifNode.elseNodes)><label(first(ifNode.elseNodes))><else><label(ifNode.joinNode)><endif>

b<label(first(ifNode.thenNodes))>: 
<printFirstNode(first(ifNode.thenNodes))> <printNodes(rest(ifNode.thenNodes))>
	br label %b<label(ifNode.joinNode)>

<if(ifNode.elseNodes)>
b<label(first(ifNode.elseNodes))>:
<printFirstNode(first(ifNode.elseNodes))> <printNodes(rest(ifNode.elseNodes))>
	br label %b<label(ifNode.joinNode)>
<endif>

b<label(ifNode.joinNode)>:
<printFirstNode(first(ifNode.joinNode))>
<printNodes(rest(ifNode.joinNode))>
>>

printWhileNode(whileNode) ::= <<
<printBlockNode(whileNode.joinNode)>
	br i1 <Expr(expr=whileNode.condition, type=whileNode.condition.type)>, label %b<label(first(whileNode.Nodes))>, label %b<label(first(whileNode.joinNode.successors))>

b<label(first(whileNode.nodes))>:
<printFirstNode(first(whileNode.nodes))>
<printNodes(rest(whileNode.nodes))>
	br label %b<label(whileNode.joinNode)>

b<label(first(whileNode.joinNode.successors))>:
>>

label(node) ::= "b<actor.templateData.nodeToLabelMap.(node)>"


///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<
<if(!procedure.native)>
define <procedure.returnType> @<procedure.name>(<procedure.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
<if(procedure.locals)>
	<procedure.locals: variableDeclaration()>
<endif>
<printNodes(procedure.nodes)>
}
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

printAction(action) ::= <<
define <action.scheduler.returnType> @<action.scheduler.name>(<action.scheduler.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.scheduler.locals: variableDeclaration()>
	<action.peekPattern.ports: { port | <fifoVar(port=port, var=action.inputPattern.portToVarMap.(port))>}; separator="\n">
<printNodes(action.scheduler.nodes)>
}

define void @<action.body.name>(<action.body.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.body.locals: variableDeclaration()>
	<action.inputPattern.ports: { port | <fifoVar(port=port, var=action.inputPattern.portToVarMap.(port))>}; separator="\n">
	<action.outputPattern.ports: { port | <fifoVar(port=port, var=action.outputPattern.portToVarMap.(port))>}; separator="\n">
<printNodes(action.body.nodes)>
}
>>


///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

actorParameter(parameter) ::= <<
@<parameter.name> = global <parameter.type> undef
>>

actor(actor, options) ::= <<

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generated from "<actor.name>"
declare i32 @printf(i8* noalias , ...) nounwind 

<if(actor.inputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Input FIFOs
<actor.inputs: fifo(); separator="\n">
<endif>

<if(actor.outputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Output FIFOs
<actor.outputs: fifo(); separator="\n">
<endif>

<if(actor.parameters)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Parameter values of the instance
<actor.parameters: actorParameter(); separator="\n">
<endif>

<if(actor.stateVars)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; State variables of the actor
<actor.stateVars: stateVar(); separator="\n">
<endif>

<if(actor.procs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Functions/procedures
<actor.procs: {proc | <procedure(procedure = proc)>}>
<endif>

<if(actor.initializes)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initializes
<actor.initializes: printAction()>
<endif>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Actions
<actor.actions: printAction()>

<decl_MD(actor)>

>>

instance(instance, options) ::= <<
<actor(instance.actor, options)>
>>
