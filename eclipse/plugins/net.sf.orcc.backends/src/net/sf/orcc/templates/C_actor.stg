///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if <value> is empty
listSize(values) ::= <<
<values : {value | [<value>]} >
>>

varDecl(variable, sep="") ::= <<
<variable.type> <variable.name><listSize(variable.type.dimensions)><sep>
>>

getPortName(port) ::= <<
<instance.id>_<port.name>
>>

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

Constant(constant) ::= <<
<(constant.class.simpleName)(constant)>
>>

BoolExpr(constant) ::= <<
<if (constant.value)>1<else>0<endif>
>>

IntExpr(number) ::= <<
<number><if (number.long)>L<endif>
>>

// the values of a list: {val1, val2, ..., valn}
ListExpr(constant) ::= <<
{<constant.value: Constant(); wrap, separator=", ">}
>>

StringExpr(constant) ::= <<
"<constant>"
>>

///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////
stateVar(variable) ::= <<
<if(variable.initialized)>
<if(!variable.assignable)>
<if(!variable.type.list)>
#define <variable> <Constant(variable.initialValue)>
<else>
static const <varDecl(variable)> = <Constant(variable.initialValue)>;
<endif>
<else>
<if(variable.type.list)>
static <variable.type> <variable.name>_backup<listSize(variable.type.dimensions)> = <Constant(variable.initialValue)>;
<endif>
static <varDecl(variable)>;
<endif>
<else>
static <varDecl(variable)>;
<endif>
>>

initializeStateVar(variable) ::= <<
<if(variable.assignable && variable.initialized)>
<if(!variable.type.list)>
<variable.name> = <Constant(variable.initialValue)>;
<else>
memcpy(<variable.name>, <variable.name>_backup, sizeof(<variable.name>_backup));
<endif>
<endif>
>>

initializeFunction() ::= <<
<if(instance.actor.initializes)>
<instance.actor.initializes: printAction()>
static void initialize(struct schedinfo_s *si) {
	int i = 0;
	<if(instance.actor.initializes)>
	<printActions(instance.actor.initializes)>
	<endif>
	
finished:
	// no read_end/write_end here!
	return;
}

<endif>
void <instance.id>_initialize(<instance.actor.inputs.list: { port | unsigned int fifo_<port.name>_id}; separator=", ">) {
	<if(instance.actor.initializes)>
	struct schedinfo_s si;
	si.num_firings = 0;
	<endif>
	<if(instance.actor.actionScheduler.fsm)>
	
	/* Set initial state to current FSM state */
	_FSM_state = my_state_<instance.actor.actionScheduler.fsm.initialState>;
	<endif>
	
	/* Set initial value to global variable */
	<instance.actor.stateVars.list: initializeStateVar()>
	
	/* Initialize input FIFOs id */
	<instance.actor.inputs.list: { port | fifo_<getPortName(port)>_id = fifo_<port.name>_id; }; separator="\n"> 
	<if(instance.actor.initializes)>
	
	/* Launch CAL initialize procedure */
	initialize(&si);
	<endif>
}
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

printAssign(assign) ::= <<

<assign.target> = <assign.value>;
>>

printFormatType(type) ::= <<
<if (type.bool)
>i<
elseif (type.float)
>f<
elseif (type.int)
><if (type.long)>ll<endif>i<
elseif (type.list)
>p<
elseif (type.string)
>s<
elseif (type.uint)
><if (type.long)>ll<endif>u<
elseif (type.void)
>p<
endif>
>>

printFormat(parameter) ::= <<
<if (parameter.stringExpr)
>"<parameter>"<
else
> "%<printFormatType(parameter.type)>" <
endif>
>>

printParameter(parameter) ::= <<
<if (!parameter.stringExpr)>, <parameter><endif>
>>

printCall(call) ::= <<

<if(call.print)>printf(<call.parameters: printFormat()><call.parameters: printParameter()>);<
else
><if(call.target)><call.target> = <endif><call.procedure>(<call.parameters; separator=", ">);<
endif>
>>

getPort(variable) ::= <<
<if (action.inputPattern.inverseVariableMap.(variable))
><action.inputPattern.inverseVariableMap.(variable).name><
else
><action.outputPattern.inverseVariableMap.(variable).name><
endif>
>>

printLoad(load) ::= <<

<if (action.inputPattern.inverseVariableMap.(load.source.variable) || action.outputPattern.inverseVariableMap.(load.source.variable))
><load.target> = tokens_<getPort(load.source.variable)>[(index_<getPort(load.source.variable)> + <first(load.indexes)>) % SIZE_<getPort(load.source.variable)>];<
else
><load.target> = <load.source><load.indexes : {index | [<index>]}>;<
endif>
>>

printReadEnd(port, numTokens) ::= <<

<if(options.enableTrace)>
{
	int i;
	for (i = 0; i \< <numTokens>; i++) {
		fprintf(file_<port.name>, "%<printFormatType(port.type)>\n", tokens_<port.name>[index_<port.name> + i]);
	}
}

<endif
>index_<port.name> += <numTokens>;
>>

printReturn(return) ::= <<
<if(return.value)>
return <return.value>;<
endif>
>>

printStore(store) ::= <<

<if (action.inputPattern.inverseVariableMap.(store.target) || action.outputPattern.inverseVariableMap.(store.target))
>tokens_<getPort(store.target)>[(index_<getPort(store.target)> + <first(store.indexes)>) % SIZE_<getPort(store.target)>] = <store.value>;<
else
><store.target><store.indexes : {index | [<index>]}> = <store.value>;<
endif>
>>

printWriteEnd(port, numTokens) ::= <<

<if(options.enableTrace)>
{
	int i;
	for (i = 0; i \< <numTokens>; i++) {
		fprintf(file_<port.name>, "%<printFormatType(port.type)>\n", tokens_<port.name>[index_<port.name> + i]);
	}
}
<endif>

index_<port.name> += <numTokens>;
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

printInstructions(instructions) ::= <<
<instructions: {instr | <
if (instr.assign)><printAssign(assign=instr)><
elseif (instr.call)><printCall(call=instr)><
elseif (instr.load)><printLoad(load=instr)><
elseif (instr.return)><printReturn(return=instr)><
elseif (instr.store)><printStore(store=instr)><
endif>}>
>>

printNodes(nodes) ::= <<
<nodes: {node | <if (node.blockNode)><printBlockNode(node)><
elseif (node.ifNode)><printIfNode(node)><
elseif (node.whileNode)><printWhileNode(node)><
endif>}>
>>

// block node
printBlockNode(blockNode) ::= <<
<printInstructions(blockNode.instructions)>
>>

// if node
printIfNode(ifNode) ::= <<

if (<ifNode.value>) {
	<printNodes(ifNode.thenNodes)>
}<if(ifNode.elseNodes)> else {
	<printNodes(ifNode.elseNodes)>
}<endif>
<printBlockNode(ifNode.joinNode)>
>>

// while node
printWhileNode(whileNode) ::= <<

while (<whileNode.value>) {
	<printNodes(whileNode.nodes)>
}
<printBlockNode(whileNode.joinNode)>
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

printProcedure(procedure,action="") ::= <<
<if(procedure.native)>
extern <procedure.returnType> <procedure.name>(<
  procedure.parameters.list: {param | <varDecl(variable=param)>}; wrap, anchor, separator=", ">);
<else>
static <procedure.returnType> <procedure.name>(<
  procedure.parameters.list: {param | <varDecl(variable=param)>}; wrap, anchor, separator=", ">) {
<if(procedure.locals.list)>
	<procedure.locals.list: {local | <varDecl(variable=local,sep=";\n")>}>
<endif>
	<printNodes(procedure.nodes)>
}

<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

printAction(action) ::= <<
static void <action.body.name>() {
<if(action.body.locals.list)>
	<action.body.locals.list: {local | <varDecl(variable=local,sep=";\n")>}>
<endif>
	<printNodes(action.body.nodes)>
	<action.inputPattern.ports: { port |<printReadEnd(port=port, numTokens=action.inputPattern.numTokensMap.(port))>}>
	<action.outputPattern.ports: { port |<printWriteEnd(port=port, numTokens=action.outputPattern.numTokensMap.(port))>}>
}

<printProcedure(procedure=action.scheduler, action=action)>
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

printOutputPatternPort(port) ::= <<
if (index_<port.name> + <pattern.numTokensMap.(port)> \> numFree_<port.name>) {
	stop = 1;
	<options.network.successorsMap.(instance).(port): { successor | sched_add_schedulable(<instance.id>.sched, &<successor.id>, RING_TOPOLOGY);}; separator="\n">
}
>>

printOutputPattern(pattern) ::= <<
int stop = 0;
<pattern.ports: printOutputPatternPort(); separator="\n">
if (stop != 0) {
>>

checkInputPattern(pattern) ::= <<
<pattern.ports: { port | index_<port.name> + <pattern.numTokensMap.(port)> \<= numTokens_<port.name> && }>
>>

printReadTokensFunction(port) ::= <<


static void read_<port.name>() {
	index_<port.name> = <getPortName(port)>-\>read_inds[fifo_<getPortName(port)>_id];
	numTokens_<port.name> = index_<port.name> + fifo<printMedium(port)>_<port.type>_get_num_tokens(<getPortName(port)>, fifo_<getPortName(port)>_id);
}

static void read_end_<port.name>() {
	<getPortName(port)>-\>read_inds[fifo_<getPortName(port)>_id] = index_<port.name>;
}
>>

printWriteTokensFunction(port) ::= <<


static void write_<port.name>() {
	index_<port.name> = <getPortName(port)>-\>write_ind;
	numFree_<port.name> = index_<port.name> + fifo<printMedium(port)>_<port.type>_get_room(<getPortName(port)>, NUM_READERS_<port.name>);
}

static void write_end_<port.name>() {
	<getPortName(port)>-\>write_ind = index_<port.name>;
}
>>

printTokensFunctions() ::= <<
<instance.actor.inputs.list: printReadTokensFunction()>
<instance.actor.outputs.list: printWriteTokensFunction()>
>>

printCallTokenFunctions() ::= <<
<instance.actor.inputs.list: {port|read_<port.name>();
}>
<instance.actor.outputs.list: {port|write_<port.name>();
}>
>>

printOpenFiles() ::= <<
<instance.actor.inputs.list:
	{ port | file_<port.name> = fopen("<getPortName(port)>.txt", "a");
}><instance.actor.outputs.list:
	{ port | file_<port.name> = fopen("<getPortName(port)>.txt", "a");
}>
>>

printCloseFiles() ::= <<
<instance.actor.inputs.list:
	{ port | fclose(file_<port.name>);
}><instance.actor.outputs.list:
	{ port | fclose(file_<port.name>);
}>
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionTest(action, restActions) ::= <<
if (<checkInputPattern(action.inputPattern)>isSchedulable_<action>()) {
	<if(action.outputPattern)>
	<printOutputPattern(pattern=action.outputPattern)>
		si-\>num_firings = i;
		si-\>reason = full;
		goto finished;
	}
	<endif>
	<action.body>();
	i++;
} else {
	<printActions(restActions)>
}
>>

printActions(actions) ::= <<
<if (first(actions))
><actionTest(action=first(actions), restActions=rest(actions))><
else
><printTransitionPattern(pattern=instance.actor.templateData.inputPattern,
	maskInputs=instance.actor.templateData.maskInputs)>
goto finished;<
endif>
>>

printActionLoop(actions) ::= <<
while (1) {
	<printActions(actions)>
}
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionTestState(state, restStates) ::= <<
if (<checkInputPattern(state.action.inputPattern)>isSchedulable_<state.action>()) {
	<if (state.action.outputPattern)>
	<printOutputPattern(state.action.outputPattern)>
		_FSM_state = my_state_<transition.sourceState>;
		si-\>num_firings = i;
		si-\>reason = full;
		goto finished;
	}
	<endif>
	<state.action.body>();
	i++;
	goto l_<state.targetState>;
} else {
	<schedulingStates(restStates)>
}
>>

printInputPatternPort(port) ::= <<
if (index_<port.name> + <pattern.numTokensMap.(port)> \> numTokens_<port.name>) {
	sched_add_schedulable(<instance.id>.sched, &<options.network.predecessorsMap.(instance).(port).id>, RING_TOPOLOGY);
}
>>

printTransitionPattern(pattern, maskInputs) ::= <<
<pattern.ports: printInputPatternPort(); separator="\n">
si-\>num_firings = i;
si-\>reason = starved;
>>

schedulingStates(states) ::= <<
<if (first(states))
><actionTestState(state=first(states), restStates=rest(states))><
else
><printTransitionPattern(pattern=instance.actor.templateData.transitionPattern.(transition),
	maskInputs=instance.actor.templateData.maskInputs)>
_FSM_state = my_state_<transition.sourceState>;
goto finished;<
endif>
>>

printTransition(transition) ::= <<


l_<transition.sourceState>:
	<if (actions)>
	<instance.id>_outside_FSM_scheduler(si);
	i += si-\>num_firings;
	<endif>
	<if (transition.nextStateInfo.empty)>
	printf("stuck in state \"<transition.sourceState>\" in the instance <instance.id>\n");
	wait_for_key();
	exit(1);
	<else>
	<schedulingStates(transition.nextStateInfo)>
	<endif>
>>

switchTransition(transition) ::= <<

case my_state_<transition.sourceState>:
	goto l_<transition.sourceState>;
>>

printSwitch(transitions) ::= <<
switch (_FSM_state) {
<transitions: switchTransition()>
default:
	printf("unknown state in <instance.id>.c : %s\n", stateNames[_FSM_state]);
	wait_for_key();
	exit(1);
}
>>

schedulerFSM(actions, fsm) ::= <<
<if(actions)>
void <instance.id>_outside_FSM_scheduler(struct schedinfo_s *si) {
	int i = 0;

	<printActionLoop(actions)>

finished:
	// no read_end/write_end here!
	return;
}
<endif>

void <instance.id>_scheduler(struct schedinfo_s *si) {
	int i = 0;

	<printCallTokenFunctions()>
<if(options.enableTrace)>
	<printOpenFiles()>
<endif>

	// jump to FSM state 
	<printSwitch(fsm.transitions)>

	// FSM transitions
<fsm.transitions: printTransition()>
finished:
<if(options.enableTrace)>
	<printCloseFiles()>
<endif>
	<instance.actor.inputs.list: {port|read_end_<port.name>();}; separator="\n">
	<instance.actor.outputs.list: {port|write_end_<port.name>();}; separator="\n">
}

>>

statesFSM(fsm) ::= <<
enum states {
	my_state_<first(fsm.states)> = 0,
	<rest(fsm.states) : {state | my_state_<state>}; separator=",\n">
};

static char *stateNames[] = {
	<fsm.states : {state | "<state>"}; separator=",\n">
};

static enum states _FSM_state;
>>

parameters(parameters) ::= <<
<parameters.keys: { k | #define <k> <Constant(parameters.(k))>
}>
>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

MediumInclude(medium) ::= <<
#include "orcc_fifo<medium>.h"
>>

printMediumInclude(mediums) ::= <<
<mediums : MediumInclude(); separator="\n">
>>

printMedium(port) ::= <<
<options.network.templateData.portMedium.(instance).(port).value>
>>

printFifoSize(size) ::= <<
<if(size)><size><else>SIZE<endif>
>>

getNumReaders(instance, port) ::= <<
<length(options.network.outgoingMap.(instance).(port))>
>>

printInputPort(port) ::= <<
static unsigned int index_<port.name>;
static unsigned int numTokens_<port.name>;
#define NUM_READERS_<port.name> <getNumReaders(instance=options.network.predecessorsMap.(instance).(port), port=options.network.incomingMap.(instance).(port).source)>
#define SIZE_<port.name> <printFifoSize(options.network.incomingMap.(instance).(port).size)>
#define tokens_<port.name> <getPortName(port)>-\>contents


>>

printOutputPort(port) ::= <<
static unsigned int index_<port.name>;
static unsigned int numFree_<port.name>;
#define NUM_READERS_<port.name> <getNumReaders(instance, port)>
#define SIZE_<port.name> <printFifoSize(first(options.network.outgoingMap.(instance).(port)).size)>
#define tokens_<port.name> <getPortName(port)>-\>contents


>>

instance(instance, options) ::= <<
// Source file is "<instance.actor.file>"

#include \<stdio.h\>
#include \<stdlib.h\>

#include "orcc_types.h"
#include "orcc_fifo.h"
#include "orcc_util.h"
#include "orcc_scheduler.h"
<printMediumInclude(options.network.templateData.listAllMedium.(instance))>

#define SIZE <options.("fifoSize")>

#define RING_TOPOLOGY <if(options.ringTopology)>1<else>0<endif>

////////////////////////////////////////////////////////////////////////////////
// Instance
extern struct actor_s <instance.id>;

////////////////////////////////////////////////////////////////////////////////
// Input FIFOs
<instance.actor.inputs.list: { port | extern struct fifo<printMedium(port)>_<port.type>_s *<getPortName(port)>;}; separator="\n">
<instance.actor.inputs.list: printInputPort()>
<if(options.enableTrace)>
<instance.actor.inputs.list: { port | FILE *file_<port.name>;}; separator="\n">
<endif>

////////////////////////////////////////////////////////////////////////////////
// Predecessors
<instance.actor.inputs.list: { port | extern struct actor_s <options.network.predecessorsMap.(instance).(port).id>;}; separator="\n">

////////////////////////////////////////////////////////////////////////////////
// Output FIFOs
<instance.actor.outputs.list: { port | extern struct fifo<printMedium(port)>_<port.type>_s *<getPortName(port)>;}; separator="\n">
<instance.actor.outputs.list: printOutputPort()>
<if(options.enableTrace)>
<instance.actor.outputs.list: { port | FILE *file_<port.name>;}; separator="\n">
<endif>

////////////////////////////////////////////////////////////////////////////////
// Successors
<instance.actor.outputs.list: { port | <options.network.successorsMap.(instance).(port): { successor | extern struct actor_s <successor.id>;}; separator="\n">}; separator="\n">

////////////////////////////////////////////////////////////////////////////////
// Input FIFOs Id
<instance.actor.inputs.list: { port | static unsigned int fifo_<getPortName(port)>_id; }; separator="\n"> 

////////////////////////////////////////////////////////////////////////////////
// Parameter values of the instance
<parameters(instance.parameters)>
////////////////////////////////////////////////////////////////////////////////
// State variables of the actor
<instance.actor.stateVars.list: stateVar()>
<if(instance.actor.actionScheduler.fsm)>
////////////////////////////////////////////////////////////////////////////////
// Initial FSM state of the actor
<statesFSM(fsm=instance.actor.actionScheduler.fsm)>
<endif>
////////////////////////////////////////////////////////////////////////////////
// Functions/procedures
<instance.actor.procs.list: printProcedure()>
////////////////////////////////////////////////////////////////////////////////
// Actions
<instance.actor.actions: printAction()>

////////////////////////////////////////////////////////////////////////////////
// Token functions
<printTokensFunctions()>

////////////////////////////////////////////////////////////////////////////////
// Initializes
<initializeFunction()>

////////////////////////////////////////////////////////////////////////////////
// Action scheduler
<if(instance.actor.actionScheduler.fsm)>
<schedulerFSM(actions=instance.actor.actionScheduler.actions, fsm=instance.actor.actionScheduler.fsm)>
<else>
void <instance.id>_scheduler(struct schedinfo_s *si) {
	int i = 0;
	si-\>ports = 0;

	<printCallTokenFunctions()>
<if(options.enableTrace)>
	<printOpenFiles()>
<endif>

	<printActionLoop(instance.actor.actionScheduler.actions)>

finished:
<if(options.enableTrace)>
	<printCloseFiles()>
<endif>
	<instance.actor.inputs.list: {port|read_end_<port.name>();}; separator="\n">
	<instance.actor.outputs.list: {port|write_end_<port.name>();}; separator="\n">
}
<endif>

>>
