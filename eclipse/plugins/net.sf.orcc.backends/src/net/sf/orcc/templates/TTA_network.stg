

network(network, options) ::= <<
-------------------------------------------------------------------------------
-- Title      : Network: <network.name>
-- Project    : 
-------------------------------------------------------------------------------
-- File       : <network.name>.vhd
-- Author     : Orcc - TTA
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------


------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library work;

------------------------------------------------------------------------------
entity top is
  port
    (
      hw_clk : in  std_logic;
      button : in  std_logic_vector(1 to 1);
      st2clk : out std_logic;
      leds   : out std_logic_vector(8 downto 0)
      );
end top;

------------------------------------------------------------------------------
architecture bdf_type of top is

  ---------------------------------------------------------------------------
  -- Components declaration
  ---------------------------------------------------------------------------
  component tta_fifo
    port(wrreq			: in  std_logic;
         reset_n		: in  std_logic;
         clk			: in  std_logic;
         rdreq			: in  std_logic;
         data			: in  std_logic_vector(31 downto 0);
         q				: out std_logic_vector(31 downto 0);
         status			: out std_logic_vector(8 downto 0)
         );
  end component;

  component mainpll
    port(inclk0			: in  std_logic;
         c0				: out std_logic
         );
  end component;

  component clock_div
    port(inclk0 		: in  std_logic;
         c0     		: out std_logic
         );
  end component;

  component button_debouncer
    generic (counter_max : integer;
             preset_val  : integer
             );
    port(clk      		: in  std_logic;
         rst_n    		: in  std_logic;
         data_in  		: in  std_logic;
         data_out 		: out std_logic
         );
  end component;
  
  <components(network)>
  ---------------------------------------------------------------------------
  
  
  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------
  <signals(network)>
  ---------------------------------------------------------------------------

end bdf_type;

>>


///////////////////////////////////////////////////////////////////////////////
// Components
///////////////////////////////////////////////////////////////////////////////

components(network) ::= <<
<network.instances: component(); separator="\n\n">
>>

component(instance) ::= <<
<if(instance.actor)
>component processor_<instance.id>
  port(clk			: in  std_logic;
       <instance.actor.inputs: inputPort(); separator="\n">
       <instance.actor.outputs: outputPort(); separator="\n">
       reset_n		: in  std_logic
       );
end component;<
elseif(instance.broadcast)
>component processor_<instance.id>
  port(clk			: in  std_logic;
       data_0_in		: in  std_logic_vector(31 downto 0);
       status_0_in	: in  std_logic_vector(8 downto 0);
       ack_0_in		: out std_logic;
       <instance.broadcast.outputList: { index | <outputPortBroadcast(index)> }; separator="\n">
       reset_n		: in  std_logic
       );
end component;<
endif>
>>

inputPort(port) ::= <<
data_<indexPort(port)>_in		: in  std_logic_vector(31 downto 0);
status_<indexPort(port)>_in	: in  std_logic_vector(8 downto 0);
ack_<indexPort(port)>_in		: out std_logic;
>>

outputPort(port) ::= <<
data_<indexPort(port)>_out		: out std_logic_vector(31 downto 0);
status_<indexPort(port)>_out	: in  std_logic_vector(8 downto 0);
dv_<indexPort(port)>_out		: out std_logic;
>>

outputPortBroadcast(index) ::= <<
data_<index>_out		: out std_logic_vector(31 downto 0);
status_<index>_out	: in  std_logic_vector(8 downto 0);
dv_<index>_out		: out std_logic;
>>

indexPort(port) ::= <<
<instance.actor.templateData.portToIndexMap.(port)>
>>


///////////////////////////////////////////////////////////////////////////////
// Signals
///////////////////////////////////////////////////////////////////////////////

signals(network) ::= <<
<network.instances: { instance | <instanceSignals(instance, network.incomingMap.(instance), network.outgoingMap.(instance))> }; separator="\n\n">
>>

instanceSignals(instance, incomingMap, outgoingMap) ::= <<
-- Instance: <instance.id> 
<incomingMap.keys: { port | <inputPortSignals(port, incomingMap.(port))> }; separator="\n">
<outgoingMap.keys: { port | <outputPortSignals(port, outgoingMap.(port))> }; separator="\n">
>>

inputPortSignals(port, connection) ::= <<
---- Input port: <port.name>
signal fifo_<indexConnection(connection)>_clk		: std_logic;
signal fifo_<indexConnection(connection)>_wrreq		: std_logic;
signal fifo_<indexConnection(connection)>_data		: std_logic_vector(31 downto 0);
>>

outputPortSignals(port, connections) ::= <<
---- Output port: <port.name>
<connections: outputConnectionSignals(); separator="\n">
>>

outputConnectionSignals(connection) ::= <<
signal fifo_<indexConnection(connection)>_rdreq		: std_logic;
signal fifo_<indexConnection(connection)>_q			: std_logic_vector(31 downto 0);
signal fifo_<indexConnection(connection)>_status		: std_logic_vector(8 downto 0);
>>

indexConnection(connection) ::= <<
<network.connectionMap.(connection)>
>>