
indexPort(port) ::= <<
<if(instance.actor)
><instance.actor.templateData.portToIndexMap.(port)><
elseif(instance.broadcast)
><instance.broadcast.portMap.(port)><
endif>
>>

port(port) ::= <<
Port('<port.name>', <indexPort(port)>)
>>

initPorts(instance) ::= <<
<if(instance.actor)
><instance.id>_inputs = [<instance.actor.inputs: port(); separator=", ">]
<instance.id>_outputs = [<instance.actor.outputs: port(); separator=", ">]<
elseif(instance.broadcast)
><instance.id>_inputs = [<port(instance.broadcast.input)>]
<instance.id>_outputs = [<instance.broadcast.outputs.list: port(); separator=", ">]<
endif>
>>

initInstance(instance) ::= <<
Instance('<instance.id>', <instance.id>_inputs, <instance.id>_outputs)
>>

script(network, options) ::= <<
#!/usr/bin/env python
#
# Generated from <network.name> using Open-RVC CAL Compiler
#

## Ports initialization
<network.instances: initPorts(); separator="\n">

## Instances initialization
instances = [<network.instances: initInstance(); wrap, separator=", ">]
		
>>