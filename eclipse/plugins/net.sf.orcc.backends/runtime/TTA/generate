#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, IRISA
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#   * Neither the name of IRISA nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# @author Herve Yviquel

from informations_.informations import *
from orcc_ import *
import getopt
import os
import shutil
import sys
import time


def usage():
    print "Open RVC-CAL Compiler - TTA backend"
    print "generate - Software/Hardware Generator for Transport Trigger Architecture"
    print "Usage: generate [options] input_directory"
    print ""
    print "Options:"
    print "-c, --compile=[options]  \t Compile the application from the generated LLVM assembly code into TTA binary"
    print "-d, --debug \t\t\t Debug mode, generate extra files and print additionnal information"
    print "-g, --generate=[options] \t Generate the VHDL files of the TTA processors"
    print "-s, --simulate \t\t\t Simulate the generated code with the TCE simulator (FIFO traces have to be in 'trace' directory)"
    print "--clean \t\t\t Clean source directory ('generated') and build directory ('build-generated')"
    

def compile(arg, debug, target):
    start = time.time()

    print "*********************************************************************"
    print "* Compile the application for TTA"
    print "*********************************************************************"

    network.compile(target, libPath, arg.split(), debug)

    print "* Compilation of %d instances done in %f seconds." % (len(network.instances), time.time() - start)


def simulate(debug, target):
    start = time.time()

    print "*********************************************************************"
    print "* Simulate the execution of the application on  each TTA"
    print "*********************************************************************"

    network.simulate(target, libPath, tracePath)

    print "* Simulation of %d instances done in %f seconds." % (len(network.instances), time.time() - start)


def generate(arg, debug, target):
    start = time.time()

    print "*********************************************************************"
    print "* Generate the TTA processors"
    print "*********************************************************************"
    
    network.generate(target, libPath, arg.split(), debug)

    print "* Generation of %d instances done in %f seconds." % (len(network.instances), time.time() - start)



try:
	opts, args = getopt.getopt(sys.argv[1:], "hcsgdx:v", ["help", "compile=", "simulate", "generate=", "debug"])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(2)
	
debug = False

for o, a in opts:
	if o in ("-d", "--debug"):
		debug = True
	if o in ("-h", "--help"):
		usage()
		sys.exit()

if len(args) == 0:
	sys.exit()

# Get useful path
pathname = os.path.dirname(sys.argv[0])
libPath = os.path.abspath(pathname)
srcPath = os.path.abspath(args[0])
tracePath = os.path.join(srcPath, "trace")
	
sys.path.insert(0, libPath)
sys.path.insert(0, srcPath)

			
for o, a in opts:
	if o in ("-c", "--compile"):
		compile(a, debug, srcPath)

for o, a in opts:
	if o in ("-s", "--simulate"):
		simulate(debug, srcPath)

for o, a in opts:
	if o in ("-g", "--generate"):
		generate(a, debug, srcPath)


