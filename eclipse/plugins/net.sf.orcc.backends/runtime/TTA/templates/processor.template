-------------------------------------------------------------------------------
-- Title      : Instance: {{id}}
-- Project    : 
-------------------------------------------------------------------------------
-- File       : processor_{{id}}.vhd
-- Author     : Orcc - TTA
-- Company    : 
-- Created    : 
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Copyright (c)  
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 
-------------------------------------------------------------------------------


------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library work;
use work.processor_{{id}}_tl_globals.all;
use work.processor_{{id}}_tl_imem_mau.all;
use work.processor_{{id}}_tl_params.all;


------------------------------------------------------------------------------
entity processor_{{id}} is
  generic
    (
      device_family : string
      );
  port
    (
      clk          : in  std_logic;
{{for input in inputs}}
{{if input.isNative}}
      {{input.name}}     : in  std_logic_vector({{input.size - 1}} downto 0);     
{{else}}
      data_{{input.index}}_in    : in  std_logic_vector(31 downto 0);
      status_{{input.index}}_in  : in  std_logic_vector(31 downto 0);
      ack_{{input.index}}_in     : out std_logic;
{{endif}}
{{endfor}}
{{for output in outputs}}
{{if output.isNative}}
      {{output.name}}     : out  std_logic_vector({{output.size - 1}} downto 0);     
{{else}}
      data_{{output.index}}_out   : out std_logic_vector(31 downto 0);
      status_{{output.index}}_out : in  std_logic_vector(31 downto 0);
      dv_{{output.index}}_out     : out std_logic;
{{endif}}
{{endfor}}
      rst_n          : in  std_logic
      );
end processor_{{id}};


------------------------------------------------------------------------------
architecture bdf_type of processor_{{id}} is

{{if not targetAltera}}
  ---------------------------------------------------------------------------
  -- Components declaration
  ---------------------------------------------------------------------------
  component dram_{{id}}
    port (
      clka  : in  std_logic;
      wea   : in  std_logic_vector(3 downto 0);
      addra : in  std_logic_vector({{dram_addr-1}} downto 0);
      dina  : in  std_logic_vector({{dram_width-1}} downto 0);
      douta : out std_logic_vector({{dram_width-1}} downto 0));
  end component;

  component irom_{{id}}
    port (
      clka  : in  std_logic;
      addra : in  std_logic_vector({{irom_addr-1}} downto 0);
      douta : out std_logic_vector({{irom_width-1}} downto 0));
  end component;
  
{{endif}}
  ---------------------------------------------------------------------------
  -- Signals declaration
  ---------------------------------------------------------------------------
  signal dram_addr          : std_logic_vector(fu_LSU_addrw-2-1 downto 0);
  signal imem_addr          : std_logic_vector(IMEMADDRWIDTH-1 downto 0);
  signal wren_wire          : std_logic;
  signal bytemask_wire      : std_logic_vector(fu_LSU_dataw/8-1 downto 0);
  signal dram_data_in_wire  : std_logic_vector(fu_LSU_dataw-1 downto 0);
  signal dram_data_out_wire : std_logic_vector(fu_LSU_dataw-1 downto 0);
  signal wren_x_wire        : std_logic;
  signal idata_wire         : std_logic_vector(IMEMWIDTHINMAUS*IMEMMAUWIDTH-1 downto 0);
{{if not targetAltera}}
  signal bytemask_i         : std_logic_vector(fu_LSU_dataw/8-1 downto 0);
  signal bytemask_i2        : std_logic_vector(fu_LSU_dataw/8-1 downto 0);
{{endif}}
{{for input in inputs}}
{{if input.isNative}}
  signal s_{{input.name}} : std_logic_vector(31 downto 0) := (others => '0');
{{endif}}
{{endfor}}
{{for output in outputs}}
{{if output.isNative}}
  signal s_{{output.name}} : std_logic_vector(31 downto 0) := (others => '0');
{{endif}}
{{endfor}}

  ---------------------------------------------------------------------------

begin

{{for input in inputs}}
{{if input.isNative}}
  {{input.name}} <= s_{{input.name}}({{output.size - 1}} downto 0);
{{endif}}
{{endfor}}
{{for output in outputs}}
{{if output.isNative}}
  {{output.name}} <= s_{{output.name}}({{output.size - 1}} downto 0);
{{endif}}
{{endfor}}

  wren_wire <= not(wren_x_wire);

{{if targetAltera}}

  inst_dram_{{id}} : entity work.dram
    generic map(size          => {{dram_depth}},
                width         => {{dram_width}},
                widthu		  => {{dram_addr}},
                init_file     => "dram_{{id}}.mif",
                device_family => device_family)
    port map(clock   => clk,
             wren    => wren_wire,
             address => dram_addr({{dram_addr-1}} downto 0),
             byteena => bytemask_wire,
             data    => dram_data_in_wire,
             q       => dram_data_out_wire);

  inst_irom_{{id}} : entity work.irom
    generic map(size          => {{irom_depth}},
                width         => {{irom_width}},
                widthu		  => {{irom_addr}},
                init_file     => "irom_{{id}}.mif",
                device_family => device_family)
    port map(clock   => clk,
             address => imem_addr({{irom_addr-1}} downto 0),
             q       => idata_wire);
{{else}}
  bytemask_i2 <= wren_wire & wren_wire & wren_wire & wren_wire;
  bytemask_i  <= bytemask_i2 and bytemask_wire;

  inst_irom_{{id}} : irom_{{id}}
    port map (
      clka  => clk,
      addra => imem_addr({{irom_addr-1}} downto 0),
      douta => idata_wire);

  inst_dram_{{id}} : dram_{{id}}
    port map (
      clka  => clk,
      wea   => bytemask_i,
      addra => dram_addr({{dram_addr-1}} downto 0),
      dina  => dram_data_in_wire,
      douta => dram_data_out_wire);
{{endif}}

  processor_{{id}} : entity work.processor_{{id}}_tl
    port map(clk                        => clk,
             busy                       => '0',
             imem_addr                  => imem_addr,
             imem_data                  => idata_wire,
             pc_init                    => (others => '0'),
             fu_LSU_dmem_data_in        => dram_data_out_wire,
             fu_LSU_dmem_data_out       => dram_data_in_wire,
             fu_LSU_dmem_addr           => dram_addr,
             fu_LSU_dmem_wr_en_x(0)     => wren_x_wire,
             fu_LSU_dmem_bytemask       => bytemask_wire,
{{for input in inputs}}
{{for i in range(8)}}
{{if i == input.index}}
{{if input.isNative}}
             fu_STREAM_IN_{{input.index}}_ext_data{{i}}    => s_{{input.name}},
             fu_STREAM_IN_{{input.index}}_ext_status{{i}}  => (0=>'1', others => '0'),
{{else}}
             fu_STREAM_IN_{{input.index}}_ext_data{{i}}    => data_{{i}}_in,
             fu_STREAM_IN_{{input.index}}_ext_status{{i}}  => status_{{i}}_in,
             fu_STREAM_IN_{{input.index}}_ext_ack{{i}}(0)  => ack_{{i}}_in,
{{endif}}
{{else}}
             fu_STREAM_IN_{{input.index}}_ext_data{{i}}    => (others => '0'),
             fu_STREAM_IN_{{input.index}}_ext_status{{i}}  => (others => '0'),
{{endif}}
{{endfor}}
{{endfor}}
{{for output in outputs}}
{{for i in range(8)}}
{{if i == output.index}}
{{if output.isNative}}
             fu_STREAM_OUT_{{output.index}}_ext_data{{i}}   => s_{{output.name}},
             fu_STREAM_OUT_{{output.index}}_ext_status{{i}} => (0=>'1', others => '0'),
{{else}}
             fu_STREAM_OUT_{{output.index}}_ext_data{{i}}   => data_{{i}}_out,
             fu_STREAM_OUT_{{output.index}}_ext_status{{i}} => status_{{i}}_out,
             fu_STREAM_OUT_{{output.index}}_ext_dv{{i}}(0)  => dv_{{i}}_out,
{{endif}}
{{else}}
             fu_STREAM_OUT_{{output.index}}_ext_status{{i}} => (others => '0'),
{{endif}}
{{endfor}}
{{endfor}}
             rstx                       => rst_n);
end bdf_type;
