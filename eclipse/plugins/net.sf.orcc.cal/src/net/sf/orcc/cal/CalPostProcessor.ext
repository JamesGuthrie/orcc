//import org::eclipse::emf::ecore;
//import org::eclipse::xtext;

import xtext;
import ecore;

process(GeneratedMetamodel this) :
    ePackage.process()
;

process(EPackage this) :
    eClassifiers.process()
;

process(EClassifier this) :
    null
;

EDataType getEcoreDataType(String name) :
    org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier(name)
;

EClass getIrClass(String name) :
    net::sf::orcc::ir::IrPackage::eINSTANCE.getEClassifier(name)
;

addReference(EClass clasz, String typeName, boolean containment, String attributeName) :
	let etype = getIrClass(typeName) :
	let field = new EReference :
	field.setEType(etype) ->
	field.setName(attributeName) ->
	field.setContainment(containment) ->
	field.setTransient(true) ->
	field.setLowerBound(0) ->
	field.setUpperBound(1) ->
	clasz.eStructuralFeatures.add(field)
;

process(EClass this) :
	switch (this.name) {
		case "AstExpression": (
			// add an "irType" reference to expressions
			addReference(this, "Type", false, "irType")
		)

		case "AstFunction": (
			// add an "irType" reference to functions
			addReference(this, "Type", false, "irType")
		)

		case "AstPort": (
			// add an "irType" reference to ports
			addReference(this, "Type", false, "irType")
		)

		case "AstSchedule": (
			// add a transient list of states referenced by transitions to Schedule class 
			let etype = (EClass) ePackage.getEClassifier("AstState") :
			let field = new EReference :
			field.setContainment(true) ->
			field.setEType(etype) ->
			field.setName("states") ->
			field.setTransient(true) ->
			field.setLowerBound(0) ->
			field.setUpperBound(-1) ->
			this.eStructuralFeatures.add(field)
		)
        
		case "AstVariable": (
			// add an "irType" reference to variables 
			addReference(this, "Type", false, "irType") -> 
		
			// add an "initialValue" value field to variables
			addReference(this, "Expression", true, "initialValue")
		)

		default:
			null
	}
;
