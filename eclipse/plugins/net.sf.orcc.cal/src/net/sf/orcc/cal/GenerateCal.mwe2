module net.sf.orcc.cal.Cal

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/net/sf/orcc/cal/Cal.xtext"
var file.extensions = "cal"
var projectName = "net.sf.orcc.cal"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = auto-inject {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// Generate java classes for Ecore models
			fragment = ecore.EcoreGeneratorFragment auto-inject {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}
			
			// serializer 2.0
//    		fragment = serializer.SerializerFragment auto-inject {
//    			generateStub = false
//    		}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {
				fileExtensions = file.extensions
			}

			// the following fragment generates an Antlr parser 
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment auto-inject {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
			
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment auto-inject {}
			
			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {
			}
			
			// provides a compare view
			fragment = compare.CompareFragment auto-inject {
				fileExtensions = file.extensions
			}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }
		}
	}
}
