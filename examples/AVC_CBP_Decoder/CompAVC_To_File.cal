// DispYUV.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2006 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

import ptolemy.media.Picture;
import javax.swing.JFrame;
import java.lang.System;

actor CompAVC_To_File (String file, int width, int height) int Y, int U, int V ==>  : 
  
    
    //Error Counter
    int ey := 0;
    int eu := 0;
    int ev := 0;
    
    //Frame Counter
    int fcount := 1;
     	
  	//Pixel position in reference
  	int x := 0;
  	int y := 0;
  	
  	//Macroblocs position
  	int pos_x := 0;
  	int pos_y := 0;
	
	//Time counter
	int lastTime := 0;
	
	//Size of macrobloc
	int ysize   = width * height;
	int uvsize  = rshift(ysize,2);
	int uvwidth = rshift(width,1);
	
	//Reference file
	fd = openFile(file);
	int nextc := readByte( fd );
	
	//Creating macrobloc container
	List(type:uint(size=8),size=ysize) yframe := [ 0 : for int i in Integers( 1, ysize ) ];
  	List(type:uint(size=8),size=uvsize) uframe := [ 0 : for int i in Integers( 1, uvsize ) ];
  	List(type:uint(size=8),size=uvsize) vframe := [ 0 : for int i in Integers( 1, uvsize ) ];	
	
	//Function for reading next frame in the current file
	procedure readFrame()
  	var
    	int i = 0
  	begin
    	while i < ysize do
      		yframe [ i ] :=  nextc ;
      		nextc := readByte( fd );
      		i := i + 1;
    	end
    	i := 0;
    	while i < uvsize do
      		uframe [ i ] := nextc ;
	      	nextc := readByte( fd );
	      	i := i + 1;
	    end
	    i := 0;
	    while i < uvsize do
	    	vframe [ i ] := nextc ;
	      	nextc := readByte( fd );
	      	i := i + 1;
	    end
	    x := 0;
	    y := 0;
	end
	
	
	initialize ==>
  	do
    	// Read first picture in comparaison's file
    	readFrame();
    	lastTime :=  currentSystemTime();
  	end
  
	action Y:[ MB_Y ] repeat 16 * 16, U:[ MB_U ] repeat 8 * 8 , V:[ MB_V ] repeat 8 * 8 ==>
	var
		//Current pixel
		int py,
		int pu,
		int pv,
		
		//Current reference's pixel
		int ref,
				
		//Current position in luminance and chrominance
		int xx,
		int yy,
		int uvx,
		int uvy,

		//Current time
		int thisTime
	do
		// For each luminance's information contained in a 16*16 macrobloc
		foreach int n in Integers(0,255) do
	      //Calculating position in picture
	      xx := pos_x + n mod 16; // -> xx = pos_x + n % 16
	      yy := pos_y + n / 16;   // -> yy = pos_y + n / 16
	      py :=  MB_Y[n];
	      
	      //Take the right Y value in file
	      ref := yframe [ (yy*width) + xx ];
          
          //Compare reference with generated pixel
          if py != ref then
          	ey := ey + 1;
          	println("*** Warning : xx " + xx + " yy " + yy + " Found "+ py + " instead of "+ ref + " for Y in loop " + n + " for frame " +fcount+" *********");
          end
	    end
   		
   		// For each each chrominance's information contained in a 16*16 macrobloc
   		foreach int n in Integers(0,63) do
   		  uvx := rshift(pos_x,1) + n mod 8; // uvx = pos_x / 2 + n % 16
          uvy := rshift(pos_y,1) + n / 8;   // uvy = pos_y / 2 + n / 16
          pu :=  MB_U[n];
          pv :=  MB_V[n];
          
		  //Take the right U value in file
	      ref := uframe [ (uvy*uvwidth) + uvx ];
          
          //Compare reference with generated pixel
          /*if pu != ref then
          	eu := eu + 1;
          	println("*** Warning : Found "+ pu + " instead of "+ ref + " for U in loop " + n + " for frame "+fcount+" *********");
          end*/
          
          //Take the right V value in file
	      ref := vframe [ (uvy*uvwidth) + uvx ];
          
          //Compare reference with generated pixel
          /*if pv != ref then
          	ev := ev + 1;
          	println("*** Warning : Found "+ pv + " instead of "+ ref + " for V in loop " + n + " for frame "+fcount+" *********");
          end*/
   		end
   		
   		// Advance to next MB position
    	pos_x := pos_x + 16;
    	if pos_x >= width then
      		pos_x := 0;
      		pos_y := pos_y + 16;
      		if pos_y >= height then
        		pos_y := 0;
        		if ((ey > 0) or (eu > 0) or (ev > 0)) then
        			//Message shown only if error where found
        			println("Error in frame "+fcount+" : "+ ey + "errors for Y, "+ eu + " in U, "+ ev + " in V");
        		else
        			println("*** No errors in frame "+fcount+" *********");
                end
        		
        		//Changing frame, reseting counter
        		ey := 0;
        		eu := 0;
        		ev := 0;
        		fcount := fcount + 1;
        		readFrame();       		
      		end
    	end
	end
end