/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

Buffer store edge value from current macrobloc and provide edge for intra-decoding
Edge are provided from bottom to top, then corner, then left to right 
Jérôme GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/

actor Buffer_Neighbour_4x4 ( int SAMPLE_SZ, int MB_WIDTH ) 
uint (size=8) Mb_Type, uint(size=13) CurrMbAddr, int(size=9) MB_IN, uint(size=7) PicWidthInMb 
==> 
uint(size=SAMPLE_SZ) EDGE 
:

  	//FIXME! Maximum size of a line in macroclock
  	uint(size=7) PICWIDTH =45;

  	//Flag	
  	uint (size = 1) ReadFlag := 0;
  	uint (size = 1) SendFlag := 0;
  	
  	// Index of the macroblock in the current line
  	uint(size=13) mb_Index := 0;
  	
  	
	//List containing edge pixel value 
	List( type:uint(size=SAMPLE_SZ), size=PICWIDTH * MB_WIDTH) top_edge := [0 : for int i in Integers( 0, PICWIDTH * MB_WIDTH-1)];
	List( type:uint(size=SAMPLE_SZ), size=MB_WIDTH ) left_edge := [ 0 : for int i in Integers( 0, MB_WIDTH-1)];
	uint(size=SAMPLE_SZ) topLeft_edge := 0;
	
	List( type:uint(size=SAMPLE_SZ), size=PICWIDTH * MB_WIDTH) result := [0 : for int i in Integers( 0, PICWIDTH * MB_WIDTH-1)];
	
  	//Mb_Type_NOK : Store pixel value of the bottom and left edge of the current decoded macroblock 
  	MbIndexNOK:action Mb_Type:[a], PicWidthInMb:[b], CurrMbAddr:[c] ==>
  	guard
  		a != 0,
  		SendFlag = 0,
  		ReadFlag = 0
  	do
  		
  		//println("4 :Mb_Type_NOK : "+ c);
  		// position of the current macroblock in the line
  		mb_Index := c mod b; 
  		
  		//Read decoded macroblock
  		ReadFlag := 1; 	
  	end
  
  	//Mb_Type_OK : Send value of edge needed and store the edge of macroblock decoded
  	MbIndexOK:action Mb_Type:[a], PicWidthInMb:[b], CurrMbAddr:[c] ==>
  	guard
  		a = 0,
  		SendFlag = 0,
  		ReadFlag = 0
  	do 
  		//println("4 :Mb_Type_OK : "+ c); 		
  		// position of the current macroblock in the line
  		mb_Index := c mod b; 
  		
  		//Send edge for prediction and read the decoded macroblock
  		SendFlag := 1;
  		ReadFlag := 1;
  	end  
  
  	//Receive pixel value from current decoded macroblock
  	MbIn:action MB_IN:[v] repeat MB_WIDTH*MB_WIDTH ==> 
  	guard 
  		ReadFlag = 1
  	do

  		//Store bottom , right and bottom right edge
  		topLeft_edge := top_edge[MB_WIDTH-1+ mb_Index*MB_WIDTH];
  		
  		foreach int s in Integers(0,MB_WIDTH-1)
  		do
  			top_edge[s+ mb_Index *MB_WIDTH]:= v[s+(MB_WIDTH-1)*MB_WIDTH];
  		end
  		
  		left_edge :=  [v[s*MB_WIDTH-1]:for int s in Integers(1,MB_WIDTH)];


 		//Read done
 		ReadFlag := 0;
  	end
  
  	//Send the edge needed to process the intra prediction of the current macroblock
  	//    from bottom to top (MB_WIDTH pixel values), then corner (1 pixel value), then left to right(MB_WIDTH pixel values)
 /* 	action ==> EDGE:[ left_edge + 															  
  					  topLeft_edge +
  					 [top_edge [s+ mb_Index *MB_WIDTH]:for int s in 0..MB_WIDTH-1]	] repeat 2*MB_WIDTH+1
  					 */
  	CalEdge1:action ==> EDGE:[ result	] repeat 2*MB_WIDTH+5
  	guard 
  		SendFlag = 1,
  		mb_Index < PICWIDTH-1
  	var 
  		int temp,
  		int temp2
  	do
		//println("4 :send value_av");
		
		foreach int s in Integers(0,MB_WIDTH-1)
		do
  			result[s]:= left_edge[s];
  			temp := s+ mb_Index *MB_WIDTH;
  			//println("4 :left_edge : "+temp);
  		end
  		result[MB_WIDTH]:= topLeft_edge;
  		
  		foreach int s in Integers(0,MB_WIDTH+5)
		do
  			result[MB_WIDTH+1+s]:= top_edge [s+ mb_Index *MB_WIDTH];
  			temp := s+ mb_Index *MB_WIDTH;
   			//println("4 :top_edge : "+temp);
  		end
  		
		//Send done
		SendFlag := 0;
  	end
  	
  	CalEdge2:action ==> EDGE:[ result	] repeat 2*MB_WIDTH+5
  	guard 
  		SendFlag = 1,
		mb_Index = PICWIDTH-1
	var
		int temp,
		int temp2
  	do
		//println("4 :send value_noav");
		
		foreach int s in Integers(0,MB_WIDTH-1)
		do
  			result[s]:= left_edge[s];
  			temp := s+ mb_Index *MB_WIDTH;
  			//println("4 :left_edge : "+temp);
  		end
  		result[MB_WIDTH]:= topLeft_edge;
  		
  		foreach int s in Integers(0,MB_WIDTH-1)
		do
  			result[MB_WIDTH+1+s]:= top_edge [s+ mb_Index *MB_WIDTH];
  			temp := s+ mb_Index *MB_WIDTH;
   			//println("4 :top_edge : "+temp);
  		end

  		foreach int s in Integers(0,3)
		do
  			result[2*MB_WIDTH+1+s]:= top_edge [MB_WIDTH-1+ mb_Index *MB_WIDTH];
  			temp := s+ mb_Index *MB_WIDTH;
   			//println("4 :topright_edge : "+temp);
  		end
  		  		
		//Send done
		SendFlag := 0;
  	end
  
end
