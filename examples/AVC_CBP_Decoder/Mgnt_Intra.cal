/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 
Manager for a full macroblock intra Prediction
Jérôme GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/

actor Mgnt_Intra ( int SAMPLE_SZ, int MB_WIDTH, int ID )
	uint(size=13) FirstMbInSlice,
	uint (size=8) Mb_Type,
	uint(size=7) PicWidthInMb,
	uint(size=13) CurrMbAddr,
	uint(size=4) PredMode,
	uint(size=SAMPLE_SZ) EDGE, 
	int(size=SAMPLE_SZ) Coef_ACR 
		==> 
		uint(size=1) Avail,
		uint(size=4) PredMode_I,
		int(size=SAMPLE_SZ) Coef_ACR_I,
		int(size=SAMPLE_SZ) Y_Left,
		int(size=SAMPLE_SZ) Y_Up,
		int(size=SAMPLE_SZ) Y_UpLeft 
		:  
	
	//List that contains the neighbouring pixel of the current 16x16 Mb, from bottom to top then left to right 
	List( type:uint(size=SAMPLE_SZ), size=MB_WIDTH ) left_16x16_edge := [ 0 : for int i in Integers( 0, MB_WIDTH-1)];
  	List( type:uint(size=SAMPLE_SZ), size=MB_WIDTH + 4 ) top_16x16_edge := [ 0 : for int i in Integers( 0, MB_WIDTH+3)];
  	uint(size=SAMPLE_SZ) topLeft_16x16_edge := 0;
  
	// Available edge for prediction [left, top, top left, top right]
	List( type:uint(size=1), size=3 ) avail := [ 0 : for int i in Integers( 0, 2) ];
	
	// Available 16x16 edge for prediction
	uint(size=1) left_16x16_avail := 0;
	uint(size=1) top_16x16_avail := 0;
	uint(size=1) topLeft_16x16_avail := 0;
	uint(size=1) topRight_16x16_avail := 0;

	
  //******************************* Enable or not Prediction management ********************************************
  
  
	//Mb_Type_NOK : Consume the token from prediction 4x4 
	MbTypeNOK_intra4x4:action Mb_Type:[a], FirstMbInSlice:[b], PicWidthInMb:[c], CurrMbAddr:[d], Coef_ACR:[e] repeat MB_WIDTH*MB_WIDTH, PredMode:[f] repeat MB_WIDTH==>
	guard
		a = 0
	end
  
	//Mb_Type_NOK : Consume the token from inter prediction 
	MbTypeNOK_inter:action Mb_Type:[a], FirstMbInSlice:[f], PicWidthInMb:[c], CurrMbAddr:[d], Coef_ACR:[e] repeat MB_WIDTH*MB_WIDTH ==>
	guard
		a = 2
	end
  
	//Mb_Type_OK : Enable the prediction 
	MbTypeOK:action Mb_Type:[a], FirstMbInSlice:[b], PicWidthInMb:[c], CurrMbAddr:[d], PredMode:[v], Coef_ACR:[val] repeat MB_WIDTH*MB_WIDTH ==> PredMode_I:[v], Coef_ACR_I:[val] repeat MB_WIDTH*MB_WIDTH
	guard
		a = 1
	var
	  	uint(size=13) first_mb_in_slice,
	  	uint(size=13) mbcurr,
	  	uint(size=7) picwidth
	do
		//Store token value
		mbcurr := d;
		first_mb_in_slice := b;
		picwidth := c; 
				 
		//Set 16x16 the available edge
		left_16x16_avail := if (mbcurr = first_mb_in_slice) or ((mbcurr mod picwidth) = 0) then 0 else 1 end;
		top_16x16_avail := if (mbcurr - first_mb_in_slice < picwidth) then 0 else 1 end;
		topRight_16x16_avail := if (mbcurr - first_mb_in_slice < picwidth - 1)or (((mbcurr+1) mod picwidth) = 0) then 0 else 1 end;
		topLeft_16x16_avail :=  if (mbcurr - first_mb_in_slice < picwidth +1) then 0 else 1 end;
	end

	//******************************* Receiving required token ********************************************
  
	//Receive the value of the 16x16 Mb neighbouring pixel from bottom to top, then corner, then left to right 
	InitEdge:action EDGE:[v] repeat 2*MB_WIDTH+1 ==> 
	do
		//Store left, top and top left border
		left_16x16_edge := [v[s]:for int s in Integers(0,MB_WIDTH-1)];
		topLeft_16x16_edge := v[MB_WIDTH];
		top_16x16_edge := [v[s]:for int s in Integers(MB_WIDTH+1,2*MB_WIDTH)];
	end
   
	//******************************* Processing ********************************************
 
	//**** Select and send available edge ****
	InitAvail:action ==> Avail:[ [ avail[s] : for int s in Integers(0,2) ] ] repeat 3
	do
		//edge available for left
		avail[0] := left_16x16_avail;
		//edge available for top
		avail[1] := top_16x16_avail;
		//edge available for top left
		avail[2] := topLeft_16x16_avail;
  	end
  
	//**** Send neighbouring pixel value ****
  
	ResetNone:action ==> 
	guard 
		avail[0] = 0,
		avail[1] = 0,
		avail[2] = 0
	end 

	//Left neighbour from 16x16 edge
	Reset.AvailLeft:action ==> Y_Left:[left_16x16_edge]repeat MB_WIDTH
	guard 
		avail[0] = 1
	do
		avail[0] := 0;
	end 
  
	//Top and right neighbour from 16x16 edge
	Reset.AvailTop:action ==> Y_Up:[top_16x16_edge]repeat MB_WIDTH
	guard 
		avail[1] = 1
	do
		avail[1] := 0;
	end
  
	//Up Left neighbour
	Reset.AvailTopLeft:action ==> Y_UpLeft:[topLeft_16x16_edge]
	guard 
		avail[2] = 1
	do
		avail[2] := 0;
	end
	
	schedule fsm Mb_Type:
		Mb_Type     (MbTypeNOK_inter	)--> Mb_Type;
		Mb_Type     (MbTypeNOK_intra4x4	)--> Mb_Type;
		Mb_Type     (MbTypeOK			)--> InitEdge;
		InitEdge    (InitEdge			)--> InitAvail;
		InitAvail	(InitAvail			)--> Reset;
		Reset    	(ResetNone			)--> Mb_Type;
		Reset    	(Reset				)--> Reset;
	end
	
	priority
		ResetNone > Reset.AvailLeft > Reset.AvailTopLeft;
	end
end