/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
//Modified to work with ORCC
//By Endri Bezati <endri.bezati@insa-rennes.fr>

actor Algo_Interp_split_MB () 
		uint(size=3) MbPartIdx,
		uint(size=5) MbPartWidth,
		uint(size=5) MbPartHeigth,
		int(size=SAMPLE_SZ) INTERP 
				==> 
				int(size=SAMPLE_SZ) MBPred:
 
 
 // Port size declaration
  int SAMPLE_SZ = 16;
  
  uint(size=5) count := 0;
  uint(size=5) mbpart_idx;
  uint(size=5) mbpart_w;
  uint(size=5) mbpart_h;
  
  List ( type:int(size=SAMPLE_SZ), size=256) MB := [ 0 : for int i in Integers(0,255)];
  List ( type: uint(size=4), size=16) InverseScan4x4Tab := [ 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15 ];  
  
  get_part: action MbPartIdx:[a], MbPartWidth:[b], MbPartHeigth:[c] ==> 
  guard
    count < 16
  do
    mbpart_idx:= a;
    mbpart_w:= b;
    mbpart_h:= c;
  end
 
  
  get_data.mode_16x16: action INTERP:[v] repeat 16*16 ==>
  guard
  	mbpart_h = 16 and mbpart_w = 16	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    
    count := count+rshift(mbpart_w,2)*rshift(mbpart_h,2);
    
  end
  
  get_data.mode_16x8: action INTERP:[v] repeat 16*8 ==>
  guard
  	mbpart_h = 16 and mbpart_w = 8	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
     count := if mbpart_idx = 0 then 4 else 16 end;
  end
  
  get_data.mode_8x16: action INTERP:[v] repeat 8*16 ==>
  guard
  	mbpart_h = 8 and mbpart_w = 16	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    count := count+rshift(mbpart_w,2)*rshift(mbpart_h,2);
  end
  
  get_data.mode_8x8: action INTERP:[v] repeat 8*8 ==>
  guard
  	mbpart_h = 8 and mbpart_w = 8	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    count := count+rshift(mbpart_w,2)*rshift(mbpart_h,2);
  end
  
  get_data.mode_8x4: action INTERP:[v] repeat 8*4 ==>
  guard
  	mbpart_h = 8 and mbpart_w = 4	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    count := count+1+lshift(mbpart_idx,1);
  end
  
  get_data.mode_4x8: action INTERP:[v] repeat 4*8 ==>
  guard
  	mbpart_h = 4 and mbpart_w = 8	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    count := count+rshift(mbpart_w,2)*rshift(mbpart_h,2);
  end
  
  get_data.mode_4x4: action INTERP:[v] repeat 4*4 ==>
  guard
  	mbpart_h = 4 and mbpart_w = 4	
  var 
    uint pixAddr := lshift(InverseScan4x4Tab[count] /4, 6) + lshift(InverseScan4x4Tab[count] mod 4, 2) 
  do
    foreach int j in Integers (0, mbpart_h-1) do
      foreach int i in Integers(0, mbpart_w-1) do
        MB[pixAddr+i+lshift(j,4)] := v[i+j*mbpart_w];
      end
    end
    count := count+rshift(mbpart_w,2)*rshift(mbpart_h,2);
  end
  
  send_data: action ==> MBPred:[ [MB[s]: for int s in Integers(0,255)] ] repeat 16*16
  guard
    count = 16
  do
    count := 0;
  end
  
  schedule fsm get_send_part :
    get_send_part	( get_part 	) --> get_data;
    get_data    	( get_data  ) --> get_send_part;
    get_send_part	( send_data	) --> get_send_part;
  end

end