/*
 * Copyright (c) 2009, IETR/INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Matthieu Wipliez <mwipliez@users.sourceforge.net>
 
import java.lang.System;
import java.lang.Integer;
import java.io.PrintStream;

/**
 * NUM_TOKENS is the number of tokens that should be recorded.
 */
actor TokenRecorder(int NUM_TOKENS, String FILE_NAME)
  int input01, int input02, int input03, int input04,
  int input05, int input06, int input07, int input08 ==> :

  PrintStream pp = PrintStream(FILE_NAME, "utf-8");
  int numTokensRead := 0;

  init: action ==>
  do
	pp.println("[");
	pp.print("  null");
  end
  
  procedure recordToken(int token, int input)
  var
    int idx = input - 1
  begin
    pp.println(",");
    pp.print("  [" + idx + ", " + token + "]");
    numTokensRead := numTokensRead + 1;
  end

  read.token01: action input01:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 1);
  end

  read.token02: action input02:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 2);
  end

  read.token03: action input03:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 3);
  end

  read.token04: action input04:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 4);
  end

  read.token05: action input05:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 5);
  end

  read.token06: action input06:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 6);
  end

  read.token07: action input07:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 7);
  end

  read.token08: action input08:[ token ] ==>
  guard
  	numTokensRead < NUM_TOKENS
  do
    recordToken(token, 8);
  end
  
  finalize: action ==>
  guard
    numTokensRead = NUM_TOKENS
  do
    pp.println();
    pp.println("]");
  end
  
  consume.token01: action input01:[ token ] ==>
  end
  
  consume.token02: action input02:[ token ] ==>
  end
  
  consume.token03: action input03:[ token ] ==>
  end
  
  consume.token04: action input04:[ token ] ==>
  end
  
  consume.token05: action input05:[ token ] ==>
  end
  
  consume.token06: action input06:[ token ] ==>
  end
  
  consume.token07: action input07:[ token ] ==>
  end
  
  consume.token08: action input08:[ token ] ==>
  end

  priority
    read > finalize;
  end
  
  schedule fsm init:
    init (init) --> read;
    read (read) --> read;
    read (finalize) --> consume;
    consume (consume) --> consume;
  end

end
