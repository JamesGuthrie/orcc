actor Block () int In, int BlockType ==> int Out0, int Out1, int Out2, int Out3
:

	List(type: int, size=4 * 4) block := [ 0 : for int t in Integers(0, (4 * 4) -
	1) ];

	int bType := 0;

	int i := 0;

	int iterations := 0;

	BType: action BlockType:[ bt ] ==>
	do
		bType := bt;
		//println("Block: Block Type is "+bType);

	end

	In: action In:[ in0 ] ==>
	guard
		i < 4 * 4
	do
		block[i] := in0;
		i := i + 1;
	end

	FinishIn: action ==>
	guard
		i = 4 * 4
	do
		i := 0;
	end

	FireRow: action ==> Out0:[ block[i - 4] ], Out1:[ block[i - 3] ], Out2:[ block
		[i - 2] ], Out3:[ block[i - 1] ]
	guard
		i < 16
	do
		i := i + 4;
		//println("FireRow: "+block[i-4]+", "+block[i-3]+", "+block[i-2]+", "+block[i-1]);

	end

	FinishFireRow: action ==>
	guard
		i = 16
	do
		i := 0;
		iterations := iterations + 1;
		//println("-----------------------------------------");

	end

	EnoughIterations: action ==>
	guard
		(bType = 0 and iterations = 9) or (bType = 1 and iterations = 4) or (bType =
		2 and iterations = 3) or (bType = 3 and iterations = 1) or (bType = 4 and
		iterations = 7)
	do
	//println("=============== Loop Ended after those number of iterations: "+iterations+" ===============");
		iterations := 0;
	end

	schedule fsm ReadBlockType :
		ReadBlockType ( BType ) --> ReadBlock;
		ReadBlock ( In ) --> ReadBlock;
		ReadBlock ( FinishIn ) --> FireBlock;
		FireBlock ( FireRow ) --> FireBlock;
		FireBlock ( FinishFireRow ) --> FireBlock;
		FireBlock ( EnoughIterations ) --> ReadBlockType;
	end

	priority
		EnoughIterations > FireRow;
		EnoughIterations > FinishFireRow;
	end

end