/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/

//Modified by Mederic Blestel and Endri Bezati IETR/INSA of Rennes
//Modified by Mickael Raulet IETR/INSA of Rennes


actor Algo_MMCO () 
	uint(size=32) MMCO,
	uint(size=32) FraNum,
	int (size=32) MaxFrameNum
		==>
	int(size=32) DelList
		:

	List(type:int(size=32), size=16) short_term_list        := [0     : for int s in Integers(0,15)];
	List(type:bool        , size=16) short_term_false_frame := [false : for int s in Integers(0,15)];
	List(type:int(size=32), size=16) long_term_list         := [-1    : for int s in Integers(0,15)];
	List(type:int(size=32), size=16) DelListTab             := [0     : for int s in Integers(0,15)];

	int (size=32) Nbframedel         := 0;
	uint          frame_num          := 0;
	uint          last_frame_num     := 0;
	int           pred               := 0;
	int (size=32) ValMaxFrameNum     := 0;
	uint(size=4)  num_ref_frames     := 0;
	uint(size=4)  short_term_count   := 0;
	uint(size=4)  long_term_count    := 0;
	uint(size=1)  flag_long_term     := 0;
	uint(size=4)  long_term_idx      := 0;
	uint(size=4)  long_term_max_idx  := 0;



	read_num_ref_frames: action
			MMCO:[ValNumRefFrame],
			FraNum:[ValFrame_Num],
			MaxFrameNum:[MaxFrNu]
				==>
		do
			num_ref_frames := ValNumRefFrame;
			last_frame_num := frame_num;
			frame_num      := ValFrame_Num;
			ValMaxFrameNum := MaxFrNu;
		end


	FillFalseRefFrame : action ==>
		guard
			frame_num != (last_frame_num + 1) mod ValMaxFrameNum
		var
			int false_frame_num := (last_frame_num + 1) mod ValMaxFrameNum
		do
				Nbframedel := 0;
				num_ref_frames := if(num_ref_frames>16)then 16 else num_ref_frames end;
				while(false_frame_num != frame_num)
				do
					if(long_term_count + short_term_count = num_ref_frames) then
						if(Nbframedel>15) then
							Nbframedel := 15;
						end
						if (short_term_false_frame[short_term_count - 1] = false) then
							DelListTab[Nbframedel] := short_term_list[short_term_count - 1];
							Nbframedel             := Nbframedel + 1;
						end
						short_term_count       := short_term_count - 1;
					end
					foreach int i in Integers(0,short_term_count - 1)
					do
						short_term_list[short_term_count - i]        := short_term_list[short_term_count - i - 1];
						short_term_false_frame[short_term_count - i] := short_term_false_frame[short_term_count - i - 1];
					end
					short_term_list[0]        := false_frame_num;
					short_term_false_frame[0] := true;
					short_term_count   := short_term_count + 1;
					false_frame_num    := (false_frame_num + 1) mod ValMaxFrameNum;
				end
		end


	skip_FillFalseRefFrame : action ==>
		guard
			frame_num = (last_frame_num + 1) mod ValMaxFrameNum
		do
				Nbframedel := 0;
		end


	read_IDR: action
			MMCO:[a , b]
				==>
		guard 
			a = 0
		do
			flag_long_term   := b;
			short_term_count := 0;
			long_term_count  := 0;
			short_term_list  := [-1 :for int s in Integers(0,16-1)];
			long_term_list   := [-1 :for int s in Integers(0,16-1)];
			Nbframedel       := -1;
		end


	read_not_IDR_not_MMCO: action
			MMCO:[a , b]
				==>
		guard
			a = 1 and b = 0
		do
			flag_long_term := 0;
		end


	read_not_IDR_MMCO: action
			MMCO:[a , b]
				==>
		guard 
			a = 1 and b = 1
		do
			flag_long_term := 0;
		end


	MMCO_opcode_v0: action
			MMCO:[ a ]
				==>
		guard 
			a = 0
		end


	// Mark a short term reference picture as "unused for reference "
	MMCO_opcode.v1: action
			MMCO:[ a, b ]
				==>
		guard 
			a = 1
		var 
			int(size=5) idx := -1
		do
			pred := frame_num - b-1;
			if(pred < 0) then
				pred := pred + ValMaxFrameNum;
			end
			foreach int i in Integers( 0, short_term_count - 1 )
			do
				if (short_term_list[i] = pred) then 
					idx := i;
				end
			end
			if(idx != -1) then
				foreach int i in Integers(idx, short_term_count - 2)
				do
					short_term_list[i]        := short_term_list[i+1];
					short_term_false_frame[i] := short_term_false_frame[i+1];
				end
				short_term_count := short_term_count-1;
				DelListTab[Nbframedel] := pred;
				Nbframedel := Nbframedel + 1;
			end
		end


	// Mark a long term reference picture as "unused for reference "
	MMCO_opcode.v2: action
			MMCO:[ a, b ]
				==>
		guard 
			a = 2
		do
			if(long_term_list[b] != -1) then
				DelListTab[Nbframedel] := long_term_list[b];
				Nbframedel := Nbframedel + 1;
				long_term_list[b] := -1;
				long_term_count   := long_term_count-1;
			end
		end


	// Mark a short term reference picture as long term
	MMCO_opcode.v3: action
			MMCO:[a, b, c ]
				==>
		guard 
			a = 3
		var
			int(size=5) idx := -1
		do
			pred := frame_num - b-1; 
			if(pred < 0) then
				pred := pred + ValMaxFrameNum;
			end
			foreach int i in Integers(0, short_term_count-1)
			do
				if (short_term_list[i] = pred) then
					idx := i;
				end
			end
			if(idx != -1) then
				foreach int i in Integers(idx, short_term_count - 2)
				do
						short_term_list[i]        := short_term_list[i + 1];
						short_term_false_frame[i] := short_term_false_frame[i + 1];
				end
				short_term_count := short_term_count - 1;
				
				if (long_term_list[c] = -1) then
					long_term_count := long_term_count + 1;
				else
					DelListTab[Nbframedel] := long_term_list[c];
					Nbframedel := Nbframedel + 1;
				end
				long_term_list[c] := pred;
			end
		end


	// Specify the maximum long term frame index
	MMCO_opcode.v4: action
			MMCO:[a, b ]
				==>
		guard 
			a = 4
		do
			long_term_max_idx := b;
			foreach int i in Integers(long_term_max_idx, 16-1)
			do
				if (long_term_list[i] != -1) then
					DelListTab[Nbframedel] := long_term_list[i];
					Nbframedel             := Nbframedel + 1;
					long_term_list[i]      := -1;
					long_term_count        := long_term_count - 1;
				end
			end
		end


	// Mark all reference picture as "unused for reference "
	MMCO_opcode.v5: action
			MMCO:[a]
				==>
		guard 
			a = 5
		do
			frame_num         := 0;
			short_term_count  := 0;
			short_term_list   := [-1 :for int s in Integers(0,16-1)];
			long_term_count   := 0;
			long_term_max_idx := 0;
			long_term_list    := [-1 :for int s in Integers(0,16-1)];
			Nbframedel        := -1;
		end


	// Mark the current picture as long term reference picture
	MMCO_opcode.v6: action
			MMCO:[a, b ]
				==>
		guard 
			a = 6
		do
			if (long_term_list[b] != -1) then
				DelListTab[Nbframedel] := long_term_list[b];
				Nbframedel             := Nbframedel + 1;
				long_term_count        := long_term_count - 1;
				long_term_list[b]      := -1;
			end
			long_term_idx  := b;
			flag_long_term := 1;
		end

	update_idx: action ==>
		var
			bool        flag := false,
			int         j
		do
			if (long_term_count + short_term_count = num_ref_frames) then
				short_term_count       := short_term_count - 1;
				if(short_term_false_frame[short_term_count] = false) then
					DelListTab[Nbframedel] := short_term_list[short_term_count];
					Nbframedel             := Nbframedel + 1;
				end
			end
			// add current picture
			if (flag_long_term = 0) then
				j := short_term_count - 1;
				foreach int i in Integers (0, short_term_count - 1)
				do
					short_term_list[j + 1]        := short_term_list[j];
					short_term_false_frame[j + 1] := short_term_false_frame[j];
					j := j - 1;
				end
				short_term_list[0]        := frame_num;
				short_term_false_frame[0] := false;
				short_term_count          := short_term_count +1;
			else
				if (long_term_list[long_term_idx] = -1) then 
					long_term_count := long_term_count +1;
				end
				long_term_list[long_term_idx] := frame_num;
			end
		end

	SendSizeDelList: action
				==>
			DelList:[Nbframedel]
		end

	SendDelList : action
				==>
			DelList:[ValDelFrame]
		var
			int(size=32) ValDelFrame
		do
			Nbframedel  := Nbframedel - 1;
			ValDelFrame := DelListTab[Nbframedel];
		end

	SendDelListDone : action ==>
		guard
			Nbframedel <= 0
		end

	schedule fsm  read_num_ref_frames:
		read_num_ref_frames               (read_num_ref_frames                 )--> FillFalseRefFrame;
		FillFalseRefFrame                 (FillFalseRefFrame                   )--> check_IDR;
		FillFalseRefFrame                 (skip_FillFalseRefFrame              )--> check_IDR;

		/* Get values about memory_management_control_operation */
		check_IDR                         (read_IDR                            )--> update_idx;
		check_IDR                         (read_not_IDR_not_MMCO               )--> update_idx;
		check_IDR                         (read_not_IDR_MMCO                   )--> MMCO_opcode;
		MMCO_opcode                       (MMCO_opcode                         )--> MMCO_opcode;
		MMCO_opcode                       (MMCO_opcode_v0                      )--> update_idx;
		update_idx                        (update_idx                          )--> SendSizeDelList;
		SendSizeDelList                   (SendSizeDelList                     )--> SendDelList;
		SendDelList                       (SendDelList                         )--> SendDelList;
		SendDelList                       (SendDelListDone                     )--> read_num_ref_frames;
	end

	priority
		SendDelListDone     > SendDelList;
		SendSizeDelList     > SendDelListDone;
	end

end
