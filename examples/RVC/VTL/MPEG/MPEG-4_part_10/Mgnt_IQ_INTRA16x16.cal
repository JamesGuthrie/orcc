/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
//Modified by Damien de Saint Jorre, IETR/INSA of Rennes

actor Mgnt_IQ_INTRA16x16()
	int (size=16) CoefDCR_L,
	int (size=2)  Intra_DC_flag,
	uint(size=8)  MBType,
	int (size=16) CoefAC_L
		==>
	int(size=16) Lev2d
		:


	/* Constants */
	uint(size=8) INTRA_4x4   = 0;
//	uint(size=8) INTRA_8x8   = 3;
/*	uint(size=8) INTRA_16x16 = 1; */
	uint(size=8) I_PCM       = 4;
/*	uint(size=8) INTER       = 2; */


	int (size=2)  intra_dc_flag := 0;
	uint(size=5)  NbBlock       := 0;
	uint(size=8)  MacroBType;




	read_intra_DC_flag: action
			Intra_DC_flag :[ x ]
				==>
		do
			intra_dc_flag := x;
		end


	ReadMBType: action
			MBType    :[Type]
				==>
		guard
			Type != I_PCM
		do
			MacroBType := Type;
		end


	EatTokenMBType: action
			MBType    :[Type]
				==>
		end


	HasDCCoeff: action ==>
		guard
			MacroBType != INTRA_4x4 
		end


	HasNotDCCoeff: action ==>
		end


	Merge_DCandAC_Coeff.Launch: action
			CoefDCR_L :[DcCoeff],
			CoefAC_L  :[AcCoeff]      repeat 16
				==>
			Lev2d     :[BlockMerged]  repeat 16
		guard
			NbBlock < 15
		var
			List(type: int(size=16), size=16) BlockMerged := [ 0 : for int s in Integers(0, 15) ]
		do
/**/		BlockMerged[0] := if intra_dc_flag = 0 then
				AcCoeff[0]
			else
				DcCoeff
			end;/**/
//			BlockMerged[0] := DcCoeff;
			foreach int i in Integers(1, 15) do
				BlockMerged[i] := AcCoeff[i];
			end
			NbBlock := NbBlock + 1;
		end


	Merge_DCandAC_Coeff.LastBlock: action
			CoefDCR_L :[DcCoeff],
			CoefAC_L  :[AcCoeff]      repeat 16
				==>
			Lev2d     :[BlockMerged]  repeat 16
		var
			List(type: int(size=16), size=16) BlockMerged := [ 0 : for int s in Integers(0, 15) ]
		do
/**/		BlockMerged[0] := if intra_dc_flag = 0 then
				AcCoeff[0]
			else
				DcCoeff
			end;/**/
//			BlockMerged[0] := DcCoeff;
			foreach int i in Integers(1, 15) do
				BlockMerged[i] := AcCoeff[i];
			end
			NbBlock := 0;
		end


	Send_AC_Coeff.Launch: action
			CoefDCR_L :[DcCoeff],
			CoefAC_L  :[AcCoeff]  repeat 16
				==>
/**/		Lev2d     :[BlockMerged]  repeat 16/**/
//			Lev2d     :[AcCoeff]  repeat 16
		guard
			NbBlock < 15
		var
			List(type: int(size=16), size=16) BlockMerged := [ 0 : for int s in Integers(0, 15) ]
		do
/**/		BlockMerged[0] := if intra_dc_flag = 0 then
				AcCoeff[0]
			else
				DcCoeff
			end;
			foreach int i in Integers(1, 15) do
				BlockMerged[i] := AcCoeff[i];
			end/**/
			NbBlock := NbBlock + 1;
		end


	Send_AC_Coeff.LastBlock: action
			CoefDCR_L :[DcCoeff],
			CoefAC_L  :[AcCoeff]      repeat 16
				==>
/**/		Lev2d     :[BlockMerged]  repeat 16/**/
//			Lev2d     :[AcCoeff]  repeat 16
		var
			List(type: int(size=16), size=16) BlockMerged := [ 0 : for int s in Integers(0, 15) ]
		do
/**/			BlockMerged[0] := if intra_dc_flag = 0 then
				AcCoeff[0]
			else
				DcCoeff
			end;
			foreach int i in Integers(1, 15) do
				BlockMerged[i] := AcCoeff[i];
			end/**/
			NbBlock := 0;
		end


	schedule fsm read_intra_dc :
		read_intra_dc       ( read_intra_DC_flag             )--> ReadMBType;

		ReadMBType          ( EatTokenMBType                 )--> ReadMBType;
		ReadMBType          ( ReadMBType                     )--> CheckMBType;

		CheckMBType         ( HasDCCoeff                     )--> Merge_DCandAC_Coeff;
		CheckMBType         ( HasNotDCCoeff                  )--> Merge_DCandAC_Coeff;

		Merge_DCandAC_Coeff  ( Merge_DCandAC_Coeff.Launch    )--> Merge_DCandAC_Coeff;
		Merge_DCandAC_Coeff  ( Merge_DCandAC_Coeff.LastBlock )--> read_intra_dc;

		Send_AC_Coeff        ( Send_AC_Coeff.Launch          )--> Send_AC_Coeff;
		Send_AC_Coeff        ( Send_AC_Coeff.LastBlock       )--> read_intra_dc;
	end

	priority
		ReadMBType                 > EatTokenMBType;
		Merge_DCandAC_Coeff.Launch > Merge_DCandAC_Coeff.LastBlock;
		Send_AC_Coeff.Launch       > Send_AC_Coeff.LastBlock;
	end

end
