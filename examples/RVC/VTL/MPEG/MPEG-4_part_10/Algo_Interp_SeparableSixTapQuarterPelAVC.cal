// Algo_Interp_SeparableSixTapQuarterPeAVC.cal
//
// Author: He-Yuan Lin
//
// Fractional luma sample interpolation for motion compensation of AVC
import all caltrop.lib.BitOps;

actor Algo_Interp_SeparableSixTapQuarterPelAVC () 
		uint(size=16) Frac, int(size=16) RD,
		uint(size=6) PartSZ
				==>
				int(size=16) INTERP:

  int(size=32) x ;
  int(size=32) y ;
  int(size=32) o_x ;
  int(size=32) o_y ;
  int(size=32) x_index ;
  int(size=32) y_index ;
  int width;
  int height;
  int temp; 
  int temp2;
  uint(size=1) buf_done;  
  List( type:int(size=16), size=441 ) inbuf := [ 0 : for int i in Integers( 0, 440) ];
  List( type:int(size=32), size=6 ) half_pel := [ 0 : for int i in Integers( 0, 5) ];
  
  procedure compensate( )
  var
    int(size=32) n
  begin

    // x_index = 0
    if x_index = 0 and y_index = 0 then 
      temp := inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
    end    
    if x_index = 0  and y_index = 2 then 
  
      temp := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp := rshift (temp,5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end
    end

    if x_index = 0  and y_index = 1 then 
      temp := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp := temp + inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ]+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end 

    if x_index = 0  and y_index = 3 then 
      temp := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp := temp + inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end  

    // x_index = 2
    if x_index = 2  and y_index = 0 then 
      temp := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end
    end  

    if x_index = 2  and y_index = 2 then 
      n :=0;
      while n < 6 
      do
        half_pel[n] := inbuf [ ( 0 + o_x) + ( n + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( n + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( n + o_y) * 21 ];
        half_pel[n] := half_pel[n] + 20 * inbuf [ ( 3 + o_x) + ( n + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( n + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( n + o_y) * 21 ];
        n := n+1;
      end

      temp :=half_pel[0]-5*half_pel[1]+20*half_pel[2]+20*half_pel[3]-5*half_pel[4]+half_pel[5]+512;  
      temp := rshift ( temp, 10);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end
    end
    if x_index = 2  and y_index = 1 then 
      n :=0;
      while n < 6 
      do
        half_pel[n] := inbuf [ ( 0 + o_x) + ( n + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( n + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( n + o_y) * 21 ];
        half_pel[n] := half_pel[n] + 20 * inbuf [ ( 3 + o_x) + ( n + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( n + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( n + o_y) * 21 ];
        n := n+1;
      end
      temp :=half_pel[0]-5*half_pel[1]+20*half_pel[2]+20*half_pel[3]-5*half_pel[4]+half_pel[5]+512;  
      temp := rshift ( temp, 10);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp2 := rshift ( temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end       
    end
    if x_index = 2  and y_index = 3 then 
      n :=0;
      while n < 6 
      do
        half_pel[n] := inbuf [ ( 0 + o_x) + ( n + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( n + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( n + o_y) * 21 ];
        half_pel[n] := half_pel[n] + 20 * inbuf [ ( 3 + o_x) + ( n + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( n + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( n + o_y) * 21 ];
        n := n+1;
      end
      temp :=half_pel[0]-5*half_pel[1]+20*half_pel[2]+20*half_pel[3]-5*half_pel[4]+half_pel[5]+512;  
      temp := rshift ( temp, 10);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 0 + o_x) + ( 3 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 3 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 3 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 3 + o_y) * 21 ] + 16;
      temp2 := rshift ( temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end
   // x_index = 1
   if x_index = 1  and y_index = 0 then 
      temp := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp := temp+inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ]+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end  
    if x_index = 1  and y_index = 2 then 
      n :=0;
      while n < 6 
      do
        half_pel[n] := inbuf [ ( 0 + o_x) + ( n + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( n + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( n + o_y) * 21 ];
        half_pel[n] := half_pel[n] + 20 * inbuf [ ( 3 + o_x) + ( n + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( n + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( n + o_y) * 21 ];
        n := n+1;
      end
      temp :=half_pel[0]-5*half_pel[1]+20*half_pel[2]+20*half_pel[3]-5*half_pel[4]+half_pel[5]+512;  
      temp := rshift (temp, 10);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end
    if x_index = 1  and y_index = 1 then 
      temp := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end      
    end
    if x_index = 1  and y_index = 3 then 
      temp := inbuf [ ( 0 + o_x) + ( 3 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 3 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 3 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 3 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 2 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 2 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 2 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 2 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);  
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end
   // x_index = 3
   if x_index = 3  and y_index = 0 then 
      temp := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp := temp+inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end  
    if x_index = 3  and y_index = 2 then 
      n :=0;
      while n < 6 
      do
        half_pel[n] := inbuf [ ( 0 + o_x) + ( n + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( n + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( n + o_y) * 21 ];
        half_pel[n] := half_pel[n] + 20 * inbuf [ ( 3 + o_x) + ( n + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( n + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( n + o_y) * 21 ];
        n := n+1;
      end
      temp :=half_pel[0]-5*half_pel[1]+20*half_pel[2]+20*half_pel[3]-5*half_pel[4]+half_pel[5]+512;  
      temp := rshift (temp, 10);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 3 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 3 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 3 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 3 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end
    if x_index = 3  and y_index = 1 then 
      temp := inbuf [ ( 0 + o_x) + ( 2 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 2 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 2 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 2 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 2 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 3 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 3 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 3 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 3 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);      
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
    end
    if x_index = 3  and y_index = 3 then 
      temp := inbuf [ ( 0 + o_x) + ( 3 + o_y) * 21 ]-5 * inbuf [ ( 1 + o_x) + ( 3 + o_y) * 21 ]+ 20 * inbuf [ ( 2 + o_x) + ( 3 + o_y) * 21 ];
      temp := temp + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 4 + o_x) + ( 3 + o_y) * 21 ] + inbuf [ ( 5 + o_x) + ( 3 + o_y) * 21 ] + 16;
      temp := rshift ( temp, 5);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end 
      temp2 := inbuf [ ( 3 + o_x) + ( 0 + o_y) * 21 ]-5 * inbuf [ ( 3 + o_x) + ( 1 + o_y) * 21 ]+ 20 * inbuf [ ( 3 + o_x) + ( 2 + o_y) * 21 ];
      temp2 := temp2 + 20 * inbuf [ ( 3 + o_x) + ( 3 + o_y) * 21 ]-5*inbuf [ ( 3 + o_x) + ( 4 + o_y) * 21 ] + inbuf [ ( 3 + o_x) + ( 5 + o_y) * 21 ] + 16;
      temp2 := rshift (temp2, 5);        
      if temp2 > 255 then temp2 := 255; end
      if temp2 < 0   then temp2 := 0;   end 
      temp := temp+temp2+1;
      temp := rshift ( temp, 1);
      if temp > 255 then temp := 255; end
      if temp < 0   then temp := 0;   end  
    end
  end

  get_fract_x: action Frac:[ f ] ==>
  do
    x := 0;
    y := 0;
    o_x := 0;
    o_y := 0;
    buf_done := 0;
    x_index := f;
  end

  get_fract_y: action Frac:[ f ] ==>
  do
    y_index := f;   
  end

  getwidth: action PartSZ:[ f ] ==>
  do
    width :=f;
  end

  getheight: action PartSZ:[ f ] ==>
  do
    height :=f;
  end

  // fetch (width+5)x(height+5) pixels

  fetch: action RD:[d] ==>
  guard 
   x < (width+5) and y < (height+5) and buf_done = 0
  do
   inbuf[y * 21 + x] := d;
   x := x + 1;
   if x >= (width+5) then
      x := 0;
      y := y + 1;
      if y >= height +5 then
      	buf_done := 1 ;
      	end
    end
  end
  
  done: action ==>
  guard
    o_y = height and buf_done =1
  end

  
  // interpolation according to MODE
  process: action ==> INTERP:[ p ]
  guard
   buf_done = 1,
   o_y < height
  var 
	int p
  do
   compensate();
   p := temp;
   o_x := o_x + 1;
   if o_x >= width then
      o_x := 0;
      o_y := o_y + 1;
    end
  end

  schedule fsm get_fract_x:

    get_fract_x  ( get_fract_x ) --> get_fract_y;
    get_fract_y  ( get_fract_y ) --> getwidth;
    getwidth     ( getwidth    ) --> getheight;
    getheight    ( getheight   ) --> interpolate;
    interpolate  ( fetch       ) --> interpolate;
    interpolate  ( done        ) --> get_fract_x;
    interpolate  ( process     ) --> interpolate;

  end

  priority
    done >  fetch > process  ;
  end

end