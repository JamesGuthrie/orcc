/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/

actor Mgnt_Display ()
	uint(size=32) POC,
	uint(size=31) FrameNum_CurrPic
	
		==>
  	uint(size=32) POCtoDisplay
		:


	List(type:int (size=32),size=16) frame_num := [-1 :for int s in Integers(0,15)];
	List(type:uint(size=32),size=16) poc;
	
	int(size=5) IdxNextPOC := -1;


	GetPOC: action
			POC:[ValPOC],
			FrameNum_CurrPic:[FrNu]
				==>
		var
			uint(size=4) idx          := 0,
			bool         idx_selected := false
		do
			while( (idx < 16) and (not idx_selected) )
			do
				if(frame_num[idx] = -1) then
					frame_num[idx] := FrNu;
					poc[idx]       := ValPOC;
					idx_selected   := true;
				end
				idx := idx + 1;
			end
		end


	SearchForNextPOC: action ==>
		var
			//uint(size=5) idx,
			int (size=32) frame_num_last_poc
		do
			
			if(IdxNextPOC != -1) then
				frame_num_last_poc := frame_num[IdxNextPOC];
				IdxNextPOC         := -1;
			else
				frame_num_last_poc := -1;
			end

			foreach int i in Integers (0,15)
			do
				if(frame_num[i] > frame_num_last_poc) then
					if(IdxNextPOC != -1) then
						if(frame_num[i] < frame_num[IdxNextPOC])then
							IdxNextPOC := i;
						end
					else
						IdxNextPOC := i;
					end
				end
			end
			if(IdxNextPOC = -1) then
				foreach int i in Integers (0,15)
				do
					if(frame_num[i] >= 0) then
						if(IdxNextPOC != -1) then
							if(frame_num[i]<frame_num[IdxNextPOC])then
								IdxNextPOC := i;
							end
						else
							IdxNextPOC := i;
						end
					end
				end	
			end
		end


	SendNextPOC: action
				==>
			POCtoDisplay :[ poc[IdxNextPOC] ]
		guard
			IdxNextPOC >= 0
		do
			frame_num[IdxNextPOC] := -1;
		end


	skipSendNextPOC: action ==>
		end


	schedule fsm GetPOC:
		GetPOC           (GetPOC           )-->SearchForNextPOC;
		SearchForNextPOC (SearchForNextPOC )-->SendNextPOC;
		SendNextPOC      (SendNextPOC      )-->GetPOC;
		SendNextPOC      (skipSendNextPOC  )-->GetPOC;
	end

	priority
		SendNextPOC > skipSendNextPOC;
	end
end