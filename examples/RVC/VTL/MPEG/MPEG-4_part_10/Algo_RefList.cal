/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/

//Modified by Mederic Blestel and Endri Bezati IETR/INSA of Rennes
//Modified by Mickael Raulet IETR/INSA of Rennes


actor Algo_RefList () 
	uint(size=31) RefReordering,
	uint(size=31) FraNum,
	uint(size=31) MaxFrameNum,
	uint(size=31) ShortTermList,
	uint(size=5)  SzSTList,
	uint(size=31) LongTermList,
	uint(size=5)  NbLTFrame,
	uint(size=5)  NbRefFrame,
	int (size=32) DelList,
	uint(size=32) POC
		==>
	int (size=32) RefList
		:

/*
*
* Global variables
*
*/

	List(type:int (size=32), size=32) FrameNumList := [-1 :for int s in Integers(0,31)];
	List(type:int (size=32), size=32) IdxLTList    := [-1 :for int s in Integers(0,31)];
	List(type:uint(size=32), size=32) POCList      := [ 0 :for int s in Integers(0,31)];

	List(type:int(size=32), size=16) RefListTab := [0 :for int s in Integers(0,16-1)];
	List(type:int(size=32), size=16) IdxList    := [0 :for int s in Integers(0,16-1)];
	List(type:int(size=32), size=16) STList     := [0 :for int s in Integers(0,16-1)];
	List(type:int(size=32), size=16) LTList     := [-1 :for int s in Integers(0,16-1)];

	uint(size=31) FrameNum           := 0; /* Frame Number of the current picture                                       */
	int (size=32) ValMovedFrame      := 0;
	uint(size=31) ValMaxFrameNum     := 0;
	uint(size=4)  IdxInsertFrame     := 0;
	uint(size=5)  ShortTermCount     := 0; /* Contains number of available short term reference picture                 */
	uint(size=5)  LongTermCount      := 0; /* Contains number of available long term reference picture                  */
	uint(size=5)  CounterRefListTab  := 0; /* Contains the number of RefList's element which are sent                   */
	uint(size=5)  NbSTRead           := 0; /* Contains the number of Short Term List's' element which are read          */
	uint(size=5)  NbLTRead           := 0; /* Contains the number of Long Term List's' element which are read           */
	uint(size=5)  NumMaxListRefFrame := 0; /* Frame Number of all pictures must be between 0 and NumMaxListRefFrame - 1 */
	int (size=32) SizeList           := 0;
	int (size=32) CounterList        := 0;
	uint(size=32) CurrentPOC;
/*
*
* Actions
*
*/


	ReadSizeDelList: action
			DelList :[SizeDelList]
				==>
		do
			SizeList    := SizeDelList;
			CounterList := 0;
			if(SizeList = -1) then
				foreach int i in Integers(0,31)
				do
					if(FrameNumList[i] != FrameNum) then
						FrameNumList[i] := -1;
						IdxLTList[i]    := -1;
						POCList[i]      := 0;
					else
						FrameNumList[i] := 0;
					end
				end
			end
		end


	ReadDelList: action
			DelList :[ValDelList]
				==>
		guard
			CounterList < SizeList
		do
			foreach int i in Integers(0,31)
			do
				if(FrameNumList[i] = ValDelList) then
					FrameNumList[i] := -1;
					IdxLTList[i]    := -1;
					POCList[i]      := 0;
				end
			end
			CounterList := CounterList + 1;
		end

	ReadDelListDone: action ==>
		guard
			CounterList >= SizeList
		end

	//Gets slice's FrameNum and slice's MaxFrameNum
	read_num_ref_frames: action
			FraNum      :[frame_num],
			POC         :[ValPOC],
			MaxFrameNum :[MaxFrNu]
				==>
		var
			bool Idxfound := false,
			int(size=4) idx := 0
		do
			FrameNum       := frame_num;
			CurrentPOC     := ValPOC;
			ValMaxFrameNum := MaxFrNu;
			while(not Idxfound)
			do
				if( (FrameNumList[idx] = -1) or (idx = 31) ) then
					FrameNumList[idx] := frame_num;
					POCList[idx]      := ValPOC;
					Idxfound          := true;
				end
				idx := idx + 1;
			end
		end


	//Get the size of Long Term and Short Term lists
	ReadSizeLists: action
			SzSTList    :[size_short_term_list],
			NbLTFrame :[val_long_term_count]
				==>
		do
			ShortTermCount := size_short_term_list;
			LongTermCount  := val_long_term_count;
			NbSTRead       := 0;
			NbLTRead       := 0;
			foreach int i in Integers(0,31)
			do
				IdxLTList[i] := -1;
			end
		end


	//Fill the Short Term List
	ReadShortTermList: action
			ShortTermList :[ValShortTerm]
				==>
		guard
			NbSTRead < ShortTermCount
		do
			STList[NbSTRead] := ValShortTerm;
			NbSTRead         := NbSTRead + 1;
		end


	//Fill the Long Term List
	ReadLongTermList: action
			LongTermList :[ValLongTerm]
				==>
		guard
			NbLTRead < 16
		do
			LTList[NbLTRead] := ValLongTerm;
			foreach int i in Integers(0,31)
			do
				if(FrameNumList[i] = ValLongTerm) then
					IdxLTList[i] := NbLTRead;
				end
			end
			NbLTRead         := NbLTRead + 1;
		end


	//Long Term and Short Term are read
	ReadListsDone: action ==>
		end


	//Get the Length of the Reference Frame (and send it throw RefList) and initialize the RefListTab
	InitRefList: action
		NbRefFrame :[ValIDxMax]
			==>
		RefList      :[NumMaxListRefFrame]
	var
			int ListIndex := 0
	do
		//NumMaxListRefFrame = min(ValIDxMax, ShortTermCount + LongTermCount)
		if(ValIDxMax < ShortTermCount + LongTermCount) then
			NumMaxListRefFrame := ValIDxMax;
		else
			NumMaxListRefFrame := ShortTermCount + LongTermCount;
		end

		//Initialize RefListTab
		foreach int i in Integers (0, ShortTermCount - 1)
		do
			RefListTab[i] := STList[i];
		end
		ListIndex := ShortTermCount;
		if ( (LongTermCount != 0) and (ShortTermCount < NumMaxListRefFrame) ) then 
			foreach int i in Integers(0,15)
			do
				if ( (LTList[i] != -1) and (ListIndex < 16) ) then 
					RefListTab[ListIndex] := LTList[i]; 
					ListIndex             := ListIndex + 1 ;
				end
			end
		end

//		println("FrameNum :="+FrameNum);
//		println("Current Poc :="+CurrentPOC);
//		println("Nb elem :="+NumMaxListRefFrame);
		//Indicates that nothing in RefList has been sent
		CounterRefListTab := 0;
	end


	//If we don't have to reorder the list, we jump to SendRefList (see scheduler)
	read_ref_pic_list_reordering_flag_0: action 
			RefReordering :[reordering_flag]
				==>
		guard
			reordering_flag = 0
		end


	//We have to reorder the list
	read_ref_pic_list_reordering_flag_1: action 
			RefReordering :[reordering_flag]
				==> 
		guard
			reordering_flag = 1
		do
			ValMovedFrame  := FrameNum;
			IdxInsertFrame := 0;
		end


	//A Short Term Reference must be reordered
	read_reordering_of_pic_nums_idc_0or1: action
			RefReordering :[reordering_of_pic_nums_idc, abs_diff_pic_num_minus1]
				==>
		guard 
			(reordering_of_pic_nums_idc = 0 or reordering_of_pic_nums_idc = 1) 
		var 
			uint(size=4) idxRefList         := 0
		do
			//Compute the value of the re-mapped reference picture
			if (reordering_of_pic_nums_idc = 0) then 
				ValMovedFrame := ValMovedFrame - abs_diff_pic_num_minus1 - 1 ; 
				if(ValMovedFrame < 0) then
					ValMovedFrame := ValMovedFrame + ValMaxFrameNum;
				end
			else // if(a =1) then
				ValMovedFrame := ValMovedFrame + abs_diff_pic_num_minus1 + 1;
				if(ValMovedFrame >= ValMaxFrameNum) then
					ValMovedFrame := ValMovedFrame - ValMaxFrameNum;
				end
			end

			//Search the location of the reference picture (ValMovedFrame) in the RefList
			foreach int i in Integers(0, ShortTermCount + LongTermCount-1)
			do
				if (RefListTab[i] = ValMovedFrame) then 
					idxRefList := i; 
				end
			end

			//Shift to the right all the element with an index between 
			//IdxInsertFrame and idxRefList - 1 (IdxInsertFrame and idxRefList - 1 are also shifted).
			//Thanks to this shift, the short term reference picture located at idxRefList is deleted.
			foreach int i in Integers (0, idxRefList - IdxInsertFrame - 1)
			do
				RefListTab[idxRefList - i] := RefListTab[idxRefList - i - 1];
			end
			//Put the short term ref picture in his new position
			RefListTab[IdxInsertFrame] := ValMovedFrame;
			//The next reference picture will be insert next to this ref picture
			IdxInsertFrame             := IdxInsertFrame +1 ;
		end


	//A Long Term Reference must be reordered
	read_reordering_of_pic_nums_idc_2: action
			RefReordering:[reordering_of_pic_nums_idc, idx_LTList]
				==>
		guard 
			reordering_of_pic_nums_idc = 2
		var 
			uint(size=32) idxRefList
		do
			//Search the location of the reference picture in the RefList
			foreach int i in Integers(0, ShortTermCount + LongTermCount - 1)
			do
				if (RefListTab[i] = LTList[idx_LTList]) then 
					idxRefList := i;
				end
			end

			//Shift to the right all the element with an index between 
			//IdxInsertFrame and idxRefList - 1 (IdxInsertFrame and idxRefList - 1 are also shifted).
			//Thanks to this shift, the long term reference picture located at idxRefList is deleted.
			foreach int i in Integers (0, idxRefList - IdxInsertFrame - 1)
			do
				RefListTab[idxRefList - i] := RefListTab[idxRefList - i - 1];
			end			
			//Put the long term ref picture in his new position
			RefListTab[IdxInsertFrame] := LTList[idx_LTList];
			//The next reference picture will be insert next to this ref picture
			IdxInsertFrame             := IdxInsertFrame + 1 ;
		end


	//Reordering is completed
	read_reordering_of_pic_nums_idc_3: action
			RefReordering:[reordering_of_pic_nums_idc]
				==>
		guard 
			reordering_of_pic_nums_idc = 3
		end

	//Send the RefList
	SendRefList: action 
				==>
			RefList:[poc]
		guard
			CounterRefListTab < NumMaxListRefFrame 
		var
			int (size = 32) poc := 0
		do
			foreach int i in Integers(0,31)
			do
				if(FrameNumList[i] = RefListTab[CounterRefListTab] and POCList[i] != CurrentPOC) then
					poc := POCList[i];
				end
			end
			CounterRefListTab := CounterRefListTab + 1;
	end

	//The RefList is sent
	SendRefListDone: action ==>
	end

/*
*
* Scheduler
*
*/
	schedule fsm  read_num_ref_frames:
		ReadSizeDelList                   (ReadSizeDelList                      )--> ReadDelList;
		ReadDelList                       (ReadDelList                          )--> ReadDelList;
		ReadDelList                       (ReadDelListDone                      )--> read_num_ref_frames;

		read_num_ref_frames               (read_num_ref_frames                  )--> ReadSizeLists;

		ReadSizeLists                     (ReadSizeLists                        )--> ReadLists;
		ReadLists                         (ReadShortTermList                    )--> ReadLists;
		ReadLists                         (ReadLongTermList                     )--> ReadLists;
		ReadLists                         (ReadListsDone                        )--> InitRefList;

		InitRefList                       (InitRefList                          )--> read_ref_pic_list_reordering_flag;
		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_0  )--> SendRefList;

		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_1  )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_0or1 )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_2    )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_3    )--> SendRefList;

		SendRefList                       (SendRefList                          )--> SendRefList;
		SendRefList                       (SendRefListDone                      )--> ReadSizeDelList;


	end


	priority
		ReadShortTermList    > ReadListsDone;
		ReadLongTermList     > ReadListsDone;
		SendRefList          > SendRefListDone;
	end

end
