/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/

//Modified by Mederic Blestel and Endri Bezati IETR/INSA of Rennes
//Modified by Mickael Raulet IETR/INSA of Rennes

//To do : 
//        delete ValidxRefList
//        delete ValidxRefList2
actor Algo_RefList ()
	uint(size=31) RefReordering,
	uint(size=31) FraNum,
	uint(size=31) MaxFrameNum,
	uint(size=31) LongTermList,
	uint(size=5)  NbRefFrame,
	int (size=32) DelList,
	uint(size=32) POC,
	bool          IsIDR
		==>
	int (size=32) RefList
		:

/*
*
* Global variables
*
*/

	List(type:int (size=32), size=32) FrameNumList := [-1 :for int s in Integers(0,31)];
	List(type:int (size=32), size=32) IdxLTList    := [-1 :for int s in Integers(0,31)];
	List(type:uint(size=32), size=32) POCList      := [ 0 :for int s in Integers(0,31)];

	List(type:uint(size=5) , size=16) RefIdx       := [ 0 :for int s in Integers(0,31)];
	List(type:int (size=6) , size=16) ValLTList    := [-1 :for int s in Integers(0,15)];


	int (size=32) ValMovedFrame      := 0;
	uint(size=31) ValMaxFrameNum     := 0;
	uint(size=4)  IdxInsertFrame     := 0;
	uint(size=5)  CounterRefListTab  := 0; /* Contains the number of RefList's element which are sent                   */
	uint(size=5)  NbLTRead           := 0; /* Contains the number of Long Term List's' element which are read           */
	uint(size=5)  NumMaxListRefFrame := 0; /* Frame Number of all pictures must be between 0 and NumMaxListRefFrame - 1 */
	int (size=32) SizeList           := 0;
	int (size=32) CounterList        := 0;
	uint(size=5)  IdxCurrentPic      := 0;
	uint(size=6)  NbPOC              := 0;

	uint(size=4) ValidxRefList         := 0;

	procedure InsertPoc(uint(size=6) IdxPOC, uint(size=32) ValPOC, int(size=32) ValFrameNum, int(size=32) ValIdxLT)
		var
			uint(size=6) ValIdxMax
		begin 
			if(NbPOC < 32) then
				ValIdxMax := NbPOC;
			else
				ValIdxMax := 31;
			end
			foreach int i in Integers(0, ValIdxMax - IdxPOC - 1)
			do
				POCList     [ValIdxMax - i] := POCList     [ValIdxMax - i - 1];
				FrameNumList[ValIdxMax - i] := FrameNumList[ValIdxMax - i - 1];
				IdxLTList   [ValIdxMax - i] := IdxLTList   [ValIdxMax - i - 1];
			end
			POCList     [IdxPOC] := ValPOC;
			FrameNumList[IdxPOC] := ValFrameNum;
			IdxLTList   [IdxPOC] := ValIdxLT;

			NbPOC := NbPOC + 1;
			if(NbPOC > 32) then
				NbPOC := 32;
			end
		end


	procedure DelPOC(uint(size=32) ValPOC)
		var
			int(size=7) IdxToDel := -1
		begin
			foreach int i in Integers(0, NbPOC - 1)
			do
				if(POCList[i] = ValPOC)then
					IdxToDel := i;
				end
			end
			foreach int i in Integers(0,NbPOC - IdxToDel - 2)
			do
				POCList     [IdxToDel + i] := POCList     [IdxToDel + i + 1];
				FrameNumList[IdxToDel + i] := FrameNumList[IdxToDel + i + 1];
				IdxLTList   [IdxToDel + i] := IdxLTList   [IdxToDel + i + 1];
			end
			NbPOC := NbPOC - 1;
			if(POCList[IdxCurrentPic] > ValPOC) then
				IdxCurrentPic := IdxCurrentPic - 1;
			end
			if(IdxCurrentPic>=NbPOC)then
				IdxCurrentPic := NbPOC - 1;
			end
		end

/*
*
* Actions
*
*/

	ReadSizeDelList: action
			DelList :[SizeDelList]
				==>
		do
			SizeList    := SizeDelList;
			CounterList := 0;
			if(SizeList = -1) then
				FrameNumList[0]:= 0;
				IdxLTList   [0]:= IdxLTList   [IdxCurrentPic];
				POCList     [0]:= 0;
				IdxCurrentPic  := 0;
				NbPOC          := 1;
			end
		end


	ReadDelList: action
			DelList :[ValDelList]
				==>
		guard
			CounterList < SizeList
		var
			uint(size=6) Idx := 0
		do
			while(Idx < NbPOC)
			do
				if(FrameNumList[Idx] = ValDelList)then
					DelPOC( POCList[Idx] );
				else
					Idx := Idx + 1;
				end
			end
			CounterList := CounterList + 1;
		end

	ReadDelListDone: action ==>
		guard
			CounterList >= SizeList
		end

	//Gets slice's FrameNum and slice's MaxFrameNum
	read_num_ref_frames: action
			FraNum      :[frame_num],
			POC         :[ValPOC],
			MaxFrameNum :[MaxFrNu],
			IsIDR       :[IsIDR_Pic]
				==>
		var
			bool IdxNotFound := true
		do
			ValMaxFrameNum := MaxFrNu;

			IdxCurrentPic := 0;
			while(IdxNotFound)
			do
				if((POCList[IdxCurrentPic] > ValPOC) or (IdxCurrentPic = NbPOC)) then
					IdxNotFound := false;
				end			
				IdxCurrentPic := IdxCurrentPic + 1;
			end
			IdxCurrentPic   := IdxCurrentPic   - 1;

			if(IdxCurrentPic >= 32) then
				IdxCurrentPic := 31;
			end
			if(not IsIDR_Pic) then
				InsertPoc(IdxCurrentPic,ValPOC,frame_num,-1);
			else
				InsertPoc(IdxCurrentPic,0,frame_num,-1);
			end

			foreach int i in Integers(0,31)
			do
				IdxLTList[i] := -1;
			end
			NbLTRead       := 0;
//		println("");
//		println("Frame num ::"+frame_num);	
		end


	//Fill the Long Term List
	ReadLongTermList.launch: action
			LongTermList :[ValLongTerm]
				==>
		guard
			NbLTRead < 16
		do
			foreach int i in Integers(0,NbPOC)
			do
				if(FrameNumList[i] = ValLongTerm) then
					IdxLTList[i] := NbLTRead;
				end
			end
			NbLTRead     := NbLTRead + 1;
		end


	//Long Term and Short Term are read
	ReadLongTermList.done: action ==>
		end


	//Get the Length of the Reference Frame (and send it throw RefList) and initialize the RefListTab
	InitRefList: action
		NbRefFrame :[ValIDxMax]
			==>
		RefList      :[NumMaxListRefFrame]
	var
			uint(size=4) IdxRefList2
	do
		//NumMaxListRefFrame = min(ValIDxMax, ShortTermCount + LongTermCount)
/*		if(ValIDxMax < ShortTermCount + LongTermCount) then
			NumMaxListRefFrame := ValIDxMax + 1;
		else
			NumMaxListRefFrame := ShortTermCount + LongTermCount;
		end
*/
		//IdxCurrentPic = Nb short term and long term ref
		if(ValIDxMax < IdxCurrentPic) then
			NumMaxListRefFrame := ValIDxMax + 1;
		else
			NumMaxListRefFrame := IdxCurrentPic;
		end

		foreach int i in Integers(0,15)
		do
			ValLTList[i] := -1;
		end
							ValidxRefList := 0;/////////////////////////
		if(IdxCurrentPic > 0) then
			foreach int i in Integers (0,IdxCurrentPic - 1)
			do
				IdxRefList2 := ValidxRefList; 
				if(IdxLTList[IdxCurrentPic - 1 - i] = -1)then
					RefIdx[IdxRefList2 ] := IdxCurrentPic - 1 - i;
					IdxRefList2         := IdxRefList2 + 1;
				else
					ValLTList[IdxLTList[IdxCurrentPic - 1 - i]] := IdxCurrentPic - 1 - i;
				end
				ValidxRefList := IdxRefList2;
			end
		end
		if(ValidxRefList < NumMaxListRefFrame)then
			foreach int i in Integers(0,15)
			do
				IdxRefList2 := ValidxRefList; 
				if ( (ValLTList[i] != -1) and (IdxRefList2 < NumMaxListRefFrame) ) then 
					RefIdx[IdxRefList2] := ValLTList[i]; 
					IdxRefList2         := IdxRefList2 + 1 ;
				end
				ValidxRefList := IdxRefList2;
			end
		end
		
		//Indicates that nothing in RefList has been sent
		CounterRefListTab := 0;
		IdxInsertFrame    := 0;
	end


	//If we don't have to reorder the list, we jump to SendRefList (see scheduler)
	read_ref_pic_list_reordering_flag_0: action 
			RefReordering :[reordering_flag]
				==>
		guard
			reordering_flag = 0
		end


	//We have to reorder the list
	read_ref_pic_list_reordering_flag_1: action 
			RefReordering :[reordering_flag]
				==> 
		guard
			reordering_flag = 1
		do
			ValMovedFrame  := FrameNumList[IdxCurrentPic];
		end


	//A Short Term Reference must be reordered
	read_reordering_of_pic_nums_idc_0or1: action
			RefReordering :[reordering_of_pic_nums_idc, abs_diff_pic_num_minus1]
				==>
		guard 
			(reordering_of_pic_nums_idc = 0 or reordering_of_pic_nums_idc = 1) 
		var 
			int ValMovedIdx                 := 0
			
		do
			//Compute the value of the re-mapped reference picture
			if (reordering_of_pic_nums_idc = 0) then 
				ValMovedFrame := ValMovedFrame - abs_diff_pic_num_minus1 - 1 ; 
				if(ValMovedFrame < 0) then
					ValMovedFrame := ValMovedFrame + ValMaxFrameNum;
				end
			else // if(a =1) then
				ValMovedFrame := ValMovedFrame + abs_diff_pic_num_minus1 + 1;
				if(ValMovedFrame >= ValMaxFrameNum) then
					ValMovedFrame := ValMovedFrame - ValMaxFrameNum;
				end
			end
		ValidxRefList:=0;
			//Search the location of the reference picture (ValMovedFrame) in the RefList
			foreach int i in Integers(0, NumMaxListRefFrame-1)
			do
				if (FrameNumList[RefIdx[i]] = ValMovedFrame) then 
					ValidxRefList  := i;
					ValMovedIdx := RefIdx[i];
				end
			end
			if(ValidxRefList > IdxInsertFrame) then
				//Shift to the right all the element with an index between 
				//IdxInsertFrame and idxRefList - 1 (IdxInsertFrame and idxRefList - 1 are also shifted).
				//Thanks to this shift, the short term reference picture located at idxRefList is deleted.
				foreach int i in Integers (0, ValidxRefList - IdxInsertFrame - 1)
				do
					RefIdx[ValidxRefList - i] := RefIdx[ValidxRefList - i - 1];
				end
				//Put the short term ref picture in his new position
				RefIdx[IdxInsertFrame] := ValMovedIdx;
			end
			//The next reference picture will be insert next to this ref picture
			IdxInsertFrame             := IdxInsertFrame +1 ;
		end


	//A Long Term Reference must be reordered
	read_reordering_of_pic_nums_idc_2: action
			RefReordering:[reordering_of_pic_nums_idc, idx_LTList]
				==>
		guard 
			reordering_of_pic_nums_idc = 2
		do
			ValidxRefList := 0;
			//Search the location of the reference picture in the RefList
			foreach int i in Integers(0, NumMaxListRefFrame-1)
			do
				if (RefIdx[i] = ValLTList[idx_LTList]) then 
					ValidxRefList := i;
				end
			end
			//Shift to the right all the element with an index between 
			//IdxInsertFrame and idxRefList - 1 (IdxInsertFrame and idxRefList - 1 are also shifted).
			//Thanks to this shift, the long term reference picture located at idxRefList is deleted.
			if(ValidxRefList > IdxInsertFrame) then
				foreach int i in Integers (0, ValidxRefList - IdxInsertFrame - 1)
				do
					RefIdx[ValidxRefList - i] := RefIdx[ValidxRefList - i - 1];
				end
			end
			//Put the long term ref picture in his new position
			RefIdx[IdxInsertFrame] := ValLTList[idx_LTList];
			//The next reference picture will be insert next to this ref picture
			IdxInsertFrame             := IdxInsertFrame + 1 ;
		end


	//Reordering is completed
	read_reordering_of_pic_nums_idc_3: action
			RefReordering:[reordering_of_pic_nums_idc]
				==>
		guard 
			reordering_of_pic_nums_idc = 3
		end

	//Send the RefList
	SendRefList: action 
				==>
			RefList:[poc]
		guard
			CounterRefListTab < NumMaxListRefFrame 
		var
			int (size = 32) poc := -1
		do
			/*foreach int i in Integers(0,NbPOC)
			do
				if(FrameNumList[i] = RefListTab[CounterRefListTab] and i != IdxCurrentPic) then
					poc := POCList[i];
				end
			end*/
//println("poc:"+POCList[RefIdx[CounterRefListTab]]+"; frnum:"+FrameNumList[RefIdx[CounterRefListTab]]+"; idx"+RefIdx[CounterRefListTab]);
			poc := POCList[RefIdx[CounterRefListTab]];
			CounterRefListTab := CounterRefListTab + 1;
		end

	//The RefList is sent
	SendRefListDone: action ==>
		end

/*
*
* Scheduler
*
*/
	schedule fsm  read_num_ref_frames:
		ReadSizeDelList                   (ReadSizeDelList                      )--> ReadDelList;
		ReadDelList                       (ReadDelList                          )--> ReadDelList;
		ReadDelList                       (ReadDelListDone                      )--> read_num_ref_frames;

		read_num_ref_frames               (read_num_ref_frames                  )--> ReadLongTerm;

		ReadLongTerm                      (ReadLongTermList.launch              )--> ReadLongTerm;
		ReadLongTerm                      (ReadLongTermList.done                )--> InitRefList;

		InitRefList                       (InitRefList                          )--> read_ref_pic_list_reordering_flag;
		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_0  )--> SendRefList;

		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_1  )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_0or1 )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_2    )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_3    )--> SendRefList;

		SendRefList                       (SendRefList                          )--> SendRefList;
		SendRefList                       (SendRefListDone                      )--> ReadSizeDelList;


	end


	priority
		ReadLongTermList.launch > ReadLongTermList.done;
		SendRefList             > SendRefListDone;
	end

end
