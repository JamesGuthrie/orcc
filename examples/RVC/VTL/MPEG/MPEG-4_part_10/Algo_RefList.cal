/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/

//Modified by Mederic Blestel and Endri Bezati IETR/INSA of Rennes
//Modified by Mickael Raulet IETR/INSA of Rennes


actor Algo_RefList () 
	uint(size=32)  RefReordering,
	uint(size=31)  FraNum,
	uint(size=31) MaxFrameNum,
	uint(size=31) ShortTermList,
	uint(size=5)  SzSTList,
	uint(size=31) LongTermList,
	uint(size=5) Nb_LT_Frame,
	uint(size=5) Nb_RefFrame
		==>
	int(size=32) RefList
		:


	List(type:int(size=32),size=16)         reordering_ref_list := [0 :for int s in Integers(0,16-1)];
	List(type:int(size=32),size=16)         short_term_list     := [0 :for int s in Integers(0,16-1)];
	List(type:int,size=16)                  pic_idx_list        := [0 :for int s in Integers(0,16-1)];
	List(type:int(size=32),size=16)         long_term_list      := [-1 :for int s in Integers(0,16-1)];
	List(type:uint(size = 32), size = 2*16) RefListTab          := [-1 :for int s in Integers(0,2*16-1)];
	List(type:uint(size=32),size= 2*16)     RefListSent         := [0: for int s in Integers(0, 2*16-1)];

	uint          frame_num          := 0;
	int           pred               := 0;
	int (size=32) ValMaxFrameNum     := 0;
	uint(size=4)  index              := 0;
	uint(size=5)  short_term_count   := 0;
	uint(size=5)  long_term_count    := 0;
	uint(size=4)  long_term_idx      := 0;
	int           CounterRefList     := 0;
	int           CounterRefListTab  := 0;
	int           CounterRefListSent := 0;
	bool          EndInitIdc3        := false;
	bool          EndInitSentRefList := false;
	uint(size=5)  Nb_short_term_read := 0;
	uint(size=5)  Nb_long_term_read  := 0;
	uint(size=5)  NumMaxListRefFrame := 0;


	read_num_ref_frames: action
			FraNum:[b],
			MaxFrameNum:[MaxFrNu]
				==>
		do
			frame_num      := b;
			ValMaxFrameNum := MaxFrNu;
		end


	read_ref_pic_list_reordering_flag_0: action 
			RefReordering:[v],
			Nb_RefFrame:[ValIDxMax]
				==>
		guard
			v = 0
		do
			if(ValIDxMax < short_term_count + long_term_count) then
				NumMaxListRefFrame := ValIDxMax;
			else
				NumMaxListRefFrame := short_term_count + long_term_count;
			end
		end


	read_ref_pic_list_reordering_flag_1: action 
			RefReordering:[v],
			Nb_RefFrame:[ValIDxMax]
				==> 
		guard
			v = 1
		var 
			int ListIndex := 0,
			int(size=32) frame_num_short_term
		do
			if(ValIDxMax < short_term_count + long_term_count) then
				NumMaxListRefFrame := ValIDxMax;
			else
				NumMaxListRefFrame := short_term_count + long_term_count;
			end
			pred  := frame_num;
			index := 0;
			if (short_term_count != 0) then
				foreach int i in Integers (0, short_term_count - 1)
				do
					reordering_ref_list[ListIndex] := short_term_list[i];
					ListIndex                      := ListIndex + 1 ;
				end
			else 
				reordering_ref_list := [0 :for int s in Integers(0,16-1)];
			end 
			if (long_term_count != 0) then 
				foreach int i in Integers(0, 15)
				do
					if ( (long_term_list[i] != -1) and (ListIndex <= 16) ) then 
						reordering_ref_list[ListIndex] := long_term_list[i]; 
						ListIndex                      := ListIndex + 1 ;
					end
				end
			end
		end

  
	read_reordering_of_pic_nums_idc_01: action
			RefReordering:[a, b]
				==>
		guard 
			(a = 0 or a = 1) 
		var 
			uint(size=4) idx         := 0,
			int          counter_for := 0
		do
			if (a = 0) then 
				pred := pred - b - 1 ; 
				if(pred < 0) then
					pred := pred + ValMaxFrameNum;
				end
			else // if(a =1) then
				pred := pred + b+1;
				if(pred >= ValMaxFrameNum) then
					pred := pred - ValMaxFrameNum;
				end
			end
			foreach int i in Integers(0, short_term_count+long_term_count-1)
			do
				if (reordering_ref_list[i] = pred) then 
					idx := i; 
				end
			end
			//Remove from the reference list the frame at index equals to idx
			foreach int i in Integers(idx, short_term_count+long_term_count - 2)
			do
				reordering_ref_list[i] := reordering_ref_list[i + 1];
			end

			//Add a frame at index equals to index.
			//So copy the index - 1 first elements
			//Add pred_ix at index "index"
			//and copy the others elements of the list
			counter_for:=short_term_count + long_term_count - 1;
			foreach int i in Integers(0, counter_for - index)
			do
				reordering_ref_list[counter_for - i] := reordering_ref_list[counter_for - i - 1];
			end
			reordering_ref_list[index] := pred;
			index := index +1 ;
		end


	read_reordering_of_pic_nums_idc_2: action
			RefReordering:[a, b]
				==>
		guard 
			a = 2
		var 
			uint(size=32) idx,
			int counter_for  
		do
			foreach int i in Integers(0, short_term_count+long_term_count-1)
			do
				if (reordering_ref_list[i] = long_term_list[b]) then 
					idx := i;
				end
			end

			//Remove from the reference list the frame at index equals to idx
			foreach int i in Integers(idx, short_term_count+long_term_count - 2)
			do
				reordering_ref_list[i] := reordering_ref_list[i + 1];
			end 
			
			//Add a frame at index equals to index.
			//So copy the index - 1 first elements
			//Add pred_ix at index "index"
			//and copy the others elements of the list
			counter_for:=short_term_count + long_term_count - 1;
			foreach int i in Integers(0, counter_for - index)
			do
				reordering_ref_list[counter_for - i] := reordering_ref_list[counter_for - i - 1];
			end
			reordering_ref_list[index] := long_term_list[b];
			
			reordering_ref_list[index] := long_term_list[b];
			index := index + 1 ;
		end


	read_reordering_of_pic_nums_idc_3: action
			RefReordering:[a]
				==>
		guard 
			a = 3
		do
			RefListTab[0] := NumMaxListRefFrame;
			foreach int s in Integers(0, NumMaxListRefFrame - 1)
			do
				RefListTab[s + 1] := reordering_ref_list[s];
			end
			EndInitIdc3 := true;
		end


	IDC3SendRefList: action 
				==>
			RefList:[ref]
		guard
			EndInitIdc3
		var
			uint(size = 5) ref
		do
			ref := RefListTab[CounterRefListTab];
			CounterRefListTab := CounterRefListTab + 1;
		end		


	IDC3SendRefListDone: action ==>
		guard
			CounterRefListTab = NumMaxListRefFrame + 1
		do
			CounterRefListTab := 0;
			EndInitIdc3       := false;
		end	


	InitRefList_zero: action 
				==>
			RefList:[0]
		guard
			(short_term_count + long_term_count) = 0
		do
			EndInitSentRefList := false;
		end


	InitRefList_not0: action ==> 
		guard
			(EndInitSentRefList = false)  and  ( short_term_count + long_term_count != 0 )
		var 
			List(type:uint(size=32),size=2*16) reflist := [0: for int k in Integers(0,2*16-1)],
			int ListIndex := 0
		do
			if (short_term_count != 0) then 
				foreach int l in Integers( 0, short_term_count - 1 )
				do
					reflist[l] := short_term_list[l];
				end
				ListIndex      := short_term_count; 
			else // => inutile !
				foreach int s in Integers( 0, short_term_count + long_term_count - 1 )
				do
					reflist[s] := 0;
				end
				ListIndex := short_term_count + long_term_count; 
			end
			if (long_term_count != 0) then
				foreach int i in Integers(0, 15)
				do
					if (long_term_list[i] != -1) then 
						reflist[ListIndex] := long_term_list[i];
						ListIndex          := ListIndex + 1;
					end
				end
			end
			RefListSent[0] := NumMaxListRefFrame;
			foreach int s in Integers(0, NumMaxListRefFrame - 1)
			do
				RefListSent[s + 1] := reflist[s];	
			end
			EndInitSentRefList     := true;	
		end


	SendRefList: action
				==>
			RefList:[ref]
		guard
			EndInitSentRefList = true
		var
			uint(size = 32) ref
		do
			ref := RefListSent[CounterRefListTab];
			CounterRefListTab := CounterRefListTab + 1;
		end


	SendRefListDone: action ==>
		guard
			CounterRefListTab = NumMaxListRefFrame + 1
		do
			CounterRefListTab  := 0;
			EndInitSentRefList := false;
		end


	ReadSizeLists: action
			SzSTList   :[size_short_term_list],
			Nb_LT_Frame:[val_long_term_count]
				==>
		do
			short_term_count   := size_short_term_list;
			long_term_count    := val_long_term_count;
			Nb_short_term_read := 0;
		end


	ReadShortTermList: action
			ShortTermList:[ValShortTerm]
				==>
		guard
			Nb_short_term_read < short_term_count
		do
			short_term_list[Nb_short_term_read] := ValShortTerm;
			Nb_short_term_read := Nb_short_term_read + 1;
		end

	
	ReadShortTermList_Done: action ==>
		do
			Nb_long_term_read := 0;
		end


	ReadLongTermList: action
			LongTermList:[ValLongTerm]
				==>
		guard
			Nb_long_term_read < 16
		do
			long_term_list[Nb_long_term_read] := ValLongTerm;
			Nb_long_term_read := Nb_long_term_read + 1;
		end

	
	ReadLongTermList_Done: action ==>
		end

	schedule fsm  read_num_ref_frames:
		read_num_ref_frames               (read_num_ref_frames                 )--> ReadSizeLists;

		/* there isn't list to sent */
		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_0 )--> send_refList;
		send_refList                      (InitRefList_zero                    )--> ReadSizeLists;
		send_refList                      (InitRefList_not0                    )--> RefListTabSent;
		RefListTabSent                    (SendRefList                         )--> RefListTabSent;
		RefListTabSent                    (SendRefListDone                     )--> read_num_ref_frames;

		/* there is list 0 to sent */
		read_ref_pic_list_reordering_flag (read_ref_pic_list_reordering_flag_1 )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_01  )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_2   )--> read_reordering_of_pic_nums_idc;
		read_reordering_of_pic_nums_idc   (read_reordering_of_pic_nums_idc_3   )--> IDC3SendRefList;
		IDC3SendRefList                   (IDC3SendRefList                     )--> IDC3SendRefList;
		IDC3SendRefList                   (IDC3SendRefListDone                 )--> read_num_ref_frames;


		ReadSizeLists                     (ReadSizeLists                       )-->ReadShortTermList;
		ReadShortTermList                 (ReadShortTermList                   )-->ReadShortTermList;
		ReadShortTermList                 (ReadShortTermList_Done              )-->ReadLongTermList;
		ReadLongTermList                  (ReadLongTermList                    )-->ReadLongTermList;
		ReadLongTermList                  (ReadLongTermList_Done               )-->read_ref_pic_list_reordering_flag;
	end

	priority
		SendRefListDone      > SendRefList;
		IDC3SendRefListDone  > IDC3SendRefList;
		ReadShortTermList    > ReadShortTermList_Done;
		ReadLongTermList     > ReadLongTermList_Done;
	end

end
