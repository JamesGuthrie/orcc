actor MPEG4_algo_DCRinvpred (int DCVAL,
	int NEWVOP,
	int INTRA,
	int INTER,
	int QUANT_MASK,
	int ACCODED,
	int ACPRED) int(size=BTYPE_SZ) BTYPE, int(size=MB_COORD_SZ + 3) A, int(size=MB_COORD_SZ +
3) B, int(size=MB_COORD_SZ + 3) C, int(size=SAMPLE_SZ) QFS_DC, int(size=QUANT_SZ) QP ==>
int(size=SAMPLE_SZ) QF_DC , int(size=MB_COORD_SZ + 3) PTR , int(size=3) AC_PRED_DIR ,
int(size=3) MODE , bool SIGNED , int(size=QUANT_SZ) QUANT :

	int SCALER_SZ = 7;

	int MAXW_IN_MB = 121;

	int SAMPLE_SZ = 13;

	int BTYPE_SZ = 12;

	int MB_COORD_SZ = 8;

	int QUANT_SZ = 6;

	// Bitwidth needed for 'dc_scalar' - see ISO/IEC 14496-2
	int(size=QUANT_SZ) s_QP;

	// Decoded 'quantiser_scale' - see ISO/IEC 14496-2
	int(size=2) round;

	// Flag to indicate whether 'quantiser_scale' is even or odd
	int BUF_SIZE = (MAXW_IN_MB + 2) * 8;

	// Have 4 8x8 blocks per MB
	int ptr := 8;

	// Pointer to current 8x8 block on current row
	// using circular buffer addressing. Start at 4, since 0-3 are reserved.
	int(size=4) comp := 0;

	// 8x8 block component in macroblock index  // JWJ: increased size
	// Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
	List(type: int(size=SAMPLE_SZ), size=BUF_SIZE) dc_buf := [ DCVAL : for int k in Integers(1,
	BUF_SIZE) ];

	int(size=SAMPLE_SZ) dc_pred;

	// Decoded DC prediction value
	int(size=SCALER_SZ) scaler;

	// Decoded 'dc_scalar'
	bool is_signed;

	// Flag to indicate INTER or INTRA block
	int(size=SAMPLE_SZ) dc_val;

	// Reconstructed DC coefficient  
	start: action BTYPE:[ cmd ] ==> AC_PRED_DIR:[ -2 ]
	guard
		bitand(cmd, NEWVOP) != 0
	do
		comp := 0;
		ptr := 8;
	end

	// Used to skip BTYPE tokens where necessary
	skip: action BTYPE:[ x ] ==>
	end

	read.inter_ac: action BTYPE:[ cmd ], QP:[ qp ] ==> AC_PRED_DIR:[ 0 ], MODE:[ 0 ], PTR:[ 0 ],
		SIGNED:[ true ], QUANT:[ s_QP ]
	guard
		bitand(cmd, INTER) != 0,
		bitand(cmd, ACCODED) != 0
	do
		is_signed := true;
		s_QP := qp;
		round := bitxor(bitand(s_QP, 1), 1);
	end

	read.other: action BTYPE:[ cmd ], QP:[ qp ] ==> AC_PRED_DIR:[ -1 ]
	guard
		bitand(cmd, INTRA) = 0
	do
		s_QP := qp;
	end

	function abs(int x) --> int :
		if x < 0 then
			(-x)
		else
			x
		end
	end

	function dc_scaler() --> int(size=SCALER_SZ) :
		if bitand(comp, 4) = 0 then
		// Y component
			if s_QP > 0 and s_QP < 5 then
				8
			else
				if s_QP > 4 and s_QP < 9 then
					2 * s_QP
				else
					if s_QP > 8 and s_QP < 25 then
						s_QP + 8
					else
						(2 * s_QP) - 16
					end
				end
			end
		else
		// UV component
			if s_QP > 0 and s_QP < 5 then
				8
			else
				if s_QP > 4 and s_QP < 25 then
					rshift(s_QP + 13, 1)
				else
					s_QP - 6
				end
			end
		end
	end

	read.intra: action BTYPE:[ cmd ], QP:[ qp ], A:[ a ], B:[ b ], C:[ c ] ==> PTR:[ if top then
			c
		else
			a
		end ], AC_PRED_DIR:[ s ], MODE:[ s ], SIGNED:[ is_signed ], QUANT:[ s_QP ]
	var
		int(size=SAMPLE_SZ) dca = dc_buf[a] , int(size=SAMPLE_SZ) dcb = dc_buf[b] ,
		int(size=SAMPLE_SZ) dcc = dc_buf[c] , int(size=SAMPLE_SZ) horiz = abs(dcb - dcc) ,
		int(size=SAMPLE_SZ) vert = abs(dca - dcb) , bool top = vert < horiz , int(size=3) s , bool ac =
		bitand(cmd, ACPRED) != 0
	do
		s_QP := qp;
		scaler := dc_scaler();
		// Retrieve 'dc_scalar'. See ISO/IEC 14496-2 Table 7-1.
		dc_pred := ((if top then
			dcc
		else
			dca
		end) + rshift(scaler, 1)) / scaler;
		// See ISO/IEC 14496-2 Section 7.4.3.2.
		s := if not ac then
			0
		else
			if top then
				2
			else
				1
			end
		end;
		// Set 'ac_pred_dir'
		is_signed := scaler = 0;
		// Will never be true!

	end

	getdc.inter: action QFS_DC:[ dc ] ==>
	var
		int(size=SAMPLE_SZ) v = (s_QP * (lshift(abs(dc), 1) + 1)) - round // See ISO/IEC 14496-2 Section 7.4.4.2.1 (H.263).

	do
		dc_val := if dc = 0 then
			0
		else
			if not is_signed then
				dc
			else
				if dc < 0 then
					-v
				else
					v
				end
			end
		end;
	end

	// Do inverse prediction on INTRA block DC
	getdc.intra: action QFS_DC:[ dc ] ==>
	do
		dc_val := (dc + dc_pred) * scaler;
		// See ISO/IEC 14496-2 Section 7.4.3.2 and Section 7.4.4.1.1.

	end

	function saturate(int x) --> int
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :
		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end

	sat: action ==> QF_DC:[ dc ]
	var
		int(size=SAMPLE_SZ) dc = saturate(dc_val)
	do
		dc_buf[bitor(ptr, comp)] := dc;
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			ptr := if ptr = 8 then
				BUF_SIZE - 8
			else
				ptr - 8
			end;
		end
	end

	schedule fsm read :
		read ( start ) --> getw;
		read ( read.inter_ac ) --> inter;
		read ( read.intra ) --> intra;
		read ( read.other ) --> advance;
		getw ( skip ) --> geth;
		geth ( skip ) --> read;
		intra ( getdc.intra ) --> sat;
		inter ( getdc.inter ) --> sat;
		sat ( sat ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.inter_ac > read.other > read.intra;
	end

end