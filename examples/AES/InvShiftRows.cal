/*
This FU is part of a CAL implementation of AES (Rijndael).

To support parallel processing of multiple blocks, 
 the output of each FU is expanded to include the round number.
That is, each 16-byte block is expanded to 17-byte block,
 whose first byte is the current round index of the block. 

FU ID: InvShiftRows
Function: This FU performs InvShiftRows process in each round of the inverse cipher.

Naming convention of input and output ports:
1) IP = Input Port, OP = Output Port, PT = Plaintext, CT = Ciphertext;
2) when there is a single port, named as "IP_abc" or "OP_abc";
3) when there is multiple ports, named as "IPx_abc" or "OPx_abc", 
   where "x" is a number to inform graphiti about the location of the port;
4) when the meaning of the input/output ports are obvious, "_abc" is omitted from the port names.  

Shujun Li @ Uni-Konstanz 2010 
*/

import all caltrop.lib.BitOps;

actor InvShiftRows () uint(size=8) IP ==> uint(size=8) OP:

/*	int BlockSize = 16;
	List(type:String, size=16) hexdigits = [
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"
	];
	function byte2hex (uint(size=8) x) --> String:
		"0x"+hexdigits[rshift(x,4)]+hexdigits[bitand(x,0x0f)]
	end
	function list2hex (List(type:uint(size=8), size=BlockSize) x) --> List(type:String, size=BlockSize):
		[byte2hex(x[i]) : for int i in Integers(0,BlockSize-1)]
	end */

	List(type:int, size=16) indices = 
	[ // Note that the plaintext is columnwise.
		 0,13,10, 7,
		 4, 1,14,11,
		 8, 5, 2,15,
		12, 9, 6, 3
	];

	List(type:uint(size=8), size=17) y := [0 : for int i in Integers(1,17)];

	action IP:[x] repeat 17 ==> OP:[y] repeat 17
	do
		y[0] := x[0] + 1;
		foreach int i in Integers(1,16)
		do
			y[i] := x[indices[i-1]+1];
		end
		// println("InvShiftRows " + y[0] + " action has been executed.");
		// println(list2hex([y[i]: for int i in Integers(1,16)]));
	end

end
